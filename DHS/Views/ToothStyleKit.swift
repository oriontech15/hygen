//
//  ToothStyleKit.swift
//
//  Created on 8/11/17.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class ToothStyleKit: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawTooth(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 422, height: 377), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 422, height: 377), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 422, y: resizedFrame.height / 377)
        context.translateBy(x: -347, y: -145)
        
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 345, y: 145)
            
            /// Group
            do {
                context.saveGState()
                context.translateBy(x: 31, y: 0)
                
                /// Oval
                let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 124, height: 69))
                context.saveGState()
                context.translateBy(x: 104, y: 0.85)
                UIColor(hue: 0.571, saturation: 0.159, brightness: 0.984, alpha: 1).setFill()
                oval.fill()
                context.restoreGState()
                
                /// Path
                let path8 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 170, height: 120))
                context.saveGState()
                context.translateBy(x: 81, y: 2)
                UIColor.white.setFill()
                path8.fill()
                context.saveGState()
                path8.lineWidth = 16
                context.beginPath()
                context.addPath(path8.cgPath)
                context.clip(using: .evenOdd)
                UIColor(hue: 0.571, saturation: 0.159, brightness: 0.984, alpha: 1).setStroke()
                path8.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Combined Shape
                let combinedShape = UIBezierPath()
                combinedShape.move(to: CGPoint(x: 153.66, y: 28.55))
                combinedShape.addCurve(to: CGPoint(x: 32.5, y: 19.61), controlPoint1: CGPoint(x: 106.25, y: -6.26), controlPoint2: CGPoint(x: 65.87, y: -9.24))
                combinedShape.addCurve(to: CGPoint(x: 48.16, y: 186.04), controlPoint1: CGPoint(x: -22.01, y: 66.75), controlPoint2: CGPoint(x: -1.89, y: 147.55))
                combinedShape.addCurve(to: CGPoint(x: 94.27, y: 354.19), controlPoint1: CGPoint(x: 76.85, y: 208.1), controlPoint2: CGPoint(x: 84.99, y: 335.96))
                combinedShape.addCurve(to: CGPoint(x: 135.76, y: 354.19), controlPoint1: CGPoint(x: 103.56, y: 372.41), controlPoint2: CGPoint(x: 124.95, y: 371.95))
                combinedShape.addCurve(to: CGPoint(x: 165.5, y: 257.61), controlPoint1: CGPoint(x: 146.58, y: 336.43), controlPoint2: CGPoint(x: 142.86, y: 258.19))
                combinedShape.addCurve(to: CGPoint(x: 196.78, y: 354.19), controlPoint1: CGPoint(x: 186.43, y: 257.04), controlPoint2: CGPoint(x: 188.24, y: 336.63))
                combinedShape.addCurve(to: CGPoint(x: 237.53, y: 356.8), controlPoint1: CGPoint(x: 205.32, y: 371.75), controlPoint2: CGPoint(x: 226.15, y: 372.2))
                combinedShape.addCurve(to: CGPoint(x: 282.05, y: 186.04), controlPoint1: CGPoint(x: 248.91, y: 341.4), controlPoint2: CGPoint(x: 253.76, y: 210.26))
                combinedShape.addCurve(to: CGPoint(x: 299.6, y: 20.19), controlPoint1: CGPoint(x: 328.74, y: 146.06), controlPoint2: CGPoint(x: 354.11, y: 67.89))
                combinedShape.addCurve(to: CGPoint(x: 178.65, y: 28.34), controlPoint1: CGPoint(x: 266.3, y: -8.95), controlPoint2: CGPoint(x: 225.98, y: -6.23))
                context.saveGState()
                context.translateBy(x: 0.5, y: 8.39)
                combinedShape.usesEvenOddFillRule = true
                UIColor.white.setFill()
                combinedShape.fill()
                context.saveGState()
                combinedShape.lineWidth = 26
                context.beginPath()
                context.addPath(combinedShape.cgPath)
                context.clip(using: .evenOdd)
                UIColor(hue: 0.569, saturation: 0.083, brightness: 0.979, alpha: 1).setStroke()
                combinedShape.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Path 2
                let path2 = UIBezierPath()
                path2.move(to: CGPoint(x: 0, y: 28.96))
                path2.addCurve(to: CGPoint(x: 85.08, y: 0), controlPoint1: CGPoint(x: 25.92, y: 9.51), controlPoint2: CGPoint(x: 54.28, y: -0.15))
                path2.addCurve(to: CGPoint(x: 166.17, y: 28.96), controlPoint1: CGPoint(x: 115.89, y: 0.15), controlPoint2: CGPoint(x: 142.92, y: 9.8))
                path2.addCurve(to: CGPoint(x: 130.69, y: 10.25), controlPoint1: CGPoint(x: 150.62, y: 19.43), controlPoint2: CGPoint(x: 138.8, y: 13.19))
                path2.addCurve(to: CGPoint(x: 85.08, y: 2.36), controlPoint1: CGPoint(x: 118.52, y: 5.85), controlPoint2: CGPoint(x: 108.87, y: 2.36))
                path2.addCurve(to: CGPoint(x: 36.88, y: 10.25), controlPoint1: CGPoint(x: 61.29, y: 2.36), controlPoint2: CGPoint(x: 52.34, y: 4.91))
                path2.addCurve(to: CGPoint(x: 0, y: 28.96), controlPoint1: CGPoint(x: 26.57, y: 13.81), controlPoint2: CGPoint(x: 14.28, y: 20.05))
                path2.close()
                path2.move(to: CGPoint(x: 0, y: 28.96))
                context.saveGState()
                context.translateBy(x: 82, y: 37.15)
                path2.lineWidth = 8
                UIColor(hue: 0.571, saturation: 0.161, brightness: 0.985, alpha: 1).setStroke()
                path2.stroke()
                context.restoreGState()
                
                /// Path 7
                let path7 = UIBezierPath()
                path7.move(to: CGPoint(x: 124.47, y: 17.01))
                path7.addCurve(to: CGPoint(x: 76.79, y: 0.17), controlPoint1: CGPoint(x: 109.5, y: 4.52), controlPoint2: CGPoint(x: 93.61, y: -1.09))
                path7.addCurve(to: CGPoint(x: 0.12, y: 90.04), controlPoint1: CGPoint(x: 26.75, y: 3.93), controlPoint2: CGPoint(x: -2.12, y: 46.24))
                path7.addCurve(to: CGPoint(x: 55.19, y: 182.85), controlPoint1: CGPoint(x: 2.36, y: 133.84), controlPoint2: CGPoint(x: 29.19, y: 157.98))
                path7.addCurve(to: CGPoint(x: 89.78, y: 330.63), controlPoint1: CGPoint(x: 67.54, y: 194.65), controlPoint2: CGPoint(x: 87.74, y: 319.78))
                path7.addCurve(to: CGPoint(x: 95.82, y: 348.95), controlPoint1: CGPoint(x: 91.14, y: 337.86), controlPoint2: CGPoint(x: 93.16, y: 343.97))
                path7.addCurve(to: CGPoint(x: 69.94, y: 186.51), controlPoint1: CGPoint(x: 86.34, y: 255.23), controlPoint2: CGPoint(x: 77.72, y: 201.08))
                path7.addCurve(to: CGPoint(x: 28.75, y: 127.9), controlPoint1: CGPoint(x: 58.27, y: 164.64), controlPoint2: CGPoint(x: 51.5, y: 160.46))
                path7.addCurve(to: CGPoint(x: 51.95, y: 19.8), controlPoint1: CGPoint(x: 6, y: 95.34), controlPoint2: CGPoint(x: 17.69, y: 40.17))
                path7.addCurve(to: CGPoint(x: 124.47, y: 17.01), controlPoint1: CGPoint(x: 74.78, y: 6.23), controlPoint2: CGPoint(x: 98.96, y: 5.3))
                path7.close()
                path7.move(to: CGPoint(x: 124.47, y: 17.01))
                context.saveGState()
                context.translateBy(x: 7.01, y: 15.26)
                path7.usesEvenOddFillRule = true
                UIColor(hue: 0.571, saturation: 0.159, brightness: 0.984, alpha: 1).setFill()
                path7.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Group 2
            do {
                context.saveGState()
                context.translateBy(x: 148, y: 145)
                
                /// Rectangle
                let rectangle = UIBezierPath()
                rectangle.move(to: CGPoint(x: 2.35, y: 37.3))
                rectangle.addCurve(to: CGPoint(x: 48.86, y: 41.97), controlPoint1: CGPoint(x: 19.62, y: 45.63), controlPoint2: CGPoint(x: 35.12, y: 47.19))
                rectangle.addCurve(to: CGPoint(x: 78.05, y: 3.45), controlPoint1: CGPoint(x: 62.48, y: 36.8), controlPoint2: CGPoint(x: 72.21, y: 23.96))
                rectangle.addLine(to: CGPoint(x: 78.05, y: 3.45))
                rectangle.addCurve(to: CGPoint(x: 79.17, y: 2.83), controlPoint1: CGPoint(x: 78.19, y: 2.97), controlPoint2: CGPoint(x: 78.69, y: 2.69))
                rectangle.addCurve(to: CGPoint(x: 79.8, y: 3.49), controlPoint1: CGPoint(x: 79.48, y: 2.92), controlPoint2: CGPoint(x: 79.72, y: 3.17))
                rectangle.addCurve(to: CGPoint(x: 62.45, y: 83.67), controlPoint1: CGPoint(x: 90.06, y: 48.57), controlPoint2: CGPoint(x: 84.28, y: 75.3))
                rectangle.addCurve(to: CGPoint(x: 1.15, y: 38.51), controlPoint1: CGPoint(x: 40.51, y: 92.08), controlPoint2: CGPoint(x: 20.08, y: 77.03))
                rectangle.addLine(to: CGPoint(x: 1.15, y: 38.51))
                rectangle.addCurve(to: CGPoint(x: 1.56, y: 37.31), controlPoint1: CGPoint(x: 0.93, y: 38.07), controlPoint2: CGPoint(x: 1.12, y: 37.53))
                rectangle.addCurve(to: CGPoint(x: 2.35, y: 37.3), controlPoint1: CGPoint(x: 1.81, y: 37.18), controlPoint2: CGPoint(x: 2.1, y: 37.18))
                rectangle.close()
                rectangle.move(to: CGPoint(x: 2.35, y: 37.3))
                context.saveGState()
                context.translateBy(x: 50.17, y: 49.68)
                context.rotate(by: 370 * CGFloat.pi/180)
                context.translateBy(x: -42.36, y: -42.96)
                rectangle.usesEvenOddFillRule = true
                UIColor(hue: 0.571, saturation: 0.159, brightness: 0.984, alpha: 1).setFill()
                rectangle.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Rectangle 2
            let rectangle2 = UIBezierPath()
            rectangle2.move(to: CGPoint(x: 0.02, y: 29.79))
            rectangle2.addCurve(to: CGPoint(x: 19.21, y: 1.41), controlPoint1: CGPoint(x: -0.45, y: 14.97), controlPoint2: CGPoint(x: 5.95, y: 5.51))
            rectangle2.addCurve(to: CGPoint(x: 52.64, y: 16.03), controlPoint1: CGPoint(x: 32.46, y: -2.7), controlPoint2: CGPoint(x: 43.61, y: 2.18))
            rectangle2.addLine(to: CGPoint(x: 52.64, y: 16.03))
            rectangle2.addCurve(to: CGPoint(x: 52.06, y: 18.8), controlPoint1: CGPoint(x: 53.24, y: 16.95), controlPoint2: CGPoint(x: 52.98, y: 18.19))
            rectangle2.addCurve(to: CGPoint(x: 51.35, y: 19.08), controlPoint1: CGPoint(x: 51.84, y: 18.94), controlPoint2: CGPoint(x: 51.6, y: 19.03))
            rectangle2.addLine(to: CGPoint(x: 43.31, y: 20.69))
            rectangle2.addLine(to: CGPoint(x: 43.31, y: 20.69))
            rectangle2.addCurve(to: CGPoint(x: 41.16, y: 19.68), controlPoint1: CGPoint(x: 42.45, y: 20.86), controlPoint2: CGPoint(x: 41.58, y: 20.45))
            rectangle2.addCurve(to: CGPoint(x: 23.09, y: 10.93), controlPoint1: CGPoint(x: 36.85, y: 11.77), controlPoint2: CGPoint(x: 30.83, y: 8.85))
            rectangle2.addCurve(to: CGPoint(x: 11.8, y: 27.32), controlPoint1: CGPoint(x: 15.38, y: 13), controlPoint2: CGPoint(x: 11.62, y: 18.47))
            rectangle2.addLine(to: CGPoint(x: 11.8, y: 27.32))
            rectangle2.addCurve(to: CGPoint(x: 10.39, y: 29.28), controlPoint1: CGPoint(x: 11.82, y: 28.22), controlPoint2: CGPoint(x: 11.24, y: 29.02))
            rectangle2.addLine(to: CGPoint(x: 2.6, y: 31.64))
            rectangle2.addLine(to: CGPoint(x: 2.6, y: 31.64))
            rectangle2.addCurve(to: CGPoint(x: 0.11, y: 30.31), controlPoint1: CGPoint(x: 1.55, y: 31.96), controlPoint2: CGPoint(x: 0.43, y: 31.36))
            rectangle2.addCurve(to: CGPoint(x: 0.02, y: 29.79), controlPoint1: CGPoint(x: 0.06, y: 30.14), controlPoint2: CGPoint(x: 0.03, y: 29.97))
            rectangle2.close()
            rectangle2.move(to: CGPoint(x: 0.02, y: 29.79))
            context.saveGState()
            context.translateBy(x: 158.08, y: 144.8)
            context.rotate(by: 368 * CGFloat.pi/180)
            context.translateBy(x: -27.09, y: -16.19)
            rectangle2.usesEvenOddFillRule = true
            UIColor(hue: 0.569, saturation: 0.392, brightness: 0.51, alpha: 1).setFill()
            rectangle2.fill()
            context.restoreGState()
            
            /// Rectangle 2
            let rectangle4 = UIBezierPath()
            rectangle4.move(to: CGPoint(x: 0.02, y: 29.79))
            rectangle4.addCurve(to: CGPoint(x: 19.21, y: 1.41), controlPoint1: CGPoint(x: -0.45, y: 14.97), controlPoint2: CGPoint(x: 5.95, y: 5.51))
            rectangle4.addCurve(to: CGPoint(x: 52.64, y: 16.03), controlPoint1: CGPoint(x: 32.46, y: -2.7), controlPoint2: CGPoint(x: 43.61, y: 2.18))
            rectangle4.addLine(to: CGPoint(x: 52.64, y: 16.03))
            rectangle4.addCurve(to: CGPoint(x: 52.06, y: 18.8), controlPoint1: CGPoint(x: 53.24, y: 16.95), controlPoint2: CGPoint(x: 52.98, y: 18.19))
            rectangle4.addCurve(to: CGPoint(x: 51.35, y: 19.08), controlPoint1: CGPoint(x: 51.84, y: 18.94), controlPoint2: CGPoint(x: 51.6, y: 19.03))
            rectangle4.addLine(to: CGPoint(x: 43.31, y: 20.69))
            rectangle4.addLine(to: CGPoint(x: 43.31, y: 20.69))
            rectangle4.addCurve(to: CGPoint(x: 41.16, y: 19.68), controlPoint1: CGPoint(x: 42.45, y: 20.86), controlPoint2: CGPoint(x: 41.58, y: 20.45))
            rectangle4.addCurve(to: CGPoint(x: 23.09, y: 10.93), controlPoint1: CGPoint(x: 36.85, y: 11.77), controlPoint2: CGPoint(x: 30.83, y: 8.85))
            rectangle4.addCurve(to: CGPoint(x: 11.8, y: 27.32), controlPoint1: CGPoint(x: 15.38, y: 13), controlPoint2: CGPoint(x: 11.62, y: 18.47))
            rectangle4.addLine(to: CGPoint(x: 11.8, y: 27.32))
            rectangle4.addCurve(to: CGPoint(x: 10.39, y: 29.28), controlPoint1: CGPoint(x: 11.82, y: 28.22), controlPoint2: CGPoint(x: 11.24, y: 29.02))
            rectangle4.addLine(to: CGPoint(x: 2.6, y: 31.64))
            rectangle4.addLine(to: CGPoint(x: 2.6, y: 31.64))
            rectangle4.addCurve(to: CGPoint(x: 0.11, y: 30.31), controlPoint1: CGPoint(x: 1.55, y: 31.96), controlPoint2: CGPoint(x: 0.43, y: 31.36))
            rectangle4.addCurve(to: CGPoint(x: 0.02, y: 29.79), controlPoint1: CGPoint(x: 0.06, y: 30.14), controlPoint2: CGPoint(x: 0.03, y: 29.97))
            rectangle4.close()
            rectangle4.move(to: CGPoint(x: 0.02, y: 29.79))
            context.saveGState()
            context.translateBy(x: 234.09, y: 134.19)
            context.rotate(by: 367 * CGFloat.pi/180)
            context.translateBy(x: -27.09, y: -16.19)
            rectangle4.usesEvenOddFillRule = true
            UIColor(hue: 0.569, saturation: 0.392, brightness: 0.51, alpha: 1).setFill()
            rectangle4.fill()
            context.restoreGState()
            
            /// Oval 2
            let oval2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 37, height: 37))
            context.saveGState()
            context.translateBy(x: 112, y: 172)
            UIColor(hue: 0.983, saturation: 0.188, brightness: 1, alpha: 1).setFill()
            oval2.fill()
            context.restoreGState()
            
            /// Oval 2
            let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 37, height: 37))
            context.saveGState()
            context.translateBy(x: 254, y: 144)
            UIColor(hue: 0.983, saturation: 0.188, brightness: 1, alpha: 1).setFill()
            oval5.fill()
            context.restoreGState()
            
            /// Path 5
            let path5 = UIBezierPath()
            path5.move(to: CGPoint(x: 87.89, y: 0))
            path5.addLine(to: CGPoint(x: 7.05, y: 22.93))
            path5.addLine(to: CGPoint(x: 7.05, y: 22.93))
            path5.addCurve(to: CGPoint(x: 4.98, y: 26.63), controlPoint1: CGPoint(x: 5.45, y: 23.38), controlPoint2: CGPoint(x: 4.53, y: 25.04))
            path5.addCurve(to: CGPoint(x: 6.43, y: 28.44), controlPoint1: CGPoint(x: 5.2, y: 27.4), controlPoint2: CGPoint(x: 5.72, y: 28.06))
            path5.addLine(to: CGPoint(x: 111.89, y: 86.2))
            context.saveGState()
            context.translateBy(x: 0.99, y: 202.72)
            path5.lineWidth = 6
            UIColor(hue: 0.569, saturation: 0.392, brightness: 0.51, alpha: 1).setStroke()
            path5.stroke()
            context.restoreGState()
            
            /// Oval 3
            let oval3 = UIBezierPath()
            oval3.move(to: CGPoint(x: 5.68, y: 30))
            oval3.addCurve(to: CGPoint(x: 20.68, y: 15), controlPoint1: CGPoint(x: 17.06, y: 32.7), controlPoint2: CGPoint(x: 20.68, y: 23.28))
            oval3.addCurve(to: CGPoint(x: 5.68, y: 0), controlPoint1: CGPoint(x: 20.68, y: 6.72), controlPoint2: CGPoint(x: 13.97, y: 0))
            oval3.addCurve(to: CGPoint(x: 3.53, y: 15), controlPoint1: CGPoint(x: -2.6, y: 0), controlPoint2: CGPoint(x: 3.53, y: 9.72))
            oval3.addCurve(to: CGPoint(x: 5.68, y: 30), controlPoint1: CGPoint(x: 3.53, y: 20.28), controlPoint2: CGPoint(x: -5.7, y: 27.3))
            oval3.close()
            oval3.move(to: CGPoint(x: 5.68, y: 30))
            context.saveGState()
            context.translateBy(x: 96.87, y: 281)
            oval3.usesEvenOddFillRule = true
            UIColor(hue: 0.569, saturation: 0.392, brightness: 0.51, alpha: 1).setFill()
            oval3.fill()
            context.restoreGState()
            
            /// Path 6
            let path6 = UIBezierPath()
            path6.move(to: CGPoint(x: 0, y: 54.11))
            path6.addLine(to: CGPoint(x: 38.98, y: 79.4))
            path6.addLine(to: CGPoint(x: 38.98, y: 79.4))
            path6.addCurve(to: CGPoint(x: 43.1, y: 78.57), controlPoint1: CGPoint(x: 40.35, y: 80.29), controlPoint2: CGPoint(x: 42.18, y: 79.92))
            path6.addLine(to: CGPoint(x: 96.39, y: 0))
            context.saveGState()
            context.translateBy(x: 306.37, y: 147.03)
            path6.lineWidth = 6
            UIColor(hue: 0.569, saturation: 0.392, brightness: 0.51, alpha: 1).setStroke()
            path6.stroke()
            context.restoreGState()
            
            /// Oval 4
            let oval4 = UIBezierPath()
            oval4.move(to: CGPoint(x: 12.64, y: 38.4))
            oval4.addCurve(to: CGPoint(x: 32.91, y: 19.11), controlPoint1: CGPoint(x: 22.58, y: 38.4), controlPoint2: CGPoint(x: 32.91, y: 29.05))
            oval4.addCurve(to: CGPoint(x: 16.45, y: 1.55), controlPoint1: CGPoint(x: 32.91, y: 9.17), controlPoint2: CGPoint(x: 24.76, y: -4.66))
            oval4.addCurve(to: CGPoint(x: 12.64, y: 19.11), controlPoint1: CGPoint(x: 12.64, y: 4.39), controlPoint2: CGPoint(x: 19.85, y: 16.06))
            oval4.addCurve(to: CGPoint(x: 1.6, y: 16.06), controlPoint1: CGPoint(x: 7.97, y: 21.09), controlPoint2: CGPoint(x: 3.99, y: 11.68))
            oval4.addCurve(to: CGPoint(x: 12.64, y: 38.4), controlPoint1: CGPoint(x: -2.97, y: 24.47), controlPoint2: CGPoint(x: 2.7, y: 38.4))
            oval4.close()
            oval4.move(to: CGPoint(x: 12.64, y: 38.4))
            context.saveGState()
            context.translateBy(x: 390.15, y: 114.89)
            oval4.usesEvenOddFillRule = true
            UIColor(hue: 0.569, saturation: 0.392, brightness: 0.51, alpha: 1).setFill()
            oval4.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfTooth() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 422, height: 377), false, 0)
        ToothStyleKit.drawTooth()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
