//
//  StyleKit.swift
//
//  Created on 8/28/17.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class StyleKit: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawPinkText(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 55, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 55, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 55, y: resizedFrame.height / 55)
        context.translateBy(x: -3087, y: -3356)
        
        /// PinkText
        do {
            context.saveGState()
            context.translateBy(x: 3087, y: 3356)
            
            /// Oval 5
            let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 55, height: 55))
            context.saveGState()
            context.saveGState()
            oval5.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.88, saturation: 0.659, brightness: 1, alpha: 1).cgColor,
                        UIColor(hue: 0.88, saturation: 0.999, brightness: 0.654, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 18.08, y: 9.95),
                end: CGPoint(x: 46.98, y: 50.91),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Chat
            do {
                context.saveGState()
                context.translateBy(x: 15, y: 17)
                
                /// Combined Shape
                let combinedShape = UIBezierPath()
                combinedShape.move(to: CGPoint(x: 2.29, y: 15.16))
                combinedShape.addCurve(to: CGPoint(x: 0.06, y: 20.48), controlPoint1: CGPoint(x: 1.61, y: 17.04), controlPoint2: CGPoint(x: 0.76, y: 19.7))
                combinedShape.addCurve(to: CGPoint(x: 5.79, y: 18.73), controlPoint1: CGPoint(x: -0.36, y: 20.94), controlPoint2: CGPoint(x: 1.55, y: 20.36))
                combinedShape.addCurve(to: CGPoint(x: 12.9, y: 20.77), controlPoint1: CGPoint(x: 7.77, y: 20.02), controlPoint2: CGPoint(x: 10.24, y: 20.77))
                combinedShape.addCurve(to: CGPoint(x: 23.6, y: 10.38), controlPoint1: CGPoint(x: 19.47, y: 20.77), controlPoint2: CGPoint(x: 23.6, y: 16.19))
                combinedShape.addCurve(to: CGPoint(x: 12.31, y: 0.01), controlPoint1: CGPoint(x: 23.6, y: 4.58), controlPoint2: CGPoint(x: 19.08, y: 0.23))
                combinedShape.addCurve(to: CGPoint(x: 0.98, y: 10.38), controlPoint1: CGPoint(x: 5.54, y: -0.21), controlPoint2: CGPoint(x: 0.98, y: 4.58))
                combinedShape.addCurve(to: CGPoint(x: 2.29, y: 15.16), controlPoint1: CGPoint(x: 0.98, y: 12.11), controlPoint2: CGPoint(x: 1.45, y: 13.73))
                combinedShape.close()
                combinedShape.move(to: CGPoint(x: 2.29, y: 15.16))
                context.saveGState()
                context.translateBy(x: 0.36, y: 0.3)
                combinedShape.usesEvenOddFillRule = true
                UIColor.white.setFill()
                combinedShape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawPinkMail(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 55, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 55, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 55, y: resizedFrame.height / 55)
        context.translateBy(x: -3020, y: -3356)
        
        /// PinkMail
        do {
            context.saveGState()
            context.translateBy(x: 3020, y: 3356)
            
            /// Oval 5
            let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 55, height: 55))
            context.saveGState()
            context.saveGState()
            oval5.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.88, saturation: 0.659, brightness: 1, alpha: 1).cgColor,
                        UIColor(hue: 0.88, saturation: 0.999, brightness: 0.654, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 18.08, y: 9.95),
                end: CGPoint(x: 46.98, y: 50.91),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Mail
            do {
                context.saveGState()
                context.translateBy(x: 13, y: 17)
                
                /// Rectangle 17
                let rectangle17 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 30.29, height: 22.23), cornerRadius: 3.88)
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                context.saveGState()
                rectangle17.lineWidth = 4.4
                context.beginPath()
                context.addPath(rectangle17.cgPath)
                context.clip(using: .evenOdd)
                UIColor.white.setStroke()
                rectangle17.stroke()
                context.restoreGState()
                context.restoreGState()
                
                
                /// Group 3
                do {
                    context.saveGState()
                    context.translateBy(x: 0.89, y: 10.22)
                    
                    // Empty.
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawPinkPhone(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 55, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 55, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 55, y: resizedFrame.height / 55)
        context.translateBy(x: -2954, y: -3357)
        
        /// PinkPhone
        do {
            context.saveGState()
            context.translateBy(x: 2954, y: 3357)
            
            /// Oval 5
            let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 55, height: 55))
            context.saveGState()
            context.saveGState()
            oval5.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.88, saturation: 0.659, brightness: 1, alpha: 1).cgColor,
                        UIColor(hue: 0.88, saturation: 0.999, brightness: 0.654, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 18.08, y: 9.95),
                end: CGPoint(x: 46.98, y: 50.91),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 4
            let rectangle4 = UIBezierPath()
            rectangle4.move(to: CGPoint(x: 6.84, y: 0.32))
            rectangle4.addLine(to: CGPoint(x: 10.65, y: 6.76))
            rectangle4.addLine(to: CGPoint(x: 10.65, y: 6.76))
            rectangle4.addCurve(to: CGPoint(x: 10.42, y: 7.67), controlPoint1: CGPoint(x: 10.84, y: 7.08), controlPoint2: CGPoint(x: 10.73, y: 7.48))
            rectangle4.addCurve(to: CGPoint(x: 10.41, y: 7.67), controlPoint1: CGPoint(x: 10.42, y: 7.67), controlPoint2: CGPoint(x: 10.42, y: 7.67))
            rectangle4.addCurve(to: CGPoint(x: 6.94, y: 10.77), controlPoint1: CGPoint(x: 8.16, y: 8.96), controlPoint2: CGPoint(x: 7, y: 10))
            rectangle4.addCurve(to: CGPoint(x: 10.39, y: 16.87), controlPoint1: CGPoint(x: 6.85, y: 12.04), controlPoint2: CGPoint(x: 8.49, y: 14.23))
            rectangle4.addCurve(to: CGPoint(x: 15.26, y: 21.3), controlPoint1: CGPoint(x: 12.29, y: 19.51), controlPoint2: CGPoint(x: 14.1, y: 21.17))
            rectangle4.addCurve(to: CGPoint(x: 19.18, y: 18.65), controlPoint1: CGPoint(x: 15.98, y: 21.38), controlPoint2: CGPoint(x: 17.29, y: 20.5))
            rectangle4.addLine(to: CGPoint(x: 19.18, y: 18.65))
            rectangle4.addCurve(to: CGPoint(x: 20.09, y: 18.65), controlPoint1: CGPoint(x: 19.43, y: 18.4), controlPoint2: CGPoint(x: 19.84, y: 18.4))
            rectangle4.addLine(to: CGPoint(x: 25.46, y: 23.76))
            rectangle4.addLine(to: CGPoint(x: 25.46, y: 23.76))
            rectangle4.addCurve(to: CGPoint(x: 25.5, y: 24.68), controlPoint1: CGPoint(x: 25.72, y: 24.01), controlPoint2: CGPoint(x: 25.74, y: 24.41))
            rectangle4.addCurve(to: CGPoint(x: 18.19, y: 29.15), controlPoint1: CGPoint(x: 22.89, y: 27.65), controlPoint2: CGPoint(x: 20.45, y: 29.14))
            rectangle4.addCurve(to: CGPoint(x: 0, y: 6.8), controlPoint1: CGPoint(x: 12.2, y: 29.16), controlPoint2: CGPoint(x: 0.22, y: 17.06))
            rectangle4.addCurve(to: CGPoint(x: 5.94, y: 0.09), controlPoint1: CGPoint(x: -0.04, y: 4.69), controlPoint2: CGPoint(x: 1.93, y: 2.45))
            rectangle4.addLine(to: CGPoint(x: 5.94, y: 0.09))
            rectangle4.addCurve(to: CGPoint(x: 6.84, y: 0.32), controlPoint1: CGPoint(x: 6.25, y: -0.09), controlPoint2: CGPoint(x: 6.65, y: 0.01))
            rectangle4.close()
            rectangle4.move(to: CGPoint(x: 6.84, y: 0.32))
            context.saveGState()
            context.translateBy(x: 14.48, y: 13.02)
            rectangle4.usesEvenOddFillRule = true
            UIColor.white.setFill()
            rectangle4.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBackButtonPink(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 24)
        context.translateBy(x: -1395, y: -1528)
        
        /// BackButtonPink
        let backButtonPink = UIBezierPath()
        backButtonPink.move(to: CGPoint(x: 27, y: 3.33))
        backButtonPink.addLine(to: CGPoint(x: 27, y: 24.67))
        backButtonPink.addLine(to: CGPoint(x: 27, y: 24.67))
        backButtonPink.addCurve(to: CGPoint(x: 23.67, y: 28), controlPoint1: CGPoint(x: 27, y: 26.51), controlPoint2: CGPoint(x: 25.51, y: 28))
        backButtonPink.addCurve(to: CGPoint(x: 21.93, y: 27.5), controlPoint1: CGPoint(x: 23.06, y: 28), controlPoint2: CGPoint(x: 22.46, y: 27.83))
        backButtonPink.addLine(to: CGPoint(x: 4.6, y: 16.83))
        backButtonPink.addLine(to: CGPoint(x: 4.6, y: 16.83))
        backButtonPink.addCurve(to: CGPoint(x: 3.51, y: 12.26), controlPoint1: CGPoint(x: 3.03, y: 15.87), controlPoint2: CGPoint(x: 2.55, y: 13.82))
        backButtonPink.addCurve(to: CGPoint(x: 4.6, y: 11.17), controlPoint1: CGPoint(x: 3.78, y: 11.81), controlPoint2: CGPoint(x: 4.16, y: 11.44))
        backButtonPink.addLine(to: CGPoint(x: 21.93, y: 0.5))
        backButtonPink.addLine(to: CGPoint(x: 21.93, y: 0.5))
        backButtonPink.addCurve(to: CGPoint(x: 26.51, y: 1.58), controlPoint1: CGPoint(x: 23.5, y: -0.47), controlPoint2: CGPoint(x: 25.54, y: 0.02))
        backButtonPink.addCurve(to: CGPoint(x: 27, y: 3.33), controlPoint1: CGPoint(x: 26.83, y: 2.11), controlPoint2: CGPoint(x: 27, y: 2.71))
        backButtonPink.close()
        backButtonPink.move(to: CGPoint(x: 27, y: 3.33))
        context.saveGState()
        context.translateBy(x: 1409, y: 1541.5)
        context.rotate(by: 630 * CGFloat.pi/180)
        context.translateBy(x: -13.5, y: -14)
        backButtonPink.usesEvenOddFillRule = true
        UIColor(hue: 0.88, saturation: 0.798, brightness: 0.988, alpha: 1).setFill()
        backButtonPink.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawCreatePink(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 108, height: 108), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 108, height: 108), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 108, y: resizedFrame.height / 108)
        context.translateBy(x: -3143, y: -1212)
        
        /// CreatePink
        do {
            context.saveGState()
            context.translateBy(x: 3147, y: 1213)
            
            /// Oval 7
            let oval7 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 100, height: 100))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(oval7.cgPath)
            context.addRect(oval7.bounds.insetBy(dx: -4, dy: -7))
            context.clip(using: .evenOdd)
            context.translateBy(x: -105, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 105, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            oval7.fill()
            context.restoreGState()
            context.saveGState()
            oval7.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 117.03, y: 171.37),
                end: CGPoint(x: 50, y: -11.2),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 35.36, y: 19.64))
            combinedShape.addLine(to: CGPoint(x: 35.36, y: 3.93))
            combinedShape.addCurve(to: CGPoint(x: 31.43, y: 0), controlPoint1: CGPoint(x: 35.36, y: 1.76), controlPoint2: CGPoint(x: 33.6, y: 0))
            combinedShape.addLine(to: CGPoint(x: 31.43, y: 0))
            combinedShape.addLine(to: CGPoint(x: 23.57, y: 0))
            combinedShape.addLine(to: CGPoint(x: 23.57, y: 0))
            combinedShape.addCurve(to: CGPoint(x: 19.64, y: 3.93), controlPoint1: CGPoint(x: 21.4, y: 0), controlPoint2: CGPoint(x: 19.64, y: 1.76))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 3.93))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 19.64))
            combinedShape.addLine(to: CGPoint(x: 3.93, y: 19.64))
            combinedShape.addCurve(to: CGPoint(x: 0, y: 23.57), controlPoint1: CGPoint(x: 1.76, y: 19.64), controlPoint2: CGPoint(x: 0, y: 21.4))
            combinedShape.addLine(to: CGPoint(x: 0, y: 23.57))
            combinedShape.addLine(to: CGPoint(x: 0, y: 31.43))
            combinedShape.addCurve(to: CGPoint(x: 3.93, y: 35.36), controlPoint1: CGPoint(x: 0, y: 33.6), controlPoint2: CGPoint(x: 1.76, y: 35.36))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 35.36))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 51.07))
            combinedShape.addCurve(to: CGPoint(x: 23.57, y: 55), controlPoint1: CGPoint(x: 19.64, y: 53.24), controlPoint2: CGPoint(x: 21.4, y: 55))
            combinedShape.addLine(to: CGPoint(x: 23.57, y: 55))
            combinedShape.addLine(to: CGPoint(x: 31.43, y: 55))
            combinedShape.addCurve(to: CGPoint(x: 35.36, y: 51.07), controlPoint1: CGPoint(x: 33.6, y: 55), controlPoint2: CGPoint(x: 35.36, y: 53.24))
            combinedShape.addLine(to: CGPoint(x: 35.36, y: 35.36))
            combinedShape.addLine(to: CGPoint(x: 51.07, y: 35.36))
            combinedShape.addCurve(to: CGPoint(x: 55, y: 31.43), controlPoint1: CGPoint(x: 53.24, y: 35.36), controlPoint2: CGPoint(x: 55, y: 33.6))
            combinedShape.addLine(to: CGPoint(x: 55, y: 23.57))
            combinedShape.addLine(to: CGPoint(x: 55, y: 23.57))
            combinedShape.addCurve(to: CGPoint(x: 51.07, y: 19.64), controlPoint1: CGPoint(x: 55, y: 21.4), controlPoint2: CGPoint(x: 53.24, y: 19.64))
            combinedShape.addLine(to: CGPoint(x: 35.36, y: 19.64))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 35.36, y: 19.64))
            context.saveGState()
            context.translateBy(x: 23, y: 24)
            combinedShape.usesEvenOddFillRule = true
            context.saveGState()
            combinedShape.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.88, saturation: 0.659, brightness: 1, alpha: 1).cgColor,
                        UIColor(hue: 0.88, saturation: 0.999, brightness: 0.654, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 18.08, y: 9.95),
                end: CGPoint(x: 46.98, y: 50.91),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawProgressPink(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 108, height: 108), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 108, height: 108), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 108, y: resizedFrame.height / 108)
        context.translateBy(x: -2900, y: -1191)
        
        /// ProgressPink
        do {
            context.saveGState()
            context.translateBy(x: 2904, y: 1192)
            
            /// Oval 12
            let oval12 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 100, height: 100))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(oval12.cgPath)
            context.addRect(oval12.bounds.insetBy(dx: -4, dy: -7))
            context.clip(using: .evenOdd)
            context.translateBy(x: -105, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 105, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            oval12.fill()
            context.restoreGState()
            context.saveGState()
            oval12.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 117.03, y: 171.37),
                end: CGPoint(x: 50, y: -11.2),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Group 4
            do {
                context.saveGState()
                context.translateBy(x: 17.92, y: 13.85)
                
                /// Oval
                let oval = UIBezierPath()
                oval.move(to: CGPoint(x: 2.97, y: 18))
                oval.addCurve(to: CGPoint(x: 0, y: 31.47), controlPoint1: CGPoint(x: 1.07, y: 22.08), controlPoint2: CGPoint(x: 0, y: 26.65))
                oval.addCurve(to: CGPoint(x: 30.94, y: 62.94), controlPoint1: CGPoint(x: 0, y: 48.85), controlPoint2: CGPoint(x: 13.85, y: 62.94))
                oval.addLine(to: CGPoint(x: 30.94, y: 62.94))
                oval.addCurve(to: CGPoint(x: 61.89, y: 31.47), controlPoint1: CGPoint(x: 48.03, y: 62.94), controlPoint2: CGPoint(x: 61.89, y: 48.85))
                oval.addCurve(to: CGPoint(x: 30.94, y: 0), controlPoint1: CGPoint(x: 61.89, y: 14.09), controlPoint2: CGPoint(x: 48.03, y: 0))
                context.saveGState()
                context.translateBy(x: 1.13, y: 4.33)
                context.saveGState()
                oval.lineWidth = 3.46
                context.beginPath()
                context.addPath(oval.cgPath)
                context.setLineWidth(oval.lineWidth)
                context.setLineCap(oval.lineCapStyle)
                context.setLineJoin(oval.lineJoinStyle)
                context.setMiterLimit(oval.miterLimit)
                context.replacePathWithStrokedPath()
                context.clip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.88, saturation: 0.659, brightness: 1, alpha: 1).cgColor,
                            UIColor(hue: 0.88, saturation: 0.999, brightness: 0.654, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 20.34, y: 11.39),
                    end: CGPoint(x: 52.86, y: 58.26),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                /// Oval 4
                let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 8.54, height: 8.65))
                context.saveGState()
                context.translateBy(x: 27.17, y: 0)
                UIColor(hue: 0.88, saturation: 0.659, brightness: 1, alpha: 1).setFill()
                oval4.fill()
                context.restoreGState()
                
                /// Oval 4
                let oval16 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 8.54, height: 8.65))
                context.saveGState()
                context.translateBy(x: 0.28, y: 17.31)
                UIColor(hue: 0.88, saturation: 0.659, brightness: 1, alpha: 1).setFill()
                oval16.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 5.95, y: 10.34))
            combinedShape.addCurve(to: CGPoint(x: 4.35, y: 6.15), controlPoint1: CGPoint(x: 4.96, y: 9.24), controlPoint2: CGPoint(x: 4.35, y: 7.77))
            combinedShape.addCurve(to: CGPoint(x: 10.36, y: 0), controlPoint1: CGPoint(x: 4.35, y: 2.76), controlPoint2: CGPoint(x: 7.04, y: 0))
            combinedShape.addCurve(to: CGPoint(x: 16.38, y: 6.15), controlPoint1: CGPoint(x: 13.68, y: 0), controlPoint2: CGPoint(x: 16.38, y: 2.76))
            combinedShape.addCurve(to: CGPoint(x: 14.78, y: 10.33), controlPoint1: CGPoint(x: 16.38, y: 7.77), controlPoint2: CGPoint(x: 15.77, y: 9.23))
            combinedShape.addCurve(to: CGPoint(x: 20.91, y: 26.15), controlPoint1: CGPoint(x: 19.07, y: 12.75), controlPoint2: CGPoint(x: 20.91, y: 18.93))
            combinedShape.addCurve(to: CGPoint(x: 0, y: 26.15), controlPoint1: CGPoint(x: 12.06, y: 26.15), controlPoint2: CGPoint(x: 7.35, y: 26.15))
            combinedShape.addCurve(to: CGPoint(x: 5.95, y: 10.34), controlPoint1: CGPoint(x: 0, y: 18.93), controlPoint2: CGPoint(x: 1.72, y: 12.77))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 5.95, y: 10.34))
            context.saveGState()
            context.translateBy(x: 39.48, y: 35.38)
            combinedShape.usesEvenOddFillRule = true
            context.saveGState()
            combinedShape.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.88, saturation: 0.659, brightness: 1, alpha: 1).cgColor,
                        UIColor(hue: 0.88, saturation: 0.999, brightness: 0.654, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 6.87, y: 4.73),
                end: CGPoint(x: 17.86, y: 24.21),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBackButtonYellow(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 28, y: resizedFrame.height / 24)
        context.translateBy(x: -1284, y: -1524)
        
        /// Rectangle 23
        let rectangle23 = UIBezierPath()
        rectangle23.move(to: CGPoint(x: 27, y: 3.33))
        rectangle23.addLine(to: CGPoint(x: 27, y: 24.67))
        rectangle23.addLine(to: CGPoint(x: 27, y: 24.67))
        rectangle23.addCurve(to: CGPoint(x: 23.67, y: 28), controlPoint1: CGPoint(x: 27, y: 26.51), controlPoint2: CGPoint(x: 25.51, y: 28))
        rectangle23.addCurve(to: CGPoint(x: 21.93, y: 27.5), controlPoint1: CGPoint(x: 23.06, y: 28), controlPoint2: CGPoint(x: 22.46, y: 27.83))
        rectangle23.addLine(to: CGPoint(x: 4.6, y: 16.83))
        rectangle23.addLine(to: CGPoint(x: 4.6, y: 16.83))
        rectangle23.addCurve(to: CGPoint(x: 3.51, y: 12.26), controlPoint1: CGPoint(x: 3.03, y: 15.87), controlPoint2: CGPoint(x: 2.55, y: 13.82))
        rectangle23.addCurve(to: CGPoint(x: 4.6, y: 11.17), controlPoint1: CGPoint(x: 3.78, y: 11.81), controlPoint2: CGPoint(x: 4.16, y: 11.44))
        rectangle23.addLine(to: CGPoint(x: 21.93, y: 0.5))
        rectangle23.addLine(to: CGPoint(x: 21.93, y: 0.5))
        rectangle23.addCurve(to: CGPoint(x: 26.51, y: 1.58), controlPoint1: CGPoint(x: 23.5, y: -0.47), controlPoint2: CGPoint(x: 25.54, y: 0.02))
        rectangle23.addCurve(to: CGPoint(x: 27, y: 3.33), controlPoint1: CGPoint(x: 26.83, y: 2.11), controlPoint2: CGPoint(x: 27, y: 2.71))
        rectangle23.close()
        rectangle23.move(to: CGPoint(x: 27, y: 3.33))
        context.saveGState()
        context.translateBy(x: 1298, y: 1537.5)
        context.rotate(by: 630 * CGFloat.pi/180)
        context.translateBy(x: -13.5, y: -14)
        rectangle23.usesEvenOddFillRule = true
        UIColor(hue: 0.134, saturation: 0.871, brightness: 1, alpha: 1).setFill()
        rectangle23.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBackButtonBlue(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 29, height: 25), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 29, height: 25), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 29, y: resizedFrame.height / 25)
        context.translateBy(x: -1564, y: -1443)
        
        /// BackButtonBlue
        let backButtonBlue = UIBezierPath()
        backButtonBlue.move(to: CGPoint(x: 27, y: 3.33))
        backButtonBlue.addLine(to: CGPoint(x: 27, y: 24.67))
        backButtonBlue.addLine(to: CGPoint(x: 27, y: 24.67))
        backButtonBlue.addCurve(to: CGPoint(x: 23.67, y: 28), controlPoint1: CGPoint(x: 27, y: 26.51), controlPoint2: CGPoint(x: 25.51, y: 28))
        backButtonBlue.addCurve(to: CGPoint(x: 21.93, y: 27.5), controlPoint1: CGPoint(x: 23.06, y: 28), controlPoint2: CGPoint(x: 22.46, y: 27.83))
        backButtonBlue.addLine(to: CGPoint(x: 4.6, y: 16.83))
        backButtonBlue.addLine(to: CGPoint(x: 4.6, y: 16.83))
        backButtonBlue.addCurve(to: CGPoint(x: 3.51, y: 12.26), controlPoint1: CGPoint(x: 3.03, y: 15.87), controlPoint2: CGPoint(x: 2.55, y: 13.82))
        backButtonBlue.addCurve(to: CGPoint(x: 4.6, y: 11.17), controlPoint1: CGPoint(x: 3.78, y: 11.81), controlPoint2: CGPoint(x: 4.16, y: 11.44))
        backButtonBlue.addLine(to: CGPoint(x: 21.93, y: 0.5))
        backButtonBlue.addLine(to: CGPoint(x: 21.93, y: 0.5))
        backButtonBlue.addCurve(to: CGPoint(x: 26.51, y: 1.58), controlPoint1: CGPoint(x: 23.5, y: -0.47), controlPoint2: CGPoint(x: 25.54, y: 0.02))
        backButtonBlue.addCurve(to: CGPoint(x: 27, y: 3.33), controlPoint1: CGPoint(x: 26.83, y: 2.11), controlPoint2: CGPoint(x: 27, y: 2.71))
        backButtonBlue.close()
        backButtonBlue.move(to: CGPoint(x: 27, y: 3.33))
        context.saveGState()
        context.translateBy(x: 1578.5, y: 1457)
        context.rotate(by: 630 * CGFloat.pi/180)
        context.translateBy(x: -13.5, y: -14)
        backButtonBlue.usesEvenOddFillRule = true
        UIColor(hue: 0.588, saturation: 0.814, brightness: 0.612, alpha: 1).setFill()
        backButtonBlue.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBackButtonRed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 29, height: 25), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 29, height: 25), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 29, y: resizedFrame.height / 25)
        context.translateBy(x: -1408, y: -1443)
        
        /// BackButtonRed
        let backButtonRed = UIBezierPath()
        backButtonRed.move(to: CGPoint(x: 27, y: 3.33))
        backButtonRed.addLine(to: CGPoint(x: 27, y: 24.67))
        backButtonRed.addLine(to: CGPoint(x: 27, y: 24.67))
        backButtonRed.addCurve(to: CGPoint(x: 23.67, y: 28), controlPoint1: CGPoint(x: 27, y: 26.51), controlPoint2: CGPoint(x: 25.51, y: 28))
        backButtonRed.addCurve(to: CGPoint(x: 21.93, y: 27.5), controlPoint1: CGPoint(x: 23.06, y: 28), controlPoint2: CGPoint(x: 22.46, y: 27.83))
        backButtonRed.addLine(to: CGPoint(x: 4.6, y: 16.83))
        backButtonRed.addLine(to: CGPoint(x: 4.6, y: 16.83))
        backButtonRed.addCurve(to: CGPoint(x: 3.51, y: 12.26), controlPoint1: CGPoint(x: 3.03, y: 15.87), controlPoint2: CGPoint(x: 2.55, y: 13.82))
        backButtonRed.addCurve(to: CGPoint(x: 4.6, y: 11.17), controlPoint1: CGPoint(x: 3.78, y: 11.81), controlPoint2: CGPoint(x: 4.16, y: 11.44))
        backButtonRed.addLine(to: CGPoint(x: 21.93, y: 0.5))
        backButtonRed.addLine(to: CGPoint(x: 21.93, y: 0.5))
        backButtonRed.addCurve(to: CGPoint(x: 26.51, y: 1.58), controlPoint1: CGPoint(x: 23.5, y: -0.47), controlPoint2: CGPoint(x: 25.54, y: 0.02))
        backButtonRed.addCurve(to: CGPoint(x: 27, y: 3.33), controlPoint1: CGPoint(x: 26.83, y: 2.11), controlPoint2: CGPoint(x: 27, y: 2.71))
        backButtonRed.close()
        backButtonRed.move(to: CGPoint(x: 27, y: 3.33))
        context.saveGState()
        context.translateBy(x: 1422.5, y: 1457)
        context.rotate(by: 630 * CGFloat.pi/180)
        context.translateBy(x: -13.5, y: -14)
        backButtonRed.usesEvenOddFillRule = true
        UIColor(hue: 0.975, saturation: 0.969, brightness: 0.627, alpha: 1).setFill()
        backButtonRed.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBackButtonGreen(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 29, height: 25), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 29, height: 25), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 29, y: resizedFrame.height / 25)
        context.translateBy(x: -1255, y: -1443)
        
        /// BackButtonGreen
        let backButtonGreen = UIBezierPath()
        backButtonGreen.move(to: CGPoint(x: 27, y: 3.33))
        backButtonGreen.addLine(to: CGPoint(x: 27, y: 24.67))
        backButtonGreen.addLine(to: CGPoint(x: 27, y: 24.67))
        backButtonGreen.addCurve(to: CGPoint(x: 23.67, y: 28), controlPoint1: CGPoint(x: 27, y: 26.51), controlPoint2: CGPoint(x: 25.51, y: 28))
        backButtonGreen.addCurve(to: CGPoint(x: 21.93, y: 27.5), controlPoint1: CGPoint(x: 23.06, y: 28), controlPoint2: CGPoint(x: 22.46, y: 27.83))
        backButtonGreen.addLine(to: CGPoint(x: 4.6, y: 16.83))
        backButtonGreen.addLine(to: CGPoint(x: 4.6, y: 16.83))
        backButtonGreen.addCurve(to: CGPoint(x: 3.51, y: 12.26), controlPoint1: CGPoint(x: 3.03, y: 15.87), controlPoint2: CGPoint(x: 2.55, y: 13.82))
        backButtonGreen.addCurve(to: CGPoint(x: 4.6, y: 11.17), controlPoint1: CGPoint(x: 3.78, y: 11.81), controlPoint2: CGPoint(x: 4.16, y: 11.44))
        backButtonGreen.addLine(to: CGPoint(x: 21.93, y: 0.5))
        backButtonGreen.addLine(to: CGPoint(x: 21.93, y: 0.5))
        backButtonGreen.addCurve(to: CGPoint(x: 26.51, y: 1.58), controlPoint1: CGPoint(x: 23.5, y: -0.47), controlPoint2: CGPoint(x: 25.54, y: 0.02))
        backButtonGreen.addCurve(to: CGPoint(x: 27, y: 3.33), controlPoint1: CGPoint(x: 26.83, y: 2.11), controlPoint2: CGPoint(x: 27, y: 2.71))
        backButtonGreen.close()
        backButtonGreen.move(to: CGPoint(x: 27, y: 3.33))
        context.saveGState()
        context.translateBy(x: 1269.5, y: 1457)
        context.rotate(by: 630 * CGFloat.pi/180)
        context.translateBy(x: -13.5, y: -14)
        backButtonGreen.usesEvenOddFillRule = true
        UIColor(hue: 0.399, saturation: 1, brightness: 0.631, alpha: 1).setFill()
        backButtonGreen.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBackButtonOrange(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 29, height: 25), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 29, height: 25), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 29, y: resizedFrame.height / 25)
        context.translateBy(x: -1105, y: -1443)
        
        /// BackButtonOrange
        let backButtonOrange = UIBezierPath()
        backButtonOrange.move(to: CGPoint(x: 27, y: 3.33))
        backButtonOrange.addLine(to: CGPoint(x: 27, y: 24.67))
        backButtonOrange.addLine(to: CGPoint(x: 27, y: 24.67))
        backButtonOrange.addCurve(to: CGPoint(x: 23.67, y: 28), controlPoint1: CGPoint(x: 27, y: 26.51), controlPoint2: CGPoint(x: 25.51, y: 28))
        backButtonOrange.addCurve(to: CGPoint(x: 21.93, y: 27.5), controlPoint1: CGPoint(x: 23.06, y: 28), controlPoint2: CGPoint(x: 22.46, y: 27.83))
        backButtonOrange.addLine(to: CGPoint(x: 4.6, y: 16.83))
        backButtonOrange.addLine(to: CGPoint(x: 4.6, y: 16.83))
        backButtonOrange.addCurve(to: CGPoint(x: 3.51, y: 12.26), controlPoint1: CGPoint(x: 3.03, y: 15.87), controlPoint2: CGPoint(x: 2.55, y: 13.82))
        backButtonOrange.addCurve(to: CGPoint(x: 4.6, y: 11.17), controlPoint1: CGPoint(x: 3.78, y: 11.81), controlPoint2: CGPoint(x: 4.16, y: 11.44))
        backButtonOrange.addLine(to: CGPoint(x: 21.93, y: 0.5))
        backButtonOrange.addLine(to: CGPoint(x: 21.93, y: 0.5))
        backButtonOrange.addCurve(to: CGPoint(x: 26.51, y: 1.58), controlPoint1: CGPoint(x: 23.5, y: -0.47), controlPoint2: CGPoint(x: 25.54, y: 0.02))
        backButtonOrange.addCurve(to: CGPoint(x: 27, y: 3.33), controlPoint1: CGPoint(x: 26.83, y: 2.11), controlPoint2: CGPoint(x: 27, y: 2.71))
        backButtonOrange.close()
        backButtonOrange.move(to: CGPoint(x: 27, y: 3.33))
        context.saveGState()
        context.translateBy(x: 1119.5, y: 1457)
        context.rotate(by: 630 * CGFloat.pi/180)
        context.translateBy(x: -13.5, y: -14)
        backButtonOrange.usesEvenOddFillRule = true
        UIColor(hue: 0.065, saturation: 0.933, brightness: 1, alpha: 1).setFill()
        backButtonOrange.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawBackButtonPurple(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 29, height: 25), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 29, height: 25), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 29, y: resizedFrame.height / 25)
        context.translateBy(x: -951, y: -1443)
        
        /// BackButtonPurple
        let backButtonPurple = UIBezierPath()
        backButtonPurple.move(to: CGPoint(x: 27, y: 3.33))
        backButtonPurple.addLine(to: CGPoint(x: 27, y: 24.67))
        backButtonPurple.addLine(to: CGPoint(x: 27, y: 24.67))
        backButtonPurple.addCurve(to: CGPoint(x: 23.67, y: 28), controlPoint1: CGPoint(x: 27, y: 26.51), controlPoint2: CGPoint(x: 25.51, y: 28))
        backButtonPurple.addCurve(to: CGPoint(x: 21.93, y: 27.5), controlPoint1: CGPoint(x: 23.06, y: 28), controlPoint2: CGPoint(x: 22.46, y: 27.83))
        backButtonPurple.addLine(to: CGPoint(x: 4.6, y: 16.83))
        backButtonPurple.addLine(to: CGPoint(x: 4.6, y: 16.83))
        backButtonPurple.addCurve(to: CGPoint(x: 3.51, y: 12.26), controlPoint1: CGPoint(x: 3.03, y: 15.87), controlPoint2: CGPoint(x: 2.55, y: 13.82))
        backButtonPurple.addCurve(to: CGPoint(x: 4.6, y: 11.17), controlPoint1: CGPoint(x: 3.78, y: 11.81), controlPoint2: CGPoint(x: 4.16, y: 11.44))
        backButtonPurple.addLine(to: CGPoint(x: 21.93, y: 0.5))
        backButtonPurple.addLine(to: CGPoint(x: 21.93, y: 0.5))
        backButtonPurple.addCurve(to: CGPoint(x: 26.51, y: 1.58), controlPoint1: CGPoint(x: 23.5, y: -0.47), controlPoint2: CGPoint(x: 25.54, y: 0.02))
        backButtonPurple.addCurve(to: CGPoint(x: 27, y: 3.33), controlPoint1: CGPoint(x: 26.83, y: 2.11), controlPoint2: CGPoint(x: 27, y: 2.71))
        backButtonPurple.close()
        backButtonPurple.move(to: CGPoint(x: 27, y: 3.33))
        context.saveGState()
        context.translateBy(x: 965.5, y: 1457)
        context.rotate(by: 630 * CGFloat.pi/180)
        context.translateBy(x: -13.5, y: -14)
        backButtonPurple.usesEvenOddFillRule = true
        UIColor(hue: 0.763, saturation: 0.647, brightness: 0.4, alpha: 1).setFill()
        backButtonPurple.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawNoPhoneButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 55, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 55, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 55, y: resizedFrame.height / 55)
        context.translateBy(x: -2723, y: -3358)
        
        /// RedPhone
        do {
            context.saveGState()
            context.translateBy(x: 2723, y: 3358)
            
            /// Oval 5
            let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 55, height: 55))
            context.saveGState()
            context.saveGState()
            oval5.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(white: 0.728, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 27.5, y: 0),
                end: CGPoint(x: 27.5, y: 77.74),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 4
            let rectangle4 = UIBezierPath()
            rectangle4.move(to: CGPoint(x: 6.84, y: 0.32))
            rectangle4.addLine(to: CGPoint(x: 10.65, y: 6.76))
            rectangle4.addLine(to: CGPoint(x: 10.65, y: 6.76))
            rectangle4.addCurve(to: CGPoint(x: 10.42, y: 7.67), controlPoint1: CGPoint(x: 10.84, y: 7.08), controlPoint2: CGPoint(x: 10.73, y: 7.48))
            rectangle4.addCurve(to: CGPoint(x: 10.41, y: 7.67), controlPoint1: CGPoint(x: 10.42, y: 7.67), controlPoint2: CGPoint(x: 10.42, y: 7.67))
            rectangle4.addCurve(to: CGPoint(x: 6.94, y: 10.77), controlPoint1: CGPoint(x: 8.16, y: 8.96), controlPoint2: CGPoint(x: 7, y: 10))
            rectangle4.addCurve(to: CGPoint(x: 10.39, y: 16.87), controlPoint1: CGPoint(x: 6.85, y: 12.04), controlPoint2: CGPoint(x: 8.49, y: 14.23))
            rectangle4.addCurve(to: CGPoint(x: 15.26, y: 21.3), controlPoint1: CGPoint(x: 12.29, y: 19.51), controlPoint2: CGPoint(x: 14.1, y: 21.17))
            rectangle4.addCurve(to: CGPoint(x: 19.18, y: 18.65), controlPoint1: CGPoint(x: 15.98, y: 21.38), controlPoint2: CGPoint(x: 17.29, y: 20.5))
            rectangle4.addLine(to: CGPoint(x: 19.18, y: 18.65))
            rectangle4.addCurve(to: CGPoint(x: 20.09, y: 18.65), controlPoint1: CGPoint(x: 19.43, y: 18.4), controlPoint2: CGPoint(x: 19.84, y: 18.4))
            rectangle4.addLine(to: CGPoint(x: 25.46, y: 23.76))
            rectangle4.addLine(to: CGPoint(x: 25.46, y: 23.76))
            rectangle4.addCurve(to: CGPoint(x: 25.5, y: 24.68), controlPoint1: CGPoint(x: 25.72, y: 24.01), controlPoint2: CGPoint(x: 25.74, y: 24.41))
            rectangle4.addCurve(to: CGPoint(x: 18.19, y: 29.15), controlPoint1: CGPoint(x: 22.89, y: 27.65), controlPoint2: CGPoint(x: 20.45, y: 29.14))
            rectangle4.addCurve(to: CGPoint(x: 0, y: 6.8), controlPoint1: CGPoint(x: 12.2, y: 29.16), controlPoint2: CGPoint(x: 0.22, y: 17.06))
            rectangle4.addCurve(to: CGPoint(x: 5.94, y: 0.09), controlPoint1: CGPoint(x: -0.04, y: 4.69), controlPoint2: CGPoint(x: 1.93, y: 2.45))
            rectangle4.addLine(to: CGPoint(x: 5.94, y: 0.09))
            rectangle4.addCurve(to: CGPoint(x: 6.84, y: 0.32), controlPoint1: CGPoint(x: 6.25, y: -0.09), controlPoint2: CGPoint(x: 6.65, y: 0.01))
            rectangle4.close()
            rectangle4.move(to: CGPoint(x: 6.84, y: 0.32))
            context.saveGState()
            context.translateBy(x: 14.48, y: 13.02)
            rectangle4.usesEvenOddFillRule = true
            UIColor.white.setFill()
            rectangle4.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawNoEmailButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 55, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 55, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 55, y: resizedFrame.height / 55)
        context.translateBy(x: -2794, y: -3357)
        
        /// RedMail
        do {
            context.saveGState()
            context.translateBy(x: 2794, y: 3357)
            
            /// Oval 5
            let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 55, height: 55))
            context.saveGState()
            context.saveGState()
            oval5.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(white: 0.728, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 27.5, y: -5.8),
                end: CGPoint(x: 27.5, y: 78.87),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Mail
            do {
                context.saveGState()
                context.translateBy(x: 13, y: 17)
                
                /// Rectangle 17
                let rectangle17 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 30.29, height: 22.23), cornerRadius: 3.88)
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                context.saveGState()
                rectangle17.lineWidth = 4.4
                context.beginPath()
                context.addPath(rectangle17.cgPath)
                context.clip(using: .evenOdd)
                UIColor.white.setStroke()
                rectangle17.stroke()
                context.restoreGState()
                context.restoreGState()
                
                
                /// Group 3
                do {
                    context.saveGState()
                    context.translateBy(x: 0.89, y: 10.22)
                    
                    // Empty.
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawNoTextButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 55, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 55, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 55, y: resizedFrame.height / 55)
        context.translateBy(x: -2874, y: -3358)
        
        /// RedText
        do {
            context.saveGState()
            context.translateBy(x: 2874, y: 3358)
            
            /// Oval 5
            let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 55, height: 55))
            context.saveGState()
            context.saveGState()
            oval5.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(white: 0.728, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 27.5, y: 0),
                end: CGPoint(x: 27.5, y: 76.61),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Chat
            do {
                context.saveGState()
                context.translateBy(x: 15, y: 16)
                
                /// Combined Shape
                let combinedShape = UIBezierPath()
                combinedShape.move(to: CGPoint(x: 2.29, y: 15.16))
                combinedShape.addCurve(to: CGPoint(x: 0.06, y: 20.48), controlPoint1: CGPoint(x: 1.61, y: 17.04), controlPoint2: CGPoint(x: 0.76, y: 19.7))
                combinedShape.addCurve(to: CGPoint(x: 5.79, y: 18.73), controlPoint1: CGPoint(x: -0.36, y: 20.94), controlPoint2: CGPoint(x: 1.55, y: 20.36))
                combinedShape.addCurve(to: CGPoint(x: 12.9, y: 20.77), controlPoint1: CGPoint(x: 7.77, y: 20.02), controlPoint2: CGPoint(x: 10.24, y: 20.77))
                combinedShape.addCurve(to: CGPoint(x: 23.6, y: 10.38), controlPoint1: CGPoint(x: 19.47, y: 20.77), controlPoint2: CGPoint(x: 23.6, y: 16.19))
                combinedShape.addCurve(to: CGPoint(x: 12.31, y: 0.01), controlPoint1: CGPoint(x: 23.6, y: 4.58), controlPoint2: CGPoint(x: 19.08, y: 0.23))
                combinedShape.addCurve(to: CGPoint(x: 0.98, y: 10.38), controlPoint1: CGPoint(x: 5.54, y: -0.21), controlPoint2: CGPoint(x: 0.98, y: 4.58))
                combinedShape.addCurve(to: CGPoint(x: 2.29, y: 15.16), controlPoint1: CGPoint(x: 0.98, y: 12.11), controlPoint2: CGPoint(x: 1.45, y: 13.73))
                combinedShape.close()
                combinedShape.move(to: CGPoint(x: 2.29, y: 15.16))
                context.saveGState()
                context.translateBy(x: 0.36, y: 0.3)
                combinedShape.usesEvenOddFillRule = true
                UIColor.white.setFill()
                combinedShape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawCompleteClass1ATag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 94, height: 35), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 94, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 94, y: resizedFrame.height / 35)
        context.translateBy(x: -2209, y: -2184)
        
        /// CompleteClass1ATag
        do {
            context.saveGState()
            context.translateBy(x: 2209, y: 2184)
            
            /// YellowClassTag
            let yellowClassTag = UIBezierPath()
            yellowClassTag.move(to: CGPoint(x: 2, y: 0))
            yellowClassTag.addLine(to: CGPoint(x: 93.92, y: 0))
            yellowClassTag.addLine(to: CGPoint(x: 93.92, y: 35))
            yellowClassTag.addLine(to: CGPoint(x: 2, y: 35))
            yellowClassTag.addLine(to: CGPoint(x: 2, y: 35))
            yellowClassTag.addCurve(to: CGPoint(x: 0, y: 33), controlPoint1: CGPoint(x: 0.9, y: 35), controlPoint2: CGPoint(x: 0, y: 34.1))
            yellowClassTag.addCurve(to: CGPoint(x: 0.17, y: 32.19), controlPoint1: CGPoint(x: 0, y: 32.72), controlPoint2: CGPoint(x: 0.06, y: 32.44))
            yellowClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            yellowClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            yellowClassTag.addCurve(to: CGPoint(x: 6.33, y: 16.69), controlPoint1: CGPoint(x: 6.56, y: 17.79), controlPoint2: CGPoint(x: 6.56, y: 17.21))
            yellowClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            yellowClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            yellowClassTag.addCurve(to: CGPoint(x: 1.19, y: 0.17), controlPoint1: CGPoint(x: -0.28, y: 1.8), controlPoint2: CGPoint(x: 0.18, y: 0.62))
            yellowClassTag.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 1.44, y: 0.06), controlPoint2: CGPoint(x: 1.72, y: 0))
            yellowClassTag.close()
            yellowClassTag.move(to: CGPoint(x: 2, y: 0))
            context.saveGState()
            context.translateBy(x: -0, y: 0)
            yellowClassTag.usesEvenOddFillRule = true
            context.saveGState()
            yellowClassTag.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 80.03, y: 60.21),
                end: CGPoint(x: 80.03, y: -14.67),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 30
            let rectangle30 = UIBezierPath()
            rectangle30.move(to: CGPoint.zero)
            rectangle30.addLine(to: CGPoint(x: 14.12, y: 0))
            rectangle30.addCurve(to: CGPoint(x: 15, y: 17.5), controlPoint1: CGPoint(x: 14.71, y: 5.83), controlPoint2: CGPoint(x: 15, y: 11.67))
            rectangle30.addCurve(to: CGPoint(x: 14.12, y: 35), controlPoint1: CGPoint(x: 15, y: 23.33), controlPoint2: CGPoint(x: 14.71, y: 29.17))
            rectangle30.addLine(to: CGPoint(x: 0, y: 35))
            rectangle30.addCurve(to: CGPoint(x: 0.88, y: 17.5), controlPoint1: CGPoint(x: 0.59, y: 29.17), controlPoint2: CGPoint(x: 0.88, y: 23.33))
            rectangle30.addCurve(to: CGPoint.zero, controlPoint1: CGPoint(x: 0.88, y: 11.67), controlPoint2: CGPoint(x: 0.59, y: 5.83))
            rectangle30.close()
            rectangle30.move(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 75, y: 0)
            rectangle30.usesEvenOddFillRule = true
            context.saveGState()
            rectangle30.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.763, saturation: 0.63, brightness: 0.616, alpha: 1).cgColor,
                        UIColor(hue: 0.728, saturation: 0.565, brightness: 1, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 7.5, y: 35),
                end: CGPoint(x: 7.5, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// 1A
            let _1A = NSMutableAttributedString(string: "1A")
            _1A.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "ArialRoundedMTBold", size: 8)!, range: NSRange(location: 0, length: _1A.length))
            _1A.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor(hue: 0.89, saturation: 0, brightness: 1, alpha: 1), range: NSRange(location: 0, length: _1A.length))
            _1A.addAttribute(NSAttributedStringKey.kern, value: -0.19, range: NSRange(location: 0, length: _1A.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _1A.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _1A.length))
            }
            context.saveGState()
            _1A.draw(in: CGRect(x: 77, y: 13, width: 11.73, height: 11))
            context.restoreGState()
            
            /// Complete
            let complete = NSMutableAttributedString(string: "Complete")
            complete.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "ArialRoundedMTBold", size: 12)!, range: NSRange(location: 0, length: complete.length))
            complete.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor(white: 0.184, alpha: 1), range: NSRange(location: 0, length: complete.length))
            complete.addAttribute(NSAttributedStringKey.kern, value: -0.21, range: NSRange(location: 0, length: complete.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                complete.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: complete.length))
            }
            context.saveGState()
            complete.draw(in: CGRect(x: 4, y: 11, width: 73.27, height: 16))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawCompleteClass5Tag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 94, height: 35), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 94, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 94, y: resizedFrame.height / 35)
        context.translateBy(x: -2208, y: -2139)
        
        /// CompleteClass5Tag
        do {
            context.saveGState()
            context.translateBy(x: 2208, y: 2139)
            
            /// YellowClassTag
            let yellowClassTag = UIBezierPath()
            yellowClassTag.move(to: CGPoint(x: 2, y: 0))
            yellowClassTag.addLine(to: CGPoint(x: 93.92, y: 0))
            yellowClassTag.addLine(to: CGPoint(x: 93.92, y: 35))
            yellowClassTag.addLine(to: CGPoint(x: 2, y: 35))
            yellowClassTag.addLine(to: CGPoint(x: 2, y: 35))
            yellowClassTag.addCurve(to: CGPoint(x: 0, y: 33), controlPoint1: CGPoint(x: 0.9, y: 35), controlPoint2: CGPoint(x: 0, y: 34.1))
            yellowClassTag.addCurve(to: CGPoint(x: 0.17, y: 32.19), controlPoint1: CGPoint(x: 0, y: 32.72), controlPoint2: CGPoint(x: 0.06, y: 32.44))
            yellowClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            yellowClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            yellowClassTag.addCurve(to: CGPoint(x: 6.33, y: 16.69), controlPoint1: CGPoint(x: 6.56, y: 17.79), controlPoint2: CGPoint(x: 6.56, y: 17.21))
            yellowClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            yellowClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            yellowClassTag.addCurve(to: CGPoint(x: 1.19, y: 0.17), controlPoint1: CGPoint(x: -0.28, y: 1.8), controlPoint2: CGPoint(x: 0.18, y: 0.62))
            yellowClassTag.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 1.44, y: 0.06), controlPoint2: CGPoint(x: 1.72, y: 0))
            yellowClassTag.close()
            yellowClassTag.move(to: CGPoint(x: 2, y: 0))
            context.saveGState()
            context.translateBy(x: -0, y: 0)
            yellowClassTag.usesEvenOddFillRule = true
            context.saveGState()
            yellowClassTag.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 80.03, y: 60.21),
                end: CGPoint(x: 80.03, y: -14.67),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 30
            let rectangle30 = UIBezierPath()
            rectangle30.move(to: CGPoint.zero)
            rectangle30.addLine(to: CGPoint(x: 14.12, y: 0))
            rectangle30.addCurve(to: CGPoint(x: 15, y: 17.5), controlPoint1: CGPoint(x: 14.71, y: 5.83), controlPoint2: CGPoint(x: 15, y: 11.67))
            rectangle30.addCurve(to: CGPoint(x: 14.12, y: 35), controlPoint1: CGPoint(x: 15, y: 23.33), controlPoint2: CGPoint(x: 14.71, y: 29.17))
            rectangle30.addLine(to: CGPoint(x: 0, y: 35))
            rectangle30.addCurve(to: CGPoint(x: 0.88, y: 17.5), controlPoint1: CGPoint(x: 0.59, y: 29.17), controlPoint2: CGPoint(x: 0.88, y: 23.33))
            rectangle30.addCurve(to: CGPoint.zero, controlPoint1: CGPoint(x: 0.88, y: 11.67), controlPoint2: CGPoint(x: 0.59, y: 5.83))
            rectangle30.close()
            rectangle30.move(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 75, y: 0)
            rectangle30.usesEvenOddFillRule = true
            context.saveGState()
            rectangle30.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.116, saturation: 1, brightness: 1, alpha: 1).cgColor,
                        UIColor(hue: 0.159, saturation: 0.742, brightness: 1, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 7.5, y: 35),
                end: CGPoint(x: 7.5, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// 5
            let _5 = NSMutableAttributedString(string: "5")
            _5.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "ArialRoundedMTBold", size: 8)!, range: NSRange(location: 0, length: _5.length))
            _5.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor(white: 0.184, alpha: 1), range: NSRange(location: 0, length: _5.length))
            _5.addAttribute(NSAttributedStringKey.kern, value: -0.19, range: NSRange(location: 0, length: _5.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _5.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _5.length))
            }
            context.saveGState()
            _5.draw(in: CGRect(x: 77, y: 13, width: 11.73, height: 11))
            context.restoreGState()
            
            /// Complete
            let complete = NSMutableAttributedString(string: "Complete")
            complete.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "ArialRoundedMTBold", size: 12)!, range: NSRange(location: 0, length: complete.length))
            complete.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor(white: 0.184, alpha: 1), range: NSRange(location: 0, length: complete.length))
            complete.addAttribute(NSAttributedStringKey.kern, value: -0.21, range: NSRange(location: 0, length: complete.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                complete.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: complete.length))
            }
            context.saveGState()
            complete.draw(in: CGRect(x: 5, y: 11, width: 73.27, height: 16))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawCompleteClass2Tag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 94, height: 35), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 94, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 94, y: resizedFrame.height / 35)
        context.translateBy(x: -2208, y: -2094)
        
        /// CompleteClass2Tag
        do {
            context.saveGState()
            context.translateBy(x: 2208, y: 2094)
            
            /// YellowClassTag
            let yellowClassTag = UIBezierPath()
            yellowClassTag.move(to: CGPoint(x: 2, y: 0))
            yellowClassTag.addLine(to: CGPoint(x: 93.92, y: 0))
            yellowClassTag.addLine(to: CGPoint(x: 93.92, y: 35))
            yellowClassTag.addLine(to: CGPoint(x: 2, y: 35))
            yellowClassTag.addLine(to: CGPoint(x: 2, y: 35))
            yellowClassTag.addCurve(to: CGPoint(x: 0, y: 33), controlPoint1: CGPoint(x: 0.9, y: 35), controlPoint2: CGPoint(x: 0, y: 34.1))
            yellowClassTag.addCurve(to: CGPoint(x: 0.17, y: 32.19), controlPoint1: CGPoint(x: 0, y: 32.72), controlPoint2: CGPoint(x: 0.06, y: 32.44))
            yellowClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            yellowClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            yellowClassTag.addCurve(to: CGPoint(x: 6.33, y: 16.69), controlPoint1: CGPoint(x: 6.56, y: 17.79), controlPoint2: CGPoint(x: 6.56, y: 17.21))
            yellowClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            yellowClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            yellowClassTag.addCurve(to: CGPoint(x: 1.19, y: 0.17), controlPoint1: CGPoint(x: -0.28, y: 1.8), controlPoint2: CGPoint(x: 0.18, y: 0.62))
            yellowClassTag.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 1.44, y: 0.06), controlPoint2: CGPoint(x: 1.72, y: 0))
            yellowClassTag.close()
            yellowClassTag.move(to: CGPoint(x: 2, y: 0))
            context.saveGState()
            context.translateBy(x: -0, y: 0)
            yellowClassTag.usesEvenOddFillRule = true
            context.saveGState()
            yellowClassTag.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 80.03, y: 60.21),
                end: CGPoint(x: 80.03, y: -14.67),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 30
            let rectangle30 = UIBezierPath()
            rectangle30.move(to: CGPoint.zero)
            rectangle30.addLine(to: CGPoint(x: 14.12, y: 0))
            rectangle30.addCurve(to: CGPoint(x: 15, y: 17.5), controlPoint1: CGPoint(x: 14.71, y: 5.83), controlPoint2: CGPoint(x: 15, y: 11.67))
            rectangle30.addCurve(to: CGPoint(x: 14.12, y: 35), controlPoint1: CGPoint(x: 15, y: 23.33), controlPoint2: CGPoint(x: 14.71, y: 29.17))
            rectangle30.addLine(to: CGPoint(x: 0, y: 35))
            rectangle30.addCurve(to: CGPoint(x: 0.88, y: 17.5), controlPoint1: CGPoint(x: 0.59, y: 29.17), controlPoint2: CGPoint(x: 0.88, y: 23.33))
            rectangle30.addCurve(to: CGPoint.zero, controlPoint1: CGPoint(x: 0.88, y: 11.67), controlPoint2: CGPoint(x: 0.59, y: 5.83))
            rectangle30.close()
            rectangle30.move(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 75, y: 0)
            rectangle30.usesEvenOddFillRule = true
            context.saveGState()
            rectangle30.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.399, saturation: 1, brightness: 0.63, alpha: 1).cgColor,
                        UIColor(hue: 0.408, saturation: 0.975, brightness: 0.864, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 7.5, y: 35),
                end: CGPoint(x: 7.5, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// 2
            let _2 = NSMutableAttributedString(string: "2")
            _2.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "ArialRoundedMTBold", size: 8)!, range: NSRange(location: 0, length: _2.length))
            _2.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor(hue: 0.89, saturation: 0, brightness: 1, alpha: 1), range: NSRange(location: 0, length: _2.length))
            _2.addAttribute(NSAttributedStringKey.kern, value: -0.19, range: NSRange(location: 0, length: _2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _2.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _2.length))
            }
            context.saveGState()
            _2.draw(in: CGRect(x: 77, y: 13, width: 11.73, height: 11))
            context.restoreGState()
            
            /// Complete
            let complete = NSMutableAttributedString(string: "Complete")
            complete.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "ArialRoundedMTBold", size: 12)!, range: NSRange(location: 0, length: complete.length))
            complete.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor(white: 0.184, alpha: 1), range: NSRange(location: 0, length: complete.length))
            complete.addAttribute(NSAttributedStringKey.kern, value: -0.21, range: NSRange(location: 0, length: complete.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                complete.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: complete.length))
            }
            context.saveGState()
            complete.draw(in: CGRect(x: 5, y: 11, width: 73.27, height: 16))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawCompleteClass3Tag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 94, height: 35), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 94, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 94, y: resizedFrame.height / 35)
        context.translateBy(x: -2208, y: -2049)
        
        /// CompleteClass3Tag
        do {
            context.saveGState()
            context.translateBy(x: 2208, y: 2049)
            
            /// YellowClassTag
            let yellowClassTag = UIBezierPath()
            yellowClassTag.move(to: CGPoint(x: 2, y: 0))
            yellowClassTag.addLine(to: CGPoint(x: 93.92, y: 0))
            yellowClassTag.addLine(to: CGPoint(x: 93.92, y: 35))
            yellowClassTag.addLine(to: CGPoint(x: 2, y: 35))
            yellowClassTag.addLine(to: CGPoint(x: 2, y: 35))
            yellowClassTag.addCurve(to: CGPoint(x: 0, y: 33), controlPoint1: CGPoint(x: 0.9, y: 35), controlPoint2: CGPoint(x: 0, y: 34.1))
            yellowClassTag.addCurve(to: CGPoint(x: 0.17, y: 32.19), controlPoint1: CGPoint(x: 0, y: 32.72), controlPoint2: CGPoint(x: 0.06, y: 32.44))
            yellowClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            yellowClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            yellowClassTag.addCurve(to: CGPoint(x: 6.33, y: 16.69), controlPoint1: CGPoint(x: 6.56, y: 17.79), controlPoint2: CGPoint(x: 6.56, y: 17.21))
            yellowClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            yellowClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            yellowClassTag.addCurve(to: CGPoint(x: 1.19, y: 0.17), controlPoint1: CGPoint(x: -0.28, y: 1.8), controlPoint2: CGPoint(x: 0.18, y: 0.62))
            yellowClassTag.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 1.44, y: 0.06), controlPoint2: CGPoint(x: 1.72, y: 0))
            yellowClassTag.close()
            yellowClassTag.move(to: CGPoint(x: 2, y: 0))
            context.saveGState()
            context.translateBy(x: -0, y: 0)
            yellowClassTag.usesEvenOddFillRule = true
            context.saveGState()
            yellowClassTag.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 80.03, y: 60.21),
                end: CGPoint(x: 80.03, y: -14.67),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 30
            let rectangle30 = UIBezierPath()
            rectangle30.move(to: CGPoint.zero)
            rectangle30.addLine(to: CGPoint(x: 14.12, y: 0))
            rectangle30.addCurve(to: CGPoint(x: 15, y: 17.5), controlPoint1: CGPoint(x: 14.71, y: 5.83), controlPoint2: CGPoint(x: 15, y: 11.67))
            rectangle30.addCurve(to: CGPoint(x: 14.12, y: 35), controlPoint1: CGPoint(x: 15, y: 23.33), controlPoint2: CGPoint(x: 14.71, y: 29.17))
            rectangle30.addLine(to: CGPoint(x: 0, y: 35))
            rectangle30.addCurve(to: CGPoint(x: 0.88, y: 17.5), controlPoint1: CGPoint(x: 0.59, y: 29.17), controlPoint2: CGPoint(x: 0.88, y: 23.33))
            rectangle30.addCurve(to: CGPoint.zero, controlPoint1: CGPoint(x: 0.88, y: 11.67), controlPoint2: CGPoint(x: 0.59, y: 5.83))
            rectangle30.close()
            rectangle30.move(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 75, y: 0)
            rectangle30.usesEvenOddFillRule = true
            context.saveGState()
            rectangle30.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.59, saturation: 0.815, brightness: 0.608, alpha: 1).cgColor,
                        UIColor(hue: 0.527, saturation: 0.893, brightness: 0.846, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 7.5, y: 35),
                end: CGPoint(x: 7.5, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Complete
            let complete = NSMutableAttributedString(string: "Complete")
            complete.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "ArialRoundedMTBold", size: 12)!, range: NSRange(location: 0, length: complete.length))
            complete.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor(white: 0.184, alpha: 1), range: NSRange(location: 0, length: complete.length))
            complete.addAttribute(NSAttributedStringKey.kern, value: -0.21, range: NSRange(location: 0, length: complete.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                complete.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: complete.length))
            }
            context.saveGState()
            complete.draw(in: CGRect(x: 5, y: 11, width: 73.27, height: 16))
            context.restoreGState()
            
            /// 3
            let _3 = NSMutableAttributedString(string: "3")
            _3.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "ArialRoundedMTBold", size: 8)!, range: NSRange(location: 0, length: _3.length))
            _3.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor(hue: 0.89, saturation: 0, brightness: 1, alpha: 1), range: NSRange(location: 0, length: _3.length))
            _3.addAttribute(NSAttributedStringKey.kern, value: -0.19, range: NSRange(location: 0, length: _3.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _3.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _3.length))
            }
            context.saveGState()
            _3.draw(in: CGRect(x: 77, y: 13, width: 11.73, height: 11))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawCompleteClass4Tag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 94, height: 35), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 94, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 94, y: resizedFrame.height / 35)
        context.translateBy(x: -2208, y: -2003)
        
        /// CompleteClass4Tag
        do {
            context.saveGState()
            context.translateBy(x: 2208, y: 2003)
            
            /// YellowClassTag
            let yellowClassTag = UIBezierPath()
            yellowClassTag.move(to: CGPoint(x: 2, y: 0))
            yellowClassTag.addLine(to: CGPoint(x: 93.92, y: 0))
            yellowClassTag.addLine(to: CGPoint(x: 93.92, y: 35))
            yellowClassTag.addLine(to: CGPoint(x: 2, y: 35))
            yellowClassTag.addLine(to: CGPoint(x: 2, y: 35))
            yellowClassTag.addCurve(to: CGPoint(x: 0, y: 33), controlPoint1: CGPoint(x: 0.9, y: 35), controlPoint2: CGPoint(x: 0, y: 34.1))
            yellowClassTag.addCurve(to: CGPoint(x: 0.17, y: 32.19), controlPoint1: CGPoint(x: 0, y: 32.72), controlPoint2: CGPoint(x: 0.06, y: 32.44))
            yellowClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            yellowClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            yellowClassTag.addCurve(to: CGPoint(x: 6.33, y: 16.69), controlPoint1: CGPoint(x: 6.56, y: 17.79), controlPoint2: CGPoint(x: 6.56, y: 17.21))
            yellowClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            yellowClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            yellowClassTag.addCurve(to: CGPoint(x: 1.19, y: 0.17), controlPoint1: CGPoint(x: -0.28, y: 1.8), controlPoint2: CGPoint(x: 0.18, y: 0.62))
            yellowClassTag.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 1.44, y: 0.06), controlPoint2: CGPoint(x: 1.72, y: 0))
            yellowClassTag.close()
            yellowClassTag.move(to: CGPoint(x: 2, y: 0))
            context.saveGState()
            context.translateBy(x: -0, y: 0)
            yellowClassTag.usesEvenOddFillRule = true
            context.saveGState()
            yellowClassTag.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 80.03, y: 60.21),
                end: CGPoint(x: 80.03, y: -14.67),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 30
            let rectangle30 = UIBezierPath()
            rectangle30.move(to: CGPoint.zero)
            rectangle30.addLine(to: CGPoint(x: 14.12, y: 0))
            rectangle30.addCurve(to: CGPoint(x: 15, y: 17.5), controlPoint1: CGPoint(x: 14.71, y: 5.83), controlPoint2: CGPoint(x: 15, y: 11.67))
            rectangle30.addCurve(to: CGPoint(x: 14.12, y: 35), controlPoint1: CGPoint(x: 15, y: 23.33), controlPoint2: CGPoint(x: 14.71, y: 29.17))
            rectangle30.addLine(to: CGPoint(x: 0, y: 35))
            rectangle30.addCurve(to: CGPoint(x: 0.88, y: 17.5), controlPoint1: CGPoint(x: 0.59, y: 29.17), controlPoint2: CGPoint(x: 0.88, y: 23.33))
            rectangle30.addCurve(to: CGPoint.zero, controlPoint1: CGPoint(x: 0.88, y: 11.67), controlPoint2: CGPoint(x: 0.59, y: 5.83))
            rectangle30.close()
            rectangle30.move(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 75, y: 0)
            rectangle30.usesEvenOddFillRule = true
            context.saveGState()
            rectangle30.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.985, saturation: 0.67, brightness: 0.961, alpha: 1).cgColor,
                        UIColor(hue: 0.975, saturation: 0.975, brightness: 0.624, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 7.5, y: 0),
                end: CGPoint(x: 7.5, y: 35),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Complete
            let complete = NSMutableAttributedString(string: "Complete")
            complete.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "ArialRoundedMTBold", size: 12)!, range: NSRange(location: 0, length: complete.length))
            complete.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor(white: 0.184, alpha: 1), range: NSRange(location: 0, length: complete.length))
            complete.addAttribute(NSAttributedStringKey.kern, value: -0.21, range: NSRange(location: 0, length: complete.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                complete.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: complete.length))
            }
            context.saveGState()
            complete.draw(in: CGRect(x: 5, y: 11, width: 73.27, height: 16))
            context.restoreGState()
            
            /// 4
            let _4 = NSMutableAttributedString(string: "4")
            _4.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "ArialRoundedMTBold", size: 8)!, range: NSRange(location: 0, length: _4.length))
            _4.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor(hue: 0.89, saturation: 0, brightness: 1, alpha: 1), range: NSRange(location: 0, length: _4.length))
            _4.addAttribute(NSAttributedStringKey.kern, value: -0.19, range: NSRange(location: 0, length: _4.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _4.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _4.length))
            }
            context.saveGState()
            _4.draw(in: CGRect(x: 77, y: 13, width: 11.73, height: 11))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawCompleteClass1BTag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 94, height: 35), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 94, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 94, y: resizedFrame.height / 35)
        context.translateBy(x: -2207, y: -1957)
        
        /// CompleteClass1BTag
        do {
            context.saveGState()
            context.translateBy(x: 2207, y: 1957)
            
            /// YellowClassTag
            let yellowClassTag = UIBezierPath()
            yellowClassTag.move(to: CGPoint(x: 2, y: 0))
            yellowClassTag.addLine(to: CGPoint(x: 93.92, y: 0))
            yellowClassTag.addLine(to: CGPoint(x: 93.92, y: 35))
            yellowClassTag.addLine(to: CGPoint(x: 2, y: 35))
            yellowClassTag.addLine(to: CGPoint(x: 2, y: 35))
            yellowClassTag.addCurve(to: CGPoint(x: 0, y: 33), controlPoint1: CGPoint(x: 0.9, y: 35), controlPoint2: CGPoint(x: 0, y: 34.1))
            yellowClassTag.addCurve(to: CGPoint(x: 0.17, y: 32.19), controlPoint1: CGPoint(x: 0, y: 32.72), controlPoint2: CGPoint(x: 0.06, y: 32.44))
            yellowClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            yellowClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            yellowClassTag.addCurve(to: CGPoint(x: 6.33, y: 16.69), controlPoint1: CGPoint(x: 6.56, y: 17.79), controlPoint2: CGPoint(x: 6.56, y: 17.21))
            yellowClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            yellowClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            yellowClassTag.addCurve(to: CGPoint(x: 1.19, y: 0.17), controlPoint1: CGPoint(x: -0.28, y: 1.8), controlPoint2: CGPoint(x: 0.18, y: 0.62))
            yellowClassTag.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 1.44, y: 0.06), controlPoint2: CGPoint(x: 1.72, y: 0))
            yellowClassTag.close()
            yellowClassTag.move(to: CGPoint(x: 2, y: 0))
            context.saveGState()
            context.translateBy(x: -0, y: 0)
            yellowClassTag.usesEvenOddFillRule = true
            context.saveGState()
            yellowClassTag.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 80.03, y: 60.21),
                end: CGPoint(x: 80.03, y: -14.67),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 30
            let rectangle30 = UIBezierPath()
            rectangle30.move(to: CGPoint.zero)
            rectangle30.addLine(to: CGPoint(x: 14.12, y: 0))
            rectangle30.addCurve(to: CGPoint(x: 15, y: 17.5), controlPoint1: CGPoint(x: 14.71, y: 5.83), controlPoint2: CGPoint(x: 15, y: 11.67))
            rectangle30.addCurve(to: CGPoint(x: 14.12, y: 35), controlPoint1: CGPoint(x: 15, y: 23.33), controlPoint2: CGPoint(x: 14.71, y: 29.17))
            rectangle30.addLine(to: CGPoint(x: 0, y: 35))
            rectangle30.addCurve(to: CGPoint(x: 0.88, y: 17.5), controlPoint1: CGPoint(x: 0.59, y: 29.17), controlPoint2: CGPoint(x: 0.88, y: 23.33))
            rectangle30.addCurve(to: CGPoint.zero, controlPoint1: CGPoint(x: 0.88, y: 11.67), controlPoint2: CGPoint(x: 0.59, y: 5.83))
            rectangle30.close()
            rectangle30.move(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 75, y: 0)
            rectangle30.usesEvenOddFillRule = true
            context.saveGState()
            rectangle30.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.065, saturation: 0.935, brightness: 1, alpha: 1).cgColor,
                        UIColor(hue: 0.113, saturation: 0.866, brightness: 0.965, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 7.5, y: 35),
                end: CGPoint(x: 7.5, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// 1B
            let _1B = NSMutableAttributedString(string: "1B")
            _1B.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "ArialRoundedMTBold", size: 8)!, range: NSRange(location: 0, length: _1B.length))
            _1B.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor(hue: 0.89, saturation: 0, brightness: 1, alpha: 1), range: NSRange(location: 0, length: _1B.length))
            _1B.addAttribute(NSAttributedStringKey.kern, value: -0.19, range: NSRange(location: 0, length: _1B.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                _1B.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _1B.length))
            }
            context.saveGState()
            _1B.draw(in: CGRect(x: 77, y: 13, width: 11.73, height: 11))
            context.restoreGState()
            
            /// Complete
            let complete = NSMutableAttributedString(string: "Complete")
            complete.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "ArialRoundedMTBold", size: 12)!, range: NSRange(location: 0, length: complete.length))
            complete.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor(white: 0.184, alpha: 1), range: NSRange(location: 0, length: complete.length))
            complete.addAttribute(NSAttributedStringKey.kern, value: -0.21, range: NSRange(location: 0, length: complete.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                complete.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: complete.length))
            }
            context.saveGState()
            complete.draw(in: CGRect(x: 5, y: 11, width: 73.27, height: 16))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawRequirementBackgroundDefault(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 314, height: 374), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 314, height: 374), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 314, y: resizedFrame.height / 374)
        context.translateBy(x: -33, y: -990)
        
        /// RequirementBackgroundDefault
        do {
            context.saveGState()
            context.translateBy(x: 39, y: 992)
            
            /// Rectangle
            let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 300, height: 360), cornerRadius: 30)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.addRect(rectangle.bounds.insetBy(dx: -8, dy: -12))
            context.clip(using: .evenOdd)
            context.translateBy(x: -309, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 310, y: 5)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 7 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            rectangle.fill()
            context.restoreGState()
            context.saveGState()
            rectangle.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 438.03, y: 988.3),
                end: CGPoint(x: 213.96, y: -74.33),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 9
            let rectangle9 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 128, height: 158), cornerRadius: 20)
            context.saveGState()
            context.translateBy(x: 84, y: 110)
            UIColor(white: 1, alpha: 0.3).setFill()
            rectangle9.fill()
            context.restoreGState()
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 20.46, y: 1.12))
            combinedShape.addLine(to: CGPoint(x: 21.32, y: 1.95))
            combinedShape.addCurve(to: CGPoint(x: 21.42, y: 7.6), controlPoint1: CGPoint(x: 22.91, y: 3.48), controlPoint2: CGPoint(x: 22.95, y: 6.02))
            combinedShape.addCurve(to: CGPoint(x: 21.31, y: 7.71), controlPoint1: CGPoint(x: 21.38, y: 7.64), controlPoint2: CGPoint(x: 21.34, y: 7.68))
            combinedShape.addLine(to: CGPoint(x: 10.56, y: 18.01))
            combinedShape.addLine(to: CGPoint(x: 10.56, y: 18.01))
            combinedShape.addCurve(to: CGPoint(x: 7.78, y: 18), controlPoint1: CGPoint(x: 9.79, y: 18.76), controlPoint2: CGPoint(x: 8.56, y: 18.75))
            combinedShape.addLine(to: CGPoint(x: 4.46, y: 14.77))
            combinedShape.addCurve(to: CGPoint(x: 4.42, y: 11.94), controlPoint1: CGPoint(x: 3.67, y: 14), controlPoint2: CGPoint(x: 3.65, y: 12.73))
            combinedShape.addLine(to: CGPoint(x: 14.81, y: 1.22))
            combinedShape.addLine(to: CGPoint(x: 14.81, y: 1.22))
            combinedShape.addCurve(to: CGPoint(x: 20.46, y: 1.12), controlPoint1: CGPoint(x: 16.34, y: -0.37), controlPoint2: CGPoint(x: 18.87, y: -0.41))
            combinedShape.addLine(to: CGPoint(x: 20.46, y: 1.12))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 3.27, y: 14.98))
            combinedShape.addLine(to: CGPoint(x: 7.29, y: 19.02))
            combinedShape.addCurve(to: CGPoint(x: 7.28, y: 20.44), controlPoint1: CGPoint(x: 7.68, y: 19.42), controlPoint2: CGPoint(x: 7.68, y: 20.05))
            combinedShape.addCurve(to: CGPoint(x: 6.82, y: 20.7), controlPoint1: CGPoint(x: 7.16, y: 20.57), controlPoint2: CGPoint(x: 7, y: 20.66))
            combinedShape.addLine(to: CGPoint(x: 1.24, y: 22.09))
            combinedShape.addLine(to: CGPoint(x: 1.24, y: 22.09))
            combinedShape.addCurve(to: CGPoint(x: 0.03, y: 21.36), controlPoint1: CGPoint(x: 0.71, y: 22.22), controlPoint2: CGPoint(x: 0.16, y: 21.89))
            combinedShape.addCurve(to: CGPoint(x: 0.04, y: 20.84), controlPoint1: CGPoint(x: -0.01, y: 21.19), controlPoint2: CGPoint(x: -0.01, y: 21.01))
            combinedShape.addLine(to: CGPoint(x: 1.6, y: 15.4))
            combinedShape.addLine(to: CGPoint(x: 1.6, y: 15.4))
            combinedShape.addCurve(to: CGPoint(x: 2.84, y: 14.72), controlPoint1: CGPoint(x: 1.76, y: 14.87), controlPoint2: CGPoint(x: 2.31, y: 14.57))
            combinedShape.addCurve(to: CGPoint(x: 3.27, y: 14.98), controlPoint1: CGPoint(x: 3, y: 14.77), controlPoint2: CGPoint(x: 3.15, y: 14.85))
            combinedShape.addLine(to: CGPoint(x: 3.27, y: 14.98))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 3.27, y: 14.98))
            context.saveGState()
            context.translateBy(x: 185.44, y: 250.23)
            combinedShape.usesEvenOddFillRule = true
            UIColor(white: 0.469, alpha: 1).setFill()
            combinedShape.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawProgressBackgroundNew(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 335, height: 167), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 335, height: 167), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 335, y: resizedFrame.height / 167)
        context.translateBy(x: -1618, y: -1703)
        
        /// Group 8
        do {
            context.saveGState()
            context.translateBy(x: 1621, y: 1704)
            
            /// Rectangle
            let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 328, height: 161), cornerRadius: 13.31)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.addRect(rectangle.bounds.insetBy(dx: -3, dy: -5))
            context.clip(using: .evenOdd)
            context.translateBy(x: -332, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 332, y: 2)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            rectangle.fill()
            context.restoreGState()
            context.saveGState()
            rectangle.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 342.62, y: 417.37),
                end: CGPoint(x: 279.49, y: 36.06),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 26
            let rectangle26 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 155, height: 1), cornerRadius: 8)
            context.saveGState()
            context.translateBy(x: 90.5, y: 50.5)
            context.scaleBy(x: 1, y: -1)
            context.rotate(by: 2 * CGFloat.pi)
            context.translateBy(x: -77.5, y: -0.5)
            UIColor(white: 0.793, alpha: 1).setFill()
            rectangle26.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawProgressBackgroundSquare(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 167, height: 167), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 167, height: 167), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 167, y: resizedFrame.height / 167)
        context.translateBy(x: -1779, y: -1949)
        
        /// ProgressBackgroundSquare
        do {
            context.saveGState()
            context.translateBy(x: 1782, y: 1950)
            
            /// Rectangle
            let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 161, height: 161), cornerRadius: 13.31)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.addRect(rectangle.bounds.insetBy(dx: -3, dy: -5))
            context.clip(using: .evenOdd)
            context.translateBy(x: -165, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 165, y: 2)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            rectangle.fill()
            context.restoreGState()
            context.saveGState()
            rectangle.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 168.18, y: 417.37),
                end: CGPoint(x: 137.19, y: 36.06),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 26
            let rectangle26 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 83.18, height: 1.34), cornerRadius: 8)
            context.saveGState()
            context.translateBy(x: 56.05, y: 44.05)
            context.scaleBy(x: 1, y: -1)
            context.rotate(by: 2 * CGFloat.pi)
            context.translateBy(x: -41.59, y: -0.67)
            UIColor(white: 0.793, alpha: 1).setFill()
            rectangle26.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawOrangeMail(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 55, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 55, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 55, y: resizedFrame.height / 55)
        context.translateBy(x: -2794, y: -3149)
        
        /// OrangeMail
        do {
            context.saveGState()
            context.translateBy(x: 2794, y: 3149)
            
            /// Oval 5
            let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 55, height: 55))
            context.saveGState()
            context.saveGState()
            oval5.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.065, saturation: 0.935, brightness: 1, alpha: 1).cgColor,
                        UIColor(hue: 0.113, saturation: 0.866, brightness: 0.965, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 27.5, y: 55),
                end: CGPoint(x: 27.5, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Mail
            do {
                context.saveGState()
                context.translateBy(x: 13, y: 17)
                
                /// Rectangle 17
                let rectangle17 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 30.29, height: 22.23), cornerRadius: 3.88)
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                context.saveGState()
                rectangle17.lineWidth = 4.4
                context.beginPath()
                context.addPath(rectangle17.cgPath)
                context.clip(using: .evenOdd)
                UIColor.white.setStroke()
                rectangle17.stroke()
                context.restoreGState()
                context.restoreGState()
                
                
                /// Group 3
                do {
                    context.saveGState()
                    context.translateBy(x: 0.89, y: 10.22)
                    
                    // Empty.
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawYellowText(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 55, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 55, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 55, y: resizedFrame.height / 55)
        context.translateBy(x: -3088, y: -3148)
        
        /// YellowText
        do {
            context.saveGState()
            context.translateBy(x: 3088, y: 3148)
            
            /// Oval 5
            let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 55, height: 55))
            context.saveGState()
            context.saveGState()
            oval5.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.116, saturation: 1, brightness: 1, alpha: 1).cgColor,
                        UIColor(hue: 0.159, saturation: 0.742, brightness: 1, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 27.5, y: 55),
                end: CGPoint(x: 27.5, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Chat
            do {
                context.saveGState()
                context.translateBy(x: 16, y: 17)
                
                /// Combined Shape
                let combinedShape = UIBezierPath()
                combinedShape.move(to: CGPoint(x: 2.29, y: 15.16))
                combinedShape.addCurve(to: CGPoint(x: 0.06, y: 20.48), controlPoint1: CGPoint(x: 1.61, y: 17.04), controlPoint2: CGPoint(x: 0.76, y: 19.7))
                combinedShape.addCurve(to: CGPoint(x: 5.79, y: 18.73), controlPoint1: CGPoint(x: -0.36, y: 20.94), controlPoint2: CGPoint(x: 1.55, y: 20.36))
                combinedShape.addCurve(to: CGPoint(x: 12.9, y: 20.77), controlPoint1: CGPoint(x: 7.77, y: 20.02), controlPoint2: CGPoint(x: 10.24, y: 20.77))
                combinedShape.addCurve(to: CGPoint(x: 23.6, y: 10.38), controlPoint1: CGPoint(x: 19.47, y: 20.77), controlPoint2: CGPoint(x: 23.6, y: 16.19))
                combinedShape.addCurve(to: CGPoint(x: 12.31, y: 0.01), controlPoint1: CGPoint(x: 23.6, y: 4.58), controlPoint2: CGPoint(x: 19.08, y: 0.23))
                combinedShape.addCurve(to: CGPoint(x: 0.98, y: 10.38), controlPoint1: CGPoint(x: 5.54, y: -0.21), controlPoint2: CGPoint(x: 0.98, y: 4.58))
                combinedShape.addCurve(to: CGPoint(x: 2.29, y: 15.16), controlPoint1: CGPoint(x: 0.98, y: 12.11), controlPoint2: CGPoint(x: 1.45, y: 13.73))
                combinedShape.close()
                combinedShape.move(to: CGPoint(x: 2.29, y: 15.16))
                context.saveGState()
                context.translateBy(x: 0.36, y: 0.3)
                combinedShape.usesEvenOddFillRule = true
                UIColor.white.setFill()
                combinedShape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBlueText(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 55, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 55, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 55, y: resizedFrame.height / 55)
        context.translateBy(x: -3088, y: -3212)
        
        /// BlueText
        do {
            context.saveGState()
            context.translateBy(x: 3088, y: 3212)
            
            /// Oval 5
            let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 55, height: 55))
            context.saveGState()
            context.saveGState()
            oval5.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.59, saturation: 0.815, brightness: 0.608, alpha: 1).cgColor,
                        UIColor(hue: 0.527, saturation: 0.893, brightness: 0.846, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 27.5, y: 55),
                end: CGPoint(x: 27.5, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Chat
            do {
                context.saveGState()
                context.translateBy(x: 16, y: 17)
                
                /// Combined Shape
                let combinedShape = UIBezierPath()
                combinedShape.move(to: CGPoint(x: 2.29, y: 15.16))
                combinedShape.addCurve(to: CGPoint(x: 0.06, y: 20.48), controlPoint1: CGPoint(x: 1.61, y: 17.04), controlPoint2: CGPoint(x: 0.76, y: 19.7))
                combinedShape.addCurve(to: CGPoint(x: 5.79, y: 18.73), controlPoint1: CGPoint(x: -0.36, y: 20.94), controlPoint2: CGPoint(x: 1.55, y: 20.36))
                combinedShape.addCurve(to: CGPoint(x: 12.9, y: 20.77), controlPoint1: CGPoint(x: 7.77, y: 20.02), controlPoint2: CGPoint(x: 10.24, y: 20.77))
                combinedShape.addCurve(to: CGPoint(x: 23.6, y: 10.38), controlPoint1: CGPoint(x: 19.47, y: 20.77), controlPoint2: CGPoint(x: 23.6, y: 16.19))
                combinedShape.addCurve(to: CGPoint(x: 12.31, y: 0.01), controlPoint1: CGPoint(x: 23.6, y: 4.58), controlPoint2: CGPoint(x: 19.08, y: 0.23))
                combinedShape.addCurve(to: CGPoint(x: 0.98, y: 10.38), controlPoint1: CGPoint(x: 5.54, y: -0.21), controlPoint2: CGPoint(x: 0.98, y: 4.58))
                combinedShape.addCurve(to: CGPoint(x: 2.29, y: 15.16), controlPoint1: CGPoint(x: 0.98, y: 12.11), controlPoint2: CGPoint(x: 1.45, y: 13.73))
                combinedShape.close()
                combinedShape.move(to: CGPoint(x: 2.29, y: 15.16))
                context.saveGState()
                context.translateBy(x: 0.36, y: 0.3)
                combinedShape.usesEvenOddFillRule = true
                UIColor.white.setFill()
                combinedShape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawPurpleText(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 55, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 55, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 55, y: resizedFrame.height / 55)
        context.translateBy(x: -3088, y: -3276)
        
        /// PurpleText
        do {
            context.saveGState()
            context.translateBy(x: 3088, y: 3276)
            
            /// Oval 5
            let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 55, height: 55))
            context.saveGState()
            context.saveGState()
            oval5.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.763, saturation: 0.63, brightness: 0.616, alpha: 1).cgColor,
                        UIColor(hue: 0.728, saturation: 0.565, brightness: 1, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 27.5, y: 55),
                end: CGPoint(x: 27.5, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Chat
            do {
                context.saveGState()
                context.translateBy(x: 15, y: 17)
                
                /// Combined Shape
                let combinedShape = UIBezierPath()
                combinedShape.move(to: CGPoint(x: 2.29, y: 15.16))
                combinedShape.addCurve(to: CGPoint(x: 0.06, y: 20.48), controlPoint1: CGPoint(x: 1.61, y: 17.04), controlPoint2: CGPoint(x: 0.76, y: 19.7))
                combinedShape.addCurve(to: CGPoint(x: 5.79, y: 18.73), controlPoint1: CGPoint(x: -0.36, y: 20.94), controlPoint2: CGPoint(x: 1.55, y: 20.36))
                combinedShape.addCurve(to: CGPoint(x: 12.9, y: 20.77), controlPoint1: CGPoint(x: 7.77, y: 20.02), controlPoint2: CGPoint(x: 10.24, y: 20.77))
                combinedShape.addCurve(to: CGPoint(x: 23.6, y: 10.38), controlPoint1: CGPoint(x: 19.47, y: 20.77), controlPoint2: CGPoint(x: 23.6, y: 16.19))
                combinedShape.addCurve(to: CGPoint(x: 12.31, y: 0.01), controlPoint1: CGPoint(x: 23.6, y: 4.58), controlPoint2: CGPoint(x: 19.08, y: 0.23))
                combinedShape.addCurve(to: CGPoint(x: 0.98, y: 10.38), controlPoint1: CGPoint(x: 5.54, y: -0.21), controlPoint2: CGPoint(x: 0.98, y: 4.58))
                combinedShape.addCurve(to: CGPoint(x: 2.29, y: 15.16), controlPoint1: CGPoint(x: 0.98, y: 12.11), controlPoint2: CGPoint(x: 1.45, y: 13.73))
                combinedShape.close()
                combinedShape.move(to: CGPoint(x: 2.29, y: 15.16))
                context.saveGState()
                context.translateBy(x: 0.36, y: 0.3)
                combinedShape.usesEvenOddFillRule = true
                UIColor.white.setFill()
                combinedShape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawRedText(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 55, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 55, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 55, y: resizedFrame.height / 55)
        context.translateBy(x: -2874, y: -3277)
        
        /// RedText
        do {
            context.saveGState()
            context.translateBy(x: 2874, y: 3277)
            
            /// Oval 5
            let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 55, height: 55))
            context.saveGState()
            context.saveGState()
            oval5.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.985, saturation: 0.67, brightness: 0.961, alpha: 1).cgColor,
                        UIColor(hue: 0.975, saturation: 0.975, brightness: 0.624, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 27.5, y: 0),
                end: CGPoint(x: 27.5, y: 55),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Chat
            do {
                context.saveGState()
                context.translateBy(x: 15, y: 16)
                
                /// Combined Shape
                let combinedShape = UIBezierPath()
                combinedShape.move(to: CGPoint(x: 2.29, y: 15.16))
                combinedShape.addCurve(to: CGPoint(x: 0.06, y: 20.48), controlPoint1: CGPoint(x: 1.61, y: 17.04), controlPoint2: CGPoint(x: 0.76, y: 19.7))
                combinedShape.addCurve(to: CGPoint(x: 5.79, y: 18.73), controlPoint1: CGPoint(x: -0.36, y: 20.94), controlPoint2: CGPoint(x: 1.55, y: 20.36))
                combinedShape.addCurve(to: CGPoint(x: 12.9, y: 20.77), controlPoint1: CGPoint(x: 7.77, y: 20.02), controlPoint2: CGPoint(x: 10.24, y: 20.77))
                combinedShape.addCurve(to: CGPoint(x: 23.6, y: 10.38), controlPoint1: CGPoint(x: 19.47, y: 20.77), controlPoint2: CGPoint(x: 23.6, y: 16.19))
                combinedShape.addCurve(to: CGPoint(x: 12.31, y: 0.01), controlPoint1: CGPoint(x: 23.6, y: 4.58), controlPoint2: CGPoint(x: 19.08, y: 0.23))
                combinedShape.addCurve(to: CGPoint(x: 0.98, y: 10.38), controlPoint1: CGPoint(x: 5.54, y: -0.21), controlPoint2: CGPoint(x: 0.98, y: 4.58))
                combinedShape.addCurve(to: CGPoint(x: 2.29, y: 15.16), controlPoint1: CGPoint(x: 0.98, y: 12.11), controlPoint2: CGPoint(x: 1.45, y: 13.73))
                combinedShape.close()
                combinedShape.move(to: CGPoint(x: 2.29, y: 15.16))
                context.saveGState()
                context.translateBy(x: 0.36, y: 0.3)
                combinedShape.usesEvenOddFillRule = true
                UIColor.white.setFill()
                combinedShape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGreenText(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 55, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 55, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 55, y: resizedFrame.height / 55)
        context.translateBy(x: -2874, y: -3213)
        
        /// GreenText
        do {
            context.saveGState()
            context.translateBy(x: 2874, y: 3213)
            
            /// Oval 5
            let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 55, height: 55))
            context.saveGState()
            context.saveGState()
            oval5.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.399, saturation: 1, brightness: 0.63, alpha: 1).cgColor,
                        UIColor(hue: 0.408, saturation: 0.975, brightness: 0.864, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 27.5, y: 55),
                end: CGPoint(x: 27.5, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Chat
            do {
                context.saveGState()
                context.translateBy(x: 15, y: 17)
                
                /// Combined Shape
                let combinedShape = UIBezierPath()
                combinedShape.move(to: CGPoint(x: 2.29, y: 15.16))
                combinedShape.addCurve(to: CGPoint(x: 0.06, y: 20.48), controlPoint1: CGPoint(x: 1.61, y: 17.04), controlPoint2: CGPoint(x: 0.76, y: 19.7))
                combinedShape.addCurve(to: CGPoint(x: 5.79, y: 18.73), controlPoint1: CGPoint(x: -0.36, y: 20.94), controlPoint2: CGPoint(x: 1.55, y: 20.36))
                combinedShape.addCurve(to: CGPoint(x: 12.9, y: 20.77), controlPoint1: CGPoint(x: 7.77, y: 20.02), controlPoint2: CGPoint(x: 10.24, y: 20.77))
                combinedShape.addCurve(to: CGPoint(x: 23.6, y: 10.38), controlPoint1: CGPoint(x: 19.47, y: 20.77), controlPoint2: CGPoint(x: 23.6, y: 16.19))
                combinedShape.addCurve(to: CGPoint(x: 12.31, y: 0.01), controlPoint1: CGPoint(x: 23.6, y: 4.58), controlPoint2: CGPoint(x: 19.08, y: 0.23))
                combinedShape.addCurve(to: CGPoint(x: 0.98, y: 10.38), controlPoint1: CGPoint(x: 5.54, y: -0.21), controlPoint2: CGPoint(x: 0.98, y: 4.58))
                combinedShape.addCurve(to: CGPoint(x: 2.29, y: 15.16), controlPoint1: CGPoint(x: 0.98, y: 12.11), controlPoint2: CGPoint(x: 1.45, y: 13.73))
                combinedShape.close()
                combinedShape.move(to: CGPoint(x: 2.29, y: 15.16))
                context.saveGState()
                context.translateBy(x: 0.36, y: 0.3)
                combinedShape.usesEvenOddFillRule = true
                UIColor.white.setFill()
                combinedShape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawOrangeText(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 55, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 55, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 55, y: resizedFrame.height / 55)
        context.translateBy(x: -2874, y: -3149)
        
        /// OrangeText
        do {
            context.saveGState()
            context.translateBy(x: 2874, y: 3149)
            
            /// Oval 5
            let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 55, height: 55))
            context.saveGState()
            context.saveGState()
            oval5.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.065, saturation: 0.935, brightness: 1, alpha: 1).cgColor,
                        UIColor(hue: 0.113, saturation: 0.866, brightness: 0.965, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 27.5, y: 55),
                end: CGPoint(x: 27.5, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Chat
            do {
                context.saveGState()
                context.translateBy(x: 15, y: 17)
                
                /// Combined Shape
                let combinedShape = UIBezierPath()
                combinedShape.move(to: CGPoint(x: 2.29, y: 15.16))
                combinedShape.addCurve(to: CGPoint(x: 0.06, y: 20.48), controlPoint1: CGPoint(x: 1.61, y: 17.04), controlPoint2: CGPoint(x: 0.76, y: 19.7))
                combinedShape.addCurve(to: CGPoint(x: 5.79, y: 18.73), controlPoint1: CGPoint(x: -0.36, y: 20.94), controlPoint2: CGPoint(x: 1.55, y: 20.36))
                combinedShape.addCurve(to: CGPoint(x: 12.9, y: 20.77), controlPoint1: CGPoint(x: 7.77, y: 20.02), controlPoint2: CGPoint(x: 10.24, y: 20.77))
                combinedShape.addCurve(to: CGPoint(x: 23.6, y: 10.38), controlPoint1: CGPoint(x: 19.47, y: 20.77), controlPoint2: CGPoint(x: 23.6, y: 16.19))
                combinedShape.addCurve(to: CGPoint(x: 12.31, y: 0.01), controlPoint1: CGPoint(x: 23.6, y: 4.58), controlPoint2: CGPoint(x: 19.08, y: 0.23))
                combinedShape.addCurve(to: CGPoint(x: 0.98, y: 10.38), controlPoint1: CGPoint(x: 5.54, y: -0.21), controlPoint2: CGPoint(x: 0.98, y: 4.58))
                combinedShape.addCurve(to: CGPoint(x: 2.29, y: 15.16), controlPoint1: CGPoint(x: 0.98, y: 12.11), controlPoint2: CGPoint(x: 1.45, y: 13.73))
                combinedShape.close()
                combinedShape.move(to: CGPoint(x: 2.29, y: 15.16))
                context.saveGState()
                context.translateBy(x: 0.36, y: 0.3)
                combinedShape.usesEvenOddFillRule = true
                UIColor.white.setFill()
                combinedShape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawPurpleMail(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 55, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 55, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 55, y: resizedFrame.height / 55)
        context.translateBy(x: -3021, y: -3276)
        
        /// PurpleMail
        do {
            context.saveGState()
            context.translateBy(x: 3021, y: 3276)
            
            /// Oval 5
            let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 55, height: 55))
            context.saveGState()
            context.saveGState()
            oval5.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.763, saturation: 0.63, brightness: 0.616, alpha: 1).cgColor,
                        UIColor(hue: 0.728, saturation: 0.565, brightness: 1, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 27.5, y: 55),
                end: CGPoint(x: 27.5, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Mail
            do {
                context.saveGState()
                context.translateBy(x: 13, y: 17)
                
                /// Rectangle 17
                let rectangle17 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 30.29, height: 22.23), cornerRadius: 3.88)
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                context.saveGState()
                rectangle17.lineWidth = 4.4
                context.beginPath()
                context.addPath(rectangle17.cgPath)
                context.clip(using: .evenOdd)
                UIColor.white.setStroke()
                rectangle17.stroke()
                context.restoreGState()
                context.restoreGState()
                
                
                /// Group 3
                do {
                    context.saveGState()
                    context.translateBy(x: 0.89, y: 10.22)
                    
                    // Empty.
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawPurplePhone(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 55, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 55, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 55, y: resizedFrame.height / 55)
        context.translateBy(x: -2955, y: -3277)
        
        /// PurplePhone
        do {
            context.saveGState()
            context.translateBy(x: 2955, y: 3277)
            
            /// Oval 5
            let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 55, height: 55))
            context.saveGState()
            context.saveGState()
            oval5.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.763, saturation: 0.63, brightness: 0.616, alpha: 1).cgColor,
                        UIColor(hue: 0.728, saturation: 0.565, brightness: 1, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 27.5, y: 55),
                end: CGPoint(x: 27.5, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 4
            let rectangle4 = UIBezierPath()
            rectangle4.move(to: CGPoint(x: 6.84, y: 0.32))
            rectangle4.addLine(to: CGPoint(x: 10.65, y: 6.76))
            rectangle4.addLine(to: CGPoint(x: 10.65, y: 6.76))
            rectangle4.addCurve(to: CGPoint(x: 10.42, y: 7.67), controlPoint1: CGPoint(x: 10.84, y: 7.08), controlPoint2: CGPoint(x: 10.73, y: 7.48))
            rectangle4.addCurve(to: CGPoint(x: 10.41, y: 7.67), controlPoint1: CGPoint(x: 10.42, y: 7.67), controlPoint2: CGPoint(x: 10.42, y: 7.67))
            rectangle4.addCurve(to: CGPoint(x: 6.94, y: 10.77), controlPoint1: CGPoint(x: 8.16, y: 8.96), controlPoint2: CGPoint(x: 7, y: 10))
            rectangle4.addCurve(to: CGPoint(x: 10.39, y: 16.87), controlPoint1: CGPoint(x: 6.85, y: 12.04), controlPoint2: CGPoint(x: 8.49, y: 14.23))
            rectangle4.addCurve(to: CGPoint(x: 15.26, y: 21.3), controlPoint1: CGPoint(x: 12.29, y: 19.51), controlPoint2: CGPoint(x: 14.1, y: 21.17))
            rectangle4.addCurve(to: CGPoint(x: 19.18, y: 18.65), controlPoint1: CGPoint(x: 15.98, y: 21.38), controlPoint2: CGPoint(x: 17.29, y: 20.5))
            rectangle4.addLine(to: CGPoint(x: 19.18, y: 18.65))
            rectangle4.addCurve(to: CGPoint(x: 20.09, y: 18.65), controlPoint1: CGPoint(x: 19.43, y: 18.4), controlPoint2: CGPoint(x: 19.84, y: 18.4))
            rectangle4.addLine(to: CGPoint(x: 25.46, y: 23.76))
            rectangle4.addLine(to: CGPoint(x: 25.46, y: 23.76))
            rectangle4.addCurve(to: CGPoint(x: 25.5, y: 24.68), controlPoint1: CGPoint(x: 25.72, y: 24.01), controlPoint2: CGPoint(x: 25.74, y: 24.41))
            rectangle4.addCurve(to: CGPoint(x: 18.19, y: 29.15), controlPoint1: CGPoint(x: 22.89, y: 27.65), controlPoint2: CGPoint(x: 20.45, y: 29.14))
            rectangle4.addCurve(to: CGPoint(x: 0, y: 6.8), controlPoint1: CGPoint(x: 12.2, y: 29.16), controlPoint2: CGPoint(x: 0.22, y: 17.06))
            rectangle4.addCurve(to: CGPoint(x: 5.94, y: 0.09), controlPoint1: CGPoint(x: -0.04, y: 4.69), controlPoint2: CGPoint(x: 1.93, y: 2.45))
            rectangle4.addLine(to: CGPoint(x: 5.94, y: 0.09))
            rectangle4.addCurve(to: CGPoint(x: 6.84, y: 0.32), controlPoint1: CGPoint(x: 6.25, y: -0.09), controlPoint2: CGPoint(x: 6.65, y: 0.01))
            rectangle4.close()
            rectangle4.move(to: CGPoint(x: 6.84, y: 0.32))
            context.saveGState()
            context.translateBy(x: 14.48, y: 13.02)
            rectangle4.usesEvenOddFillRule = true
            UIColor.white.setFill()
            rectangle4.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawRedMail(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 55, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 55, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 55, y: resizedFrame.height / 55)
        context.translateBy(x: -2794, y: -3276)
        
        /// RedMail
        do {
            context.saveGState()
            context.translateBy(x: 2794, y: 3276)
            
            /// Oval 5
            let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 55, height: 55))
            context.saveGState()
            context.saveGState()
            oval5.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.985, saturation: 0.67, brightness: 0.961, alpha: 1).cgColor,
                        UIColor(hue: 0.975, saturation: 0.975, brightness: 0.624, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 27.5, y: 0),
                end: CGPoint(x: 27.5, y: 55),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Mail
            do {
                context.saveGState()
                context.translateBy(x: 13, y: 17)
                
                /// Rectangle 17
                let rectangle17 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 30.29, height: 22.23), cornerRadius: 3.88)
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                context.saveGState()
                rectangle17.lineWidth = 4.4
                context.beginPath()
                context.addPath(rectangle17.cgPath)
                context.clip(using: .evenOdd)
                UIColor.white.setStroke()
                rectangle17.stroke()
                context.restoreGState()
                context.restoreGState()
                
                
                /// Group 3
                do {
                    context.saveGState()
                    context.translateBy(x: 0.89, y: 10.22)
                    
                    // Empty.
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawRedPhone(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 55, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 55, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 55, y: resizedFrame.height / 55)
        context.translateBy(x: -2723, y: -3277)
        
        /// RedPhone
        do {
            context.saveGState()
            context.translateBy(x: 2723, y: 3277)
            
            /// Oval 5
            let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 55, height: 55))
            context.saveGState()
            context.saveGState()
            oval5.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.985, saturation: 0.67, brightness: 0.961, alpha: 1).cgColor,
                        UIColor(hue: 0.975, saturation: 0.975, brightness: 0.624, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 27.5, y: 0),
                end: CGPoint(x: 27.5, y: 55),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 4
            let rectangle4 = UIBezierPath()
            rectangle4.move(to: CGPoint(x: 6.84, y: 0.32))
            rectangle4.addLine(to: CGPoint(x: 10.65, y: 6.76))
            rectangle4.addLine(to: CGPoint(x: 10.65, y: 6.76))
            rectangle4.addCurve(to: CGPoint(x: 10.42, y: 7.67), controlPoint1: CGPoint(x: 10.84, y: 7.08), controlPoint2: CGPoint(x: 10.73, y: 7.48))
            rectangle4.addCurve(to: CGPoint(x: 10.41, y: 7.67), controlPoint1: CGPoint(x: 10.42, y: 7.67), controlPoint2: CGPoint(x: 10.42, y: 7.67))
            rectangle4.addCurve(to: CGPoint(x: 6.94, y: 10.77), controlPoint1: CGPoint(x: 8.16, y: 8.96), controlPoint2: CGPoint(x: 7, y: 10))
            rectangle4.addCurve(to: CGPoint(x: 10.39, y: 16.87), controlPoint1: CGPoint(x: 6.85, y: 12.04), controlPoint2: CGPoint(x: 8.49, y: 14.23))
            rectangle4.addCurve(to: CGPoint(x: 15.26, y: 21.3), controlPoint1: CGPoint(x: 12.29, y: 19.51), controlPoint2: CGPoint(x: 14.1, y: 21.17))
            rectangle4.addCurve(to: CGPoint(x: 19.18, y: 18.65), controlPoint1: CGPoint(x: 15.98, y: 21.38), controlPoint2: CGPoint(x: 17.29, y: 20.5))
            rectangle4.addLine(to: CGPoint(x: 19.18, y: 18.65))
            rectangle4.addCurve(to: CGPoint(x: 20.09, y: 18.65), controlPoint1: CGPoint(x: 19.43, y: 18.4), controlPoint2: CGPoint(x: 19.84, y: 18.4))
            rectangle4.addLine(to: CGPoint(x: 25.46, y: 23.76))
            rectangle4.addLine(to: CGPoint(x: 25.46, y: 23.76))
            rectangle4.addCurve(to: CGPoint(x: 25.5, y: 24.68), controlPoint1: CGPoint(x: 25.72, y: 24.01), controlPoint2: CGPoint(x: 25.74, y: 24.41))
            rectangle4.addCurve(to: CGPoint(x: 18.19, y: 29.15), controlPoint1: CGPoint(x: 22.89, y: 27.65), controlPoint2: CGPoint(x: 20.45, y: 29.14))
            rectangle4.addCurve(to: CGPoint(x: 0, y: 6.8), controlPoint1: CGPoint(x: 12.2, y: 29.16), controlPoint2: CGPoint(x: 0.22, y: 17.06))
            rectangle4.addCurve(to: CGPoint(x: 5.94, y: 0.09), controlPoint1: CGPoint(x: -0.04, y: 4.69), controlPoint2: CGPoint(x: 1.93, y: 2.45))
            rectangle4.addLine(to: CGPoint(x: 5.94, y: 0.09))
            rectangle4.addCurve(to: CGPoint(x: 6.84, y: 0.32), controlPoint1: CGPoint(x: 6.25, y: -0.09), controlPoint2: CGPoint(x: 6.65, y: 0.01))
            rectangle4.close()
            rectangle4.move(to: CGPoint(x: 6.84, y: 0.32))
            context.saveGState()
            context.translateBy(x: 14.48, y: 13.02)
            rectangle4.usesEvenOddFillRule = true
            UIColor.white.setFill()
            rectangle4.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBlueMail(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 55, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 55, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 55, y: resizedFrame.height / 55)
        context.translateBy(x: -3021, y: -3212)
        
        /// BlueMail
        do {
            context.saveGState()
            context.translateBy(x: 3021, y: 3212)
            
            /// Oval 5
            let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 55, height: 55))
            context.saveGState()
            context.saveGState()
            oval5.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.59, saturation: 0.815, brightness: 0.608, alpha: 1).cgColor,
                        UIColor(hue: 0.527, saturation: 0.893, brightness: 0.846, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 27.5, y: 55),
                end: CGPoint(x: 27.5, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Mail
            do {
                context.saveGState()
                context.translateBy(x: 13, y: 17)
                
                /// Rectangle 17
                let rectangle17 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 30.29, height: 22.23), cornerRadius: 3.88)
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                context.saveGState()
                rectangle17.lineWidth = 4.4
                context.beginPath()
                context.addPath(rectangle17.cgPath)
                context.clip(using: .evenOdd)
                UIColor.white.setStroke()
                rectangle17.stroke()
                context.restoreGState()
                context.restoreGState()
                
                
                /// Group 3
                do {
                    context.saveGState()
                    context.translateBy(x: 0.89, y: 10.22)
                    
                    // Empty.
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBluePhone(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 55, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 55, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 55, y: resizedFrame.height / 55)
        context.translateBy(x: -2955, y: -3212)
        
        /// BluePhone
        do {
            context.saveGState()
            context.translateBy(x: 2955, y: 3212)
            
            /// Oval 5
            let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 55, height: 55))
            context.saveGState()
            context.saveGState()
            oval5.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.59, saturation: 0.815, brightness: 0.608, alpha: 1).cgColor,
                        UIColor(hue: 0.527, saturation: 0.893, brightness: 0.846, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 27.5, y: 55),
                end: CGPoint(x: 27.5, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 4
            let rectangle4 = UIBezierPath()
            rectangle4.move(to: CGPoint(x: 6.84, y: 0.32))
            rectangle4.addLine(to: CGPoint(x: 10.65, y: 6.76))
            rectangle4.addLine(to: CGPoint(x: 10.65, y: 6.76))
            rectangle4.addCurve(to: CGPoint(x: 10.42, y: 7.67), controlPoint1: CGPoint(x: 10.84, y: 7.08), controlPoint2: CGPoint(x: 10.73, y: 7.48))
            rectangle4.addCurve(to: CGPoint(x: 10.41, y: 7.67), controlPoint1: CGPoint(x: 10.42, y: 7.67), controlPoint2: CGPoint(x: 10.42, y: 7.67))
            rectangle4.addCurve(to: CGPoint(x: 6.94, y: 10.77), controlPoint1: CGPoint(x: 8.16, y: 8.96), controlPoint2: CGPoint(x: 7, y: 10))
            rectangle4.addCurve(to: CGPoint(x: 10.39, y: 16.87), controlPoint1: CGPoint(x: 6.85, y: 12.04), controlPoint2: CGPoint(x: 8.49, y: 14.23))
            rectangle4.addCurve(to: CGPoint(x: 15.26, y: 21.3), controlPoint1: CGPoint(x: 12.29, y: 19.51), controlPoint2: CGPoint(x: 14.1, y: 21.17))
            rectangle4.addCurve(to: CGPoint(x: 19.18, y: 18.65), controlPoint1: CGPoint(x: 15.98, y: 21.38), controlPoint2: CGPoint(x: 17.29, y: 20.5))
            rectangle4.addLine(to: CGPoint(x: 19.18, y: 18.65))
            rectangle4.addCurve(to: CGPoint(x: 20.09, y: 18.65), controlPoint1: CGPoint(x: 19.43, y: 18.4), controlPoint2: CGPoint(x: 19.84, y: 18.4))
            rectangle4.addLine(to: CGPoint(x: 25.46, y: 23.76))
            rectangle4.addLine(to: CGPoint(x: 25.46, y: 23.76))
            rectangle4.addCurve(to: CGPoint(x: 25.5, y: 24.68), controlPoint1: CGPoint(x: 25.72, y: 24.01), controlPoint2: CGPoint(x: 25.74, y: 24.41))
            rectangle4.addCurve(to: CGPoint(x: 18.19, y: 29.15), controlPoint1: CGPoint(x: 22.89, y: 27.65), controlPoint2: CGPoint(x: 20.45, y: 29.14))
            rectangle4.addCurve(to: CGPoint(x: 0, y: 6.8), controlPoint1: CGPoint(x: 12.2, y: 29.16), controlPoint2: CGPoint(x: 0.22, y: 17.06))
            rectangle4.addCurve(to: CGPoint(x: 5.94, y: 0.09), controlPoint1: CGPoint(x: -0.04, y: 4.69), controlPoint2: CGPoint(x: 1.93, y: 2.45))
            rectangle4.addLine(to: CGPoint(x: 5.94, y: 0.09))
            rectangle4.addCurve(to: CGPoint(x: 6.84, y: 0.32), controlPoint1: CGPoint(x: 6.25, y: -0.09), controlPoint2: CGPoint(x: 6.65, y: 0.01))
            rectangle4.close()
            rectangle4.move(to: CGPoint(x: 6.84, y: 0.32))
            context.saveGState()
            context.translateBy(x: 14.48, y: 13.02)
            rectangle4.usesEvenOddFillRule = true
            UIColor.white.setFill()
            rectangle4.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGreenMail(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 55, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 55, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 55, y: resizedFrame.height / 55)
        context.translateBy(x: -2794, y: -3212)
        
        /// GreenMail
        do {
            context.saveGState()
            context.translateBy(x: 2794, y: 3212)
            
            /// Oval 5
            let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 55, height: 55))
            context.saveGState()
            context.saveGState()
            oval5.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.399, saturation: 1, brightness: 0.63, alpha: 1).cgColor,
                        UIColor(hue: 0.408, saturation: 0.975, brightness: 0.864, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 27.5, y: 55),
                end: CGPoint(x: 27.5, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Mail
            do {
                context.saveGState()
                context.translateBy(x: 13, y: 17)
                
                /// Rectangle 17
                let rectangle17 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 30.29, height: 22.23), cornerRadius: 3.88)
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                context.saveGState()
                rectangle17.lineWidth = 4.4
                context.beginPath()
                context.addPath(rectangle17.cgPath)
                context.clip(using: .evenOdd)
                UIColor.white.setStroke()
                rectangle17.stroke()
                context.restoreGState()
                context.restoreGState()
                
                
                /// Group 3
                do {
                    context.saveGState()
                    context.translateBy(x: 0.89, y: 10.22)
                    
                    // Empty.
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawGreenPhone(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 55, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 55, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 55, y: resizedFrame.height / 55)
        context.translateBy(x: -2723, y: -3213)
        
        /// GreenPhone
        do {
            context.saveGState()
            context.translateBy(x: 2723, y: 3213)
            
            /// Oval 5
            let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 55, height: 55))
            context.saveGState()
            context.saveGState()
            oval5.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.399, saturation: 1, brightness: 0.63, alpha: 1).cgColor,
                        UIColor(hue: 0.408, saturation: 0.975, brightness: 0.864, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 27.5, y: 55),
                end: CGPoint(x: 27.5, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 4
            let rectangle4 = UIBezierPath()
            rectangle4.move(to: CGPoint(x: 6.84, y: 0.32))
            rectangle4.addLine(to: CGPoint(x: 10.65, y: 6.76))
            rectangle4.addLine(to: CGPoint(x: 10.65, y: 6.76))
            rectangle4.addCurve(to: CGPoint(x: 10.42, y: 7.67), controlPoint1: CGPoint(x: 10.84, y: 7.08), controlPoint2: CGPoint(x: 10.73, y: 7.48))
            rectangle4.addCurve(to: CGPoint(x: 10.41, y: 7.67), controlPoint1: CGPoint(x: 10.42, y: 7.67), controlPoint2: CGPoint(x: 10.42, y: 7.67))
            rectangle4.addCurve(to: CGPoint(x: 6.94, y: 10.77), controlPoint1: CGPoint(x: 8.16, y: 8.96), controlPoint2: CGPoint(x: 7, y: 10))
            rectangle4.addCurve(to: CGPoint(x: 10.39, y: 16.87), controlPoint1: CGPoint(x: 6.85, y: 12.04), controlPoint2: CGPoint(x: 8.49, y: 14.23))
            rectangle4.addCurve(to: CGPoint(x: 15.26, y: 21.3), controlPoint1: CGPoint(x: 12.29, y: 19.51), controlPoint2: CGPoint(x: 14.1, y: 21.17))
            rectangle4.addCurve(to: CGPoint(x: 19.18, y: 18.65), controlPoint1: CGPoint(x: 15.98, y: 21.38), controlPoint2: CGPoint(x: 17.29, y: 20.5))
            rectangle4.addLine(to: CGPoint(x: 19.18, y: 18.65))
            rectangle4.addCurve(to: CGPoint(x: 20.09, y: 18.65), controlPoint1: CGPoint(x: 19.43, y: 18.4), controlPoint2: CGPoint(x: 19.84, y: 18.4))
            rectangle4.addLine(to: CGPoint(x: 25.46, y: 23.76))
            rectangle4.addLine(to: CGPoint(x: 25.46, y: 23.76))
            rectangle4.addCurve(to: CGPoint(x: 25.5, y: 24.68), controlPoint1: CGPoint(x: 25.72, y: 24.01), controlPoint2: CGPoint(x: 25.74, y: 24.41))
            rectangle4.addCurve(to: CGPoint(x: 18.19, y: 29.15), controlPoint1: CGPoint(x: 22.89, y: 27.65), controlPoint2: CGPoint(x: 20.45, y: 29.14))
            rectangle4.addCurve(to: CGPoint(x: 0, y: 6.8), controlPoint1: CGPoint(x: 12.2, y: 29.16), controlPoint2: CGPoint(x: 0.22, y: 17.06))
            rectangle4.addCurve(to: CGPoint(x: 5.94, y: 0.09), controlPoint1: CGPoint(x: -0.04, y: 4.69), controlPoint2: CGPoint(x: 1.93, y: 2.45))
            rectangle4.addLine(to: CGPoint(x: 5.94, y: 0.09))
            rectangle4.addCurve(to: CGPoint(x: 6.84, y: 0.32), controlPoint1: CGPoint(x: 6.25, y: -0.09), controlPoint2: CGPoint(x: 6.65, y: 0.01))
            rectangle4.close()
            rectangle4.move(to: CGPoint(x: 6.84, y: 0.32))
            context.saveGState()
            context.translateBy(x: 14.48, y: 13.02)
            rectangle4.usesEvenOddFillRule = true
            UIColor.white.setFill()
            rectangle4.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawYellowMail(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 55, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 55, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 55, y: resizedFrame.height / 55)
        context.translateBy(x: -3021, y: -3149)
        
        /// YellowMail
        do {
            context.saveGState()
            context.translateBy(x: 3021, y: 3149)
            
            /// Oval 5
            let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 55, height: 55))
            context.saveGState()
            context.saveGState()
            oval5.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.116, saturation: 1, brightness: 1, alpha: 1).cgColor,
                        UIColor(hue: 0.159, saturation: 0.742, brightness: 1, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 27.5, y: 55),
                end: CGPoint(x: 27.5, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Mail
            do {
                context.saveGState()
                context.translateBy(x: 13, y: 17)
                
                /// Rectangle 17
                let rectangle17 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 30.29, height: 22.23), cornerRadius: 3.88)
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                context.saveGState()
                rectangle17.lineWidth = 4.4
                context.beginPath()
                context.addPath(rectangle17.cgPath)
                context.clip(using: .evenOdd)
                UIColor.white.setStroke()
                rectangle17.stroke()
                context.restoreGState()
                context.restoreGState()
                
                
                /// Group 3
                do {
                    context.saveGState()
                    context.translateBy(x: 0.89, y: 10.22)
                    
                    // Empty.
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawYellowPhone(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 55, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 55, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 55, y: resizedFrame.height / 55)
        context.translateBy(x: -2955, y: -3149)
        
        /// YellowPhone
        do {
            context.saveGState()
            context.translateBy(x: 2955, y: 3149)
            
            /// Oval 5
            let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 55, height: 55))
            context.saveGState()
            context.saveGState()
            oval5.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.116, saturation: 1, brightness: 1, alpha: 1).cgColor,
                        UIColor(hue: 0.159, saturation: 0.742, brightness: 1, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 27.5, y: 55),
                end: CGPoint(x: 27.5, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 4
            let rectangle4 = UIBezierPath()
            rectangle4.move(to: CGPoint(x: 6.84, y: 0.32))
            rectangle4.addLine(to: CGPoint(x: 10.65, y: 6.76))
            rectangle4.addLine(to: CGPoint(x: 10.65, y: 6.76))
            rectangle4.addCurve(to: CGPoint(x: 10.42, y: 7.67), controlPoint1: CGPoint(x: 10.84, y: 7.08), controlPoint2: CGPoint(x: 10.73, y: 7.48))
            rectangle4.addCurve(to: CGPoint(x: 10.41, y: 7.67), controlPoint1: CGPoint(x: 10.42, y: 7.67), controlPoint2: CGPoint(x: 10.42, y: 7.67))
            rectangle4.addCurve(to: CGPoint(x: 6.94, y: 10.77), controlPoint1: CGPoint(x: 8.16, y: 8.96), controlPoint2: CGPoint(x: 7, y: 10))
            rectangle4.addCurve(to: CGPoint(x: 10.39, y: 16.87), controlPoint1: CGPoint(x: 6.85, y: 12.04), controlPoint2: CGPoint(x: 8.49, y: 14.23))
            rectangle4.addCurve(to: CGPoint(x: 15.26, y: 21.3), controlPoint1: CGPoint(x: 12.29, y: 19.51), controlPoint2: CGPoint(x: 14.1, y: 21.17))
            rectangle4.addCurve(to: CGPoint(x: 19.18, y: 18.65), controlPoint1: CGPoint(x: 15.98, y: 21.38), controlPoint2: CGPoint(x: 17.29, y: 20.5))
            rectangle4.addLine(to: CGPoint(x: 19.18, y: 18.65))
            rectangle4.addCurve(to: CGPoint(x: 20.09, y: 18.65), controlPoint1: CGPoint(x: 19.43, y: 18.4), controlPoint2: CGPoint(x: 19.84, y: 18.4))
            rectangle4.addLine(to: CGPoint(x: 25.46, y: 23.76))
            rectangle4.addLine(to: CGPoint(x: 25.46, y: 23.76))
            rectangle4.addCurve(to: CGPoint(x: 25.5, y: 24.68), controlPoint1: CGPoint(x: 25.72, y: 24.01), controlPoint2: CGPoint(x: 25.74, y: 24.41))
            rectangle4.addCurve(to: CGPoint(x: 18.19, y: 29.15), controlPoint1: CGPoint(x: 22.89, y: 27.65), controlPoint2: CGPoint(x: 20.45, y: 29.14))
            rectangle4.addCurve(to: CGPoint(x: 0, y: 6.8), controlPoint1: CGPoint(x: 12.2, y: 29.16), controlPoint2: CGPoint(x: 0.22, y: 17.06))
            rectangle4.addCurve(to: CGPoint(x: 5.94, y: 0.09), controlPoint1: CGPoint(x: -0.04, y: 4.69), controlPoint2: CGPoint(x: 1.93, y: 2.45))
            rectangle4.addLine(to: CGPoint(x: 5.94, y: 0.09))
            rectangle4.addCurve(to: CGPoint(x: 6.84, y: 0.32), controlPoint1: CGPoint(x: 6.25, y: -0.09), controlPoint2: CGPoint(x: 6.65, y: 0.01))
            rectangle4.close()
            rectangle4.move(to: CGPoint(x: 6.84, y: 0.32))
            context.saveGState()
            context.translateBy(x: 14.48, y: 13.02)
            rectangle4.usesEvenOddFillRule = true
            UIColor.white.setFill()
            rectangle4.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawOrangePhone(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 55, height: 55), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 55, height: 55), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 55, y: resizedFrame.height / 55)
        context.translateBy(x: -2723, y: -3149)
        
        /// OrangePhone
        do {
            context.saveGState()
            context.translateBy(x: 2723, y: 3149)
            
            /// Oval 5
            let oval5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 55, height: 55))
            context.saveGState()
            context.saveGState()
            oval5.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.065, saturation: 0.935, brightness: 1, alpha: 1).cgColor,
                        UIColor(hue: 0.113, saturation: 0.866, brightness: 0.965, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 27.5, y: 55),
                end: CGPoint(x: 27.5, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 4
            let rectangle4 = UIBezierPath()
            rectangle4.move(to: CGPoint(x: 6.84, y: 0.32))
            rectangle4.addLine(to: CGPoint(x: 10.65, y: 6.76))
            rectangle4.addLine(to: CGPoint(x: 10.65, y: 6.76))
            rectangle4.addCurve(to: CGPoint(x: 10.42, y: 7.67), controlPoint1: CGPoint(x: 10.84, y: 7.08), controlPoint2: CGPoint(x: 10.73, y: 7.48))
            rectangle4.addCurve(to: CGPoint(x: 10.41, y: 7.67), controlPoint1: CGPoint(x: 10.42, y: 7.67), controlPoint2: CGPoint(x: 10.42, y: 7.67))
            rectangle4.addCurve(to: CGPoint(x: 6.94, y: 10.77), controlPoint1: CGPoint(x: 8.16, y: 8.96), controlPoint2: CGPoint(x: 7, y: 10))
            rectangle4.addCurve(to: CGPoint(x: 10.39, y: 16.87), controlPoint1: CGPoint(x: 6.85, y: 12.04), controlPoint2: CGPoint(x: 8.49, y: 14.23))
            rectangle4.addCurve(to: CGPoint(x: 15.26, y: 21.3), controlPoint1: CGPoint(x: 12.29, y: 19.51), controlPoint2: CGPoint(x: 14.1, y: 21.17))
            rectangle4.addCurve(to: CGPoint(x: 19.18, y: 18.65), controlPoint1: CGPoint(x: 15.98, y: 21.38), controlPoint2: CGPoint(x: 17.29, y: 20.5))
            rectangle4.addLine(to: CGPoint(x: 19.18, y: 18.65))
            rectangle4.addCurve(to: CGPoint(x: 20.09, y: 18.65), controlPoint1: CGPoint(x: 19.43, y: 18.4), controlPoint2: CGPoint(x: 19.84, y: 18.4))
            rectangle4.addLine(to: CGPoint(x: 25.46, y: 23.76))
            rectangle4.addLine(to: CGPoint(x: 25.46, y: 23.76))
            rectangle4.addCurve(to: CGPoint(x: 25.5, y: 24.68), controlPoint1: CGPoint(x: 25.72, y: 24.01), controlPoint2: CGPoint(x: 25.74, y: 24.41))
            rectangle4.addCurve(to: CGPoint(x: 18.19, y: 29.15), controlPoint1: CGPoint(x: 22.89, y: 27.65), controlPoint2: CGPoint(x: 20.45, y: 29.14))
            rectangle4.addCurve(to: CGPoint(x: 0, y: 6.8), controlPoint1: CGPoint(x: 12.2, y: 29.16), controlPoint2: CGPoint(x: 0.22, y: 17.06))
            rectangle4.addCurve(to: CGPoint(x: 5.94, y: 0.09), controlPoint1: CGPoint(x: -0.04, y: 4.69), controlPoint2: CGPoint(x: 1.93, y: 2.45))
            rectangle4.addLine(to: CGPoint(x: 5.94, y: 0.09))
            rectangle4.addCurve(to: CGPoint(x: 6.84, y: 0.32), controlPoint1: CGPoint(x: 6.25, y: -0.09), controlPoint2: CGPoint(x: 6.65, y: 0.01))
            rectangle4.close()
            rectangle4.move(to: CGPoint(x: 6.84, y: 0.32))
            context.saveGState()
            context.translateBy(x: 14.48, y: 13.02)
            rectangle4.usesEvenOddFillRule = true
            UIColor.white.setFill()
            rectangle4.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawTabBarBG(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 65), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 65), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 65)
        context.translateBy(x: -2717, y: -1490)
        
        /// Rectangle 28
        let rectangle28 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 375, height: 65), cornerRadius: 24)
        context.saveGState()
        context.translateBy(x: 2717, y: 1490)
        context.saveGState()
        rectangle28.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 1, saturation: 0.023, brightness: 0.702, alpha: 1).cgColor,
                    UIColor.white.cgColor,
                ] as CFArray, locations: [0, 1])!,
            start: CGPoint(x: 187.5, y: -172.11),
            end: CGPoint(x: 187.5, y: 98.2),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.restoreGState()
        /// Rectangle 29
        let rectangle29 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 25))
        context.saveGState()
        context.translateBy(x: 2718, y: 1532)
        context.saveGState()
        rectangle29.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                    UIColor.white.cgColor,
                ] as CFArray, locations: [0, 1])!,
            start: CGPoint(x: 187.5, y: -553.56),
            end: CGPoint(x: 187.5, y: 100.72),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawProgressBackground(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 306, height: 126), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 306, height: 126), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 306, y: resizedFrame.height / 126)
        context.translateBy(x: -1518, y: -836)
        
        /// Group 8
        do {
            context.saveGState()
            context.translateBy(x: 1521, y: 837)
            
            /// Rectangle
            let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 300, height: 120), cornerRadius: 13.31)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.addRect(rectangle.bounds.insetBy(dx: -3, dy: -5))
            context.clip(using: .evenOdd)
            context.translateBy(x: -304, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 304, y: 2)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            rectangle.fill()
            context.restoreGState()
            context.saveGState()
            rectangle.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 313.38, y: 311.08),
                end: CGPoint(x: 255.64, y: 26.87),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 26
            let rectangle26 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 155, height: 1), cornerRadius: 8)
            context.saveGState()
            context.translateBy(x: 90.5, y: 50.5)
            context.scaleBy(x: 1, y: -1)
            context.rotate(by: 2 * CGFloat.pi)
            context.translateBy(x: -77.5, y: -0.5)
            UIColor(white: 0.793, alpha: 1).setFill()
            rectangle26.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawCreateRed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 108, height: 108), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 108, height: 108), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 108, y: resizedFrame.height / 108)
        context.translateBy(x: -3211, y: -836)
        
        /// CreateRed
        do {
            context.saveGState()
            context.translateBy(x: 3215, y: 837)
            
            /// Oval 7
            let oval7 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 100, height: 100))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(oval7.cgPath)
            context.addRect(oval7.bounds.insetBy(dx: -4, dy: -7))
            context.clip(using: .evenOdd)
            context.translateBy(x: -105, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 105, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            oval7.fill()
            context.restoreGState()
            context.saveGState()
            oval7.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 117.03, y: 171.37),
                end: CGPoint(x: 50, y: -11.2),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 35.36, y: 19.64))
            combinedShape.addLine(to: CGPoint(x: 35.36, y: 3.93))
            combinedShape.addCurve(to: CGPoint(x: 31.43, y: 0), controlPoint1: CGPoint(x: 35.36, y: 1.76), controlPoint2: CGPoint(x: 33.6, y: 0))
            combinedShape.addLine(to: CGPoint(x: 31.43, y: 0))
            combinedShape.addLine(to: CGPoint(x: 23.57, y: 0))
            combinedShape.addLine(to: CGPoint(x: 23.57, y: 0))
            combinedShape.addCurve(to: CGPoint(x: 19.64, y: 3.93), controlPoint1: CGPoint(x: 21.4, y: 0), controlPoint2: CGPoint(x: 19.64, y: 1.76))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 3.93))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 19.64))
            combinedShape.addLine(to: CGPoint(x: 3.93, y: 19.64))
            combinedShape.addCurve(to: CGPoint(x: 0, y: 23.57), controlPoint1: CGPoint(x: 1.76, y: 19.64), controlPoint2: CGPoint(x: 0, y: 21.4))
            combinedShape.addLine(to: CGPoint(x: 0, y: 23.57))
            combinedShape.addLine(to: CGPoint(x: 0, y: 31.43))
            combinedShape.addCurve(to: CGPoint(x: 3.93, y: 35.36), controlPoint1: CGPoint(x: 0, y: 33.6), controlPoint2: CGPoint(x: 1.76, y: 35.36))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 35.36))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 51.07))
            combinedShape.addCurve(to: CGPoint(x: 23.57, y: 55), controlPoint1: CGPoint(x: 19.64, y: 53.24), controlPoint2: CGPoint(x: 21.4, y: 55))
            combinedShape.addLine(to: CGPoint(x: 23.57, y: 55))
            combinedShape.addLine(to: CGPoint(x: 31.43, y: 55))
            combinedShape.addCurve(to: CGPoint(x: 35.36, y: 51.07), controlPoint1: CGPoint(x: 33.6, y: 55), controlPoint2: CGPoint(x: 35.36, y: 53.24))
            combinedShape.addLine(to: CGPoint(x: 35.36, y: 35.36))
            combinedShape.addLine(to: CGPoint(x: 51.07, y: 35.36))
            combinedShape.addCurve(to: CGPoint(x: 55, y: 31.43), controlPoint1: CGPoint(x: 53.24, y: 35.36), controlPoint2: CGPoint(x: 55, y: 33.6))
            combinedShape.addLine(to: CGPoint(x: 55, y: 23.57))
            combinedShape.addLine(to: CGPoint(x: 55, y: 23.57))
            combinedShape.addCurve(to: CGPoint(x: 51.07, y: 19.64), controlPoint1: CGPoint(x: 55, y: 21.4), controlPoint2: CGPoint(x: 53.24, y: 19.64))
            combinedShape.addLine(to: CGPoint(x: 35.36, y: 19.64))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 35.36, y: 19.64))
            context.saveGState()
            context.translateBy(x: 23, y: 24)
            combinedShape.usesEvenOddFillRule = true
            context.saveGState()
            combinedShape.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.985, saturation: 0.67, brightness: 0.961, alpha: 1).cgColor,
                        UIColor(hue: 0.975, saturation: 0.975, brightness: 0.624, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 11.6, y: 16.28),
                end: CGPoint(x: 45.04, y: 47.46),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawCreateOrange(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 108, height: 108), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 108, height: 108), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 108, y: resizedFrame.height / 108)
        context.translateBy(x: -3490, y: -710)
        
        /// CreateOrange
        do {
            context.saveGState()
            context.translateBy(x: 3494, y: 711)
            
            /// Oval 7
            let oval7 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 100, height: 100))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(oval7.cgPath)
            context.addRect(oval7.bounds.insetBy(dx: -4, dy: -7))
            context.clip(using: .evenOdd)
            context.translateBy(x: -105, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 105, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            oval7.fill()
            context.restoreGState()
            context.saveGState()
            oval7.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 117.03, y: 171.37),
                end: CGPoint(x: 50, y: -11.2),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 35.36, y: 19.64))
            combinedShape.addLine(to: CGPoint(x: 35.36, y: 3.93))
            combinedShape.addCurve(to: CGPoint(x: 31.43, y: 0), controlPoint1: CGPoint(x: 35.36, y: 1.76), controlPoint2: CGPoint(x: 33.6, y: 0))
            combinedShape.addLine(to: CGPoint(x: 31.43, y: 0))
            combinedShape.addLine(to: CGPoint(x: 23.57, y: 0))
            combinedShape.addLine(to: CGPoint(x: 23.57, y: 0))
            combinedShape.addCurve(to: CGPoint(x: 19.64, y: 3.93), controlPoint1: CGPoint(x: 21.4, y: 0), controlPoint2: CGPoint(x: 19.64, y: 1.76))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 3.93))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 19.64))
            combinedShape.addLine(to: CGPoint(x: 3.93, y: 19.64))
            combinedShape.addCurve(to: CGPoint(x: 0, y: 23.57), controlPoint1: CGPoint(x: 1.76, y: 19.64), controlPoint2: CGPoint(x: 0, y: 21.4))
            combinedShape.addLine(to: CGPoint(x: 0, y: 23.57))
            combinedShape.addLine(to: CGPoint(x: 0, y: 31.43))
            combinedShape.addCurve(to: CGPoint(x: 3.93, y: 35.36), controlPoint1: CGPoint(x: 0, y: 33.6), controlPoint2: CGPoint(x: 1.76, y: 35.36))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 35.36))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 51.07))
            combinedShape.addCurve(to: CGPoint(x: 23.57, y: 55), controlPoint1: CGPoint(x: 19.64, y: 53.24), controlPoint2: CGPoint(x: 21.4, y: 55))
            combinedShape.addLine(to: CGPoint(x: 23.57, y: 55))
            combinedShape.addLine(to: CGPoint(x: 31.43, y: 55))
            combinedShape.addCurve(to: CGPoint(x: 35.36, y: 51.07), controlPoint1: CGPoint(x: 33.6, y: 55), controlPoint2: CGPoint(x: 35.36, y: 53.24))
            combinedShape.addLine(to: CGPoint(x: 35.36, y: 35.36))
            combinedShape.addLine(to: CGPoint(x: 51.07, y: 35.36))
            combinedShape.addCurve(to: CGPoint(x: 55, y: 31.43), controlPoint1: CGPoint(x: 53.24, y: 35.36), controlPoint2: CGPoint(x: 55, y: 33.6))
            combinedShape.addLine(to: CGPoint(x: 55, y: 23.57))
            combinedShape.addLine(to: CGPoint(x: 55, y: 23.57))
            combinedShape.addCurve(to: CGPoint(x: 51.07, y: 19.64), controlPoint1: CGPoint(x: 55, y: 21.4), controlPoint2: CGPoint(x: 53.24, y: 19.64))
            combinedShape.addLine(to: CGPoint(x: 35.36, y: 19.64))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 35.36, y: 19.64))
            context.saveGState()
            context.translateBy(x: 23, y: 24)
            combinedShape.usesEvenOddFillRule = true
            context.saveGState()
            combinedShape.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.065, saturation: 0.935, brightness: 1, alpha: 1).cgColor,
                        UIColor(hue: 0.113, saturation: 0.866, brightness: 0.965, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 46.63, y: 49.73),
                end: CGPoint(x: 14.55, y: 27.5),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawCreateYellow(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 108, height: 108), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 108, height: 108), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 108, y: resizedFrame.height / 108)
        context.translateBy(x: -3371, y: -936)
        
        /// CreateYellow
        do {
            context.saveGState()
            context.translateBy(x: 3375, y: 937)
            
            /// Oval 7
            let oval7 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 100, height: 100))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(oval7.cgPath)
            context.addRect(oval7.bounds.insetBy(dx: -4, dy: -7))
            context.clip(using: .evenOdd)
            context.translateBy(x: -105, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 105, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            oval7.fill()
            context.restoreGState()
            context.saveGState()
            oval7.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 117.03, y: 171.37),
                end: CGPoint(x: 50, y: -11.2),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 35.36, y: 19.64))
            combinedShape.addLine(to: CGPoint(x: 35.36, y: 3.93))
            combinedShape.addCurve(to: CGPoint(x: 31.43, y: 0), controlPoint1: CGPoint(x: 35.36, y: 1.76), controlPoint2: CGPoint(x: 33.6, y: 0))
            combinedShape.addLine(to: CGPoint(x: 31.43, y: 0))
            combinedShape.addLine(to: CGPoint(x: 23.57, y: 0))
            combinedShape.addLine(to: CGPoint(x: 23.57, y: 0))
            combinedShape.addCurve(to: CGPoint(x: 19.64, y: 3.93), controlPoint1: CGPoint(x: 21.4, y: 0), controlPoint2: CGPoint(x: 19.64, y: 1.76))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 3.93))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 19.64))
            combinedShape.addLine(to: CGPoint(x: 3.93, y: 19.64))
            combinedShape.addCurve(to: CGPoint(x: 0, y: 23.57), controlPoint1: CGPoint(x: 1.76, y: 19.64), controlPoint2: CGPoint(x: 0, y: 21.4))
            combinedShape.addLine(to: CGPoint(x: 0, y: 23.57))
            combinedShape.addLine(to: CGPoint(x: 0, y: 31.43))
            combinedShape.addCurve(to: CGPoint(x: 3.93, y: 35.36), controlPoint1: CGPoint(x: 0, y: 33.6), controlPoint2: CGPoint(x: 1.76, y: 35.36))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 35.36))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 51.07))
            combinedShape.addCurve(to: CGPoint(x: 23.57, y: 55), controlPoint1: CGPoint(x: 19.64, y: 53.24), controlPoint2: CGPoint(x: 21.4, y: 55))
            combinedShape.addLine(to: CGPoint(x: 23.57, y: 55))
            combinedShape.addLine(to: CGPoint(x: 31.43, y: 55))
            combinedShape.addCurve(to: CGPoint(x: 35.36, y: 51.07), controlPoint1: CGPoint(x: 33.6, y: 55), controlPoint2: CGPoint(x: 35.36, y: 53.24))
            combinedShape.addLine(to: CGPoint(x: 35.36, y: 35.36))
            combinedShape.addLine(to: CGPoint(x: 51.07, y: 35.36))
            combinedShape.addCurve(to: CGPoint(x: 55, y: 31.43), controlPoint1: CGPoint(x: 53.24, y: 35.36), controlPoint2: CGPoint(x: 55, y: 33.6))
            combinedShape.addLine(to: CGPoint(x: 55, y: 23.57))
            combinedShape.addLine(to: CGPoint(x: 55, y: 23.57))
            combinedShape.addCurve(to: CGPoint(x: 51.07, y: 19.64), controlPoint1: CGPoint(x: 55, y: 21.4), controlPoint2: CGPoint(x: 53.24, y: 19.64))
            combinedShape.addLine(to: CGPoint(x: 35.36, y: 19.64))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 35.36, y: 19.64))
            context.saveGState()
            context.translateBy(x: 23, y: 24)
            combinedShape.usesEvenOddFillRule = true
            context.saveGState()
            combinedShape.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.116, saturation: 1, brightness: 1, alpha: 1).cgColor,
                        UIColor(hue: 0.159, saturation: 0.742, brightness: 1, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 44.49, y: 50.46),
                end: CGPoint(x: 15.88, y: 8.77),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawCreateGreen(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 108, height: 108), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 108, height: 108), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 108, y: resizedFrame.height / 108)
        context.translateBy(x: -3177, y: -1000)
        
        /// CreateGreen
        do {
            context.saveGState()
            context.translateBy(x: 3181, y: 1001)
            
            /// Oval 7
            let oval7 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 100, height: 100))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(oval7.cgPath)
            context.addRect(oval7.bounds.insetBy(dx: -4, dy: -7))
            context.clip(using: .evenOdd)
            context.translateBy(x: -105, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 105, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            oval7.fill()
            context.restoreGState()
            context.saveGState()
            oval7.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 117.03, y: 171.37),
                end: CGPoint(x: 50, y: -11.2),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 35.36, y: 19.64))
            combinedShape.addLine(to: CGPoint(x: 35.36, y: 3.93))
            combinedShape.addCurve(to: CGPoint(x: 31.43, y: 0), controlPoint1: CGPoint(x: 35.36, y: 1.76), controlPoint2: CGPoint(x: 33.6, y: 0))
            combinedShape.addLine(to: CGPoint(x: 31.43, y: 0))
            combinedShape.addLine(to: CGPoint(x: 23.57, y: 0))
            combinedShape.addLine(to: CGPoint(x: 23.57, y: 0))
            combinedShape.addCurve(to: CGPoint(x: 19.64, y: 3.93), controlPoint1: CGPoint(x: 21.4, y: 0), controlPoint2: CGPoint(x: 19.64, y: 1.76))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 3.93))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 19.64))
            combinedShape.addLine(to: CGPoint(x: 3.93, y: 19.64))
            combinedShape.addCurve(to: CGPoint(x: 0, y: 23.57), controlPoint1: CGPoint(x: 1.76, y: 19.64), controlPoint2: CGPoint(x: 0, y: 21.4))
            combinedShape.addLine(to: CGPoint(x: 0, y: 23.57))
            combinedShape.addLine(to: CGPoint(x: 0, y: 31.43))
            combinedShape.addCurve(to: CGPoint(x: 3.93, y: 35.36), controlPoint1: CGPoint(x: 0, y: 33.6), controlPoint2: CGPoint(x: 1.76, y: 35.36))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 35.36))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 51.07))
            combinedShape.addCurve(to: CGPoint(x: 23.57, y: 55), controlPoint1: CGPoint(x: 19.64, y: 53.24), controlPoint2: CGPoint(x: 21.4, y: 55))
            combinedShape.addLine(to: CGPoint(x: 23.57, y: 55))
            combinedShape.addLine(to: CGPoint(x: 31.43, y: 55))
            combinedShape.addCurve(to: CGPoint(x: 35.36, y: 51.07), controlPoint1: CGPoint(x: 33.6, y: 55), controlPoint2: CGPoint(x: 35.36, y: 53.24))
            combinedShape.addLine(to: CGPoint(x: 35.36, y: 35.36))
            combinedShape.addLine(to: CGPoint(x: 51.07, y: 35.36))
            combinedShape.addCurve(to: CGPoint(x: 55, y: 31.43), controlPoint1: CGPoint(x: 53.24, y: 35.36), controlPoint2: CGPoint(x: 55, y: 33.6))
            combinedShape.addLine(to: CGPoint(x: 55, y: 23.57))
            combinedShape.addLine(to: CGPoint(x: 55, y: 23.57))
            combinedShape.addCurve(to: CGPoint(x: 51.07, y: 19.64), controlPoint1: CGPoint(x: 55, y: 21.4), controlPoint2: CGPoint(x: 53.24, y: 19.64))
            combinedShape.addLine(to: CGPoint(x: 35.36, y: 19.64))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 35.36, y: 19.64))
            context.saveGState()
            context.translateBy(x: 23, y: 24)
            combinedShape.usesEvenOddFillRule = true
            context.saveGState()
            combinedShape.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.399, saturation: 1, brightness: 0.63, alpha: 1).cgColor,
                        UIColor(hue: 0.408, saturation: 0.975, brightness: 0.864, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 42.56, y: 47.86),
                end: CGPoint(x: 15.22, y: 21.56),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawProgressYellow(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 108, height: 108), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 108, height: 108), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 108, y: resizedFrame.height / 108)
        context.translateBy(x: -2947, y: -930)
        
        /// ProgressYellow
        do {
            context.saveGState()
            context.translateBy(x: 2951, y: 931)
            
            /// Oval 12
            let oval12 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 100, height: 100))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(oval12.cgPath)
            context.addRect(oval12.bounds.insetBy(dx: -4, dy: -7))
            context.clip(using: .evenOdd)
            context.translateBy(x: -105, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 105, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            oval12.fill()
            context.restoreGState()
            context.saveGState()
            oval12.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 117.03, y: 171.37),
                end: CGPoint(x: 50, y: -11.2),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Group 4
            do {
                context.saveGState()
                context.translateBy(x: 16.92, y: 13.85)
                
                /// Oval
                let oval = UIBezierPath()
                oval.move(to: CGPoint(x: 2.97, y: 18))
                oval.addCurve(to: CGPoint(x: 0, y: 31.47), controlPoint1: CGPoint(x: 1.07, y: 22.08), controlPoint2: CGPoint(x: 0, y: 26.65))
                oval.addCurve(to: CGPoint(x: 30.94, y: 62.94), controlPoint1: CGPoint(x: 0, y: 48.85), controlPoint2: CGPoint(x: 13.85, y: 62.94))
                oval.addLine(to: CGPoint(x: 30.94, y: 62.94))
                oval.addCurve(to: CGPoint(x: 61.89, y: 31.47), controlPoint1: CGPoint(x: 48.03, y: 62.94), controlPoint2: CGPoint(x: 61.89, y: 48.85))
                oval.addCurve(to: CGPoint(x: 30.94, y: 0), controlPoint1: CGPoint(x: 61.89, y: 14.09), controlPoint2: CGPoint(x: 48.03, y: 0))
                context.saveGState()
                context.translateBy(x: 2.13, y: 4.33)
                context.saveGState()
                oval.lineWidth = 3.46
                context.beginPath()
                context.addPath(oval.cgPath)
                context.setLineWidth(oval.lineWidth)
                context.setLineCap(oval.lineCapStyle)
                context.setLineJoin(oval.lineJoinStyle)
                context.setMiterLimit(oval.miterLimit)
                context.replacePathWithStrokedPath()
                context.clip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.116, saturation: 1, brightness: 1, alpha: 1).cgColor,
                            UIColor(hue: 0.159, saturation: 0.742, brightness: 1, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 51.51, y: 58.42),
                    end: CGPoint(x: 18.85, y: 6.7),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                /// Oval 4
                let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 8.54, height: 8.65))
                context.saveGState()
                context.translateBy(x: 28.17, y: 0)
                UIColor(hue: 0.159, saturation: 0.882, brightness: 1, alpha: 1).setFill()
                oval4.fill()
                context.restoreGState()
                
                /// Oval 4
                let oval16 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 8.54, height: 8.65))
                context.saveGState()
                context.translateBy(x: 1.28, y: 17.31)
                UIColor(hue: 0.159, saturation: 0.882, brightness: 1, alpha: 1).setFill()
                oval16.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 5.95, y: 10.34))
            combinedShape.addCurve(to: CGPoint(x: 4.35, y: 6.15), controlPoint1: CGPoint(x: 4.96, y: 9.24), controlPoint2: CGPoint(x: 4.35, y: 7.77))
            combinedShape.addCurve(to: CGPoint(x: 10.36, y: 0), controlPoint1: CGPoint(x: 4.35, y: 2.76), controlPoint2: CGPoint(x: 7.04, y: 0))
            combinedShape.addCurve(to: CGPoint(x: 16.38, y: 6.15), controlPoint1: CGPoint(x: 13.68, y: 0), controlPoint2: CGPoint(x: 16.38, y: 2.76))
            combinedShape.addCurve(to: CGPoint(x: 14.78, y: 10.33), controlPoint1: CGPoint(x: 16.38, y: 7.77), controlPoint2: CGPoint(x: 15.77, y: 9.23))
            combinedShape.addCurve(to: CGPoint(x: 20.91, y: 26.15), controlPoint1: CGPoint(x: 19.07, y: 12.75), controlPoint2: CGPoint(x: 20.91, y: 18.93))
            combinedShape.addCurve(to: CGPoint(x: 0, y: 26.15), controlPoint1: CGPoint(x: 12.06, y: 26.15), controlPoint2: CGPoint(x: 7.35, y: 26.15))
            combinedShape.addCurve(to: CGPoint(x: 5.95, y: 10.34), controlPoint1: CGPoint(x: 0, y: 18.93), controlPoint2: CGPoint(x: 1.72, y: 12.77))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 5.95, y: 10.34))
            context.saveGState()
            context.translateBy(x: 39.48, y: 35.38)
            combinedShape.usesEvenOddFillRule = true
            context.saveGState()
            combinedShape.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.116, saturation: 1, brightness: 1, alpha: 1).cgColor,
                        UIColor(hue: 0.159, saturation: 0.742, brightness: 1, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 20.91, y: 26.15),
                end: CGPoint(x: 5.9, y: 2.9),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawProgressRed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 108, height: 108), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 108, height: 108), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 108, y: resizedFrame.height / 108)
        context.translateBy(x: -2733, y: -950)
        
        /// ProgressRed
        do {
            context.saveGState()
            context.translateBy(x: 2737, y: 951)
            
            /// Oval 12
            let oval12 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 100, height: 100))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(oval12.cgPath)
            context.addRect(oval12.bounds.insetBy(dx: -4, dy: -7))
            context.clip(using: .evenOdd)
            context.translateBy(x: -105, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 105, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            oval12.fill()
            context.restoreGState()
            context.saveGState()
            oval12.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 117.03, y: 171.37),
                end: CGPoint(x: 50, y: -11.2),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Group 4
            do {
                context.saveGState()
                context.translateBy(x: 16.92, y: 13.85)
                
                /// Oval
                let oval = UIBezierPath()
                oval.move(to: CGPoint(x: 2.97, y: 18))
                oval.addCurve(to: CGPoint(x: 0, y: 31.47), controlPoint1: CGPoint(x: 1.07, y: 22.08), controlPoint2: CGPoint(x: 0, y: 26.65))
                oval.addCurve(to: CGPoint(x: 30.94, y: 62.94), controlPoint1: CGPoint(x: 0, y: 48.85), controlPoint2: CGPoint(x: 13.85, y: 62.94))
                oval.addLine(to: CGPoint(x: 30.94, y: 62.94))
                oval.addCurve(to: CGPoint(x: 61.89, y: 31.47), controlPoint1: CGPoint(x: 48.03, y: 62.94), controlPoint2: CGPoint(x: 61.89, y: 48.85))
                oval.addCurve(to: CGPoint(x: 30.94, y: 0), controlPoint1: CGPoint(x: 61.89, y: 14.09), controlPoint2: CGPoint(x: 48.03, y: 0))
                context.saveGState()
                context.translateBy(x: 2.13, y: 4.33)
                context.saveGState()
                oval.lineWidth = 3.46
                context.beginPath()
                context.addPath(oval.cgPath)
                context.setLineWidth(oval.lineWidth)
                context.setLineCap(oval.lineCapStyle)
                context.setLineJoin(oval.lineJoinStyle)
                context.setMiterLimit(oval.miterLimit)
                context.replacePathWithStrokedPath()
                context.clip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.985, saturation: 0.67, brightness: 0.961, alpha: 1).cgColor,
                            UIColor(hue: 0.975, saturation: 0.975, brightness: 0.624, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 20.34, y: 11.39),
                    end: CGPoint(x: 52.86, y: 58.26),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                /// Oval 4
                let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 8.54, height: 8.65))
                context.saveGState()
                context.translateBy(x: 28.17, y: 0)
                UIColor(hue: 0.988, saturation: 0.725, brightness: 0.969, alpha: 1).setFill()
                oval4.fill()
                context.restoreGState()
                
                /// Oval 4
                let oval16 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 8.54, height: 8.65))
                context.saveGState()
                context.translateBy(x: 1.28, y: 17.31)
                UIColor(hue: 0.988, saturation: 0.72, brightness: 0.965, alpha: 1).setFill()
                oval16.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 5.95, y: 10.34))
            combinedShape.addCurve(to: CGPoint(x: 4.35, y: 6.15), controlPoint1: CGPoint(x: 4.96, y: 9.24), controlPoint2: CGPoint(x: 4.35, y: 7.77))
            combinedShape.addCurve(to: CGPoint(x: 10.36, y: 0), controlPoint1: CGPoint(x: 4.35, y: 2.76), controlPoint2: CGPoint(x: 7.04, y: 0))
            combinedShape.addCurve(to: CGPoint(x: 16.38, y: 6.15), controlPoint1: CGPoint(x: 13.68, y: 0), controlPoint2: CGPoint(x: 16.38, y: 2.76))
            combinedShape.addCurve(to: CGPoint(x: 14.78, y: 10.33), controlPoint1: CGPoint(x: 16.38, y: 7.77), controlPoint2: CGPoint(x: 15.77, y: 9.23))
            combinedShape.addCurve(to: CGPoint(x: 20.91, y: 26.15), controlPoint1: CGPoint(x: 19.07, y: 12.75), controlPoint2: CGPoint(x: 20.91, y: 18.93))
            combinedShape.addCurve(to: CGPoint(x: 0, y: 26.15), controlPoint1: CGPoint(x: 12.06, y: 26.15), controlPoint2: CGPoint(x: 7.35, y: 26.15))
            combinedShape.addCurve(to: CGPoint(x: 5.95, y: 10.34), controlPoint1: CGPoint(x: 0, y: 18.93), controlPoint2: CGPoint(x: 1.72, y: 12.77))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 5.95, y: 10.34))
            context.saveGState()
            context.translateBy(x: 39.48, y: 35.38)
            combinedShape.usesEvenOddFillRule = true
            context.saveGState()
            combinedShape.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.985, saturation: 0.67, brightness: 0.961, alpha: 1).cgColor,
                        UIColor(hue: 0.975, saturation: 0.975, brightness: 0.624, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 3.57, y: 5.21),
                end: CGPoint(x: 20.91, y: 26.15),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawProgressGreen(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 108, height: 108), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 108, height: 108), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 108, y: resizedFrame.height / 108)
        context.translateBy(x: -2747, y: -786)
        
        /// ProgressGreen
        do {
            context.saveGState()
            context.translateBy(x: 2751, y: 787)
            
            /// Oval 12
            let oval12 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 100, height: 100))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(oval12.cgPath)
            context.addRect(oval12.bounds.insetBy(dx: -4, dy: -7))
            context.clip(using: .evenOdd)
            context.translateBy(x: -105, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 105, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            oval12.fill()
            context.restoreGState()
            context.saveGState()
            oval12.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 117.03, y: 171.37),
                end: CGPoint(x: 50, y: -11.2),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Group 4
            do {
                context.saveGState()
                context.translateBy(x: 16.92, y: 13.85)
                
                /// Oval
                let oval = UIBezierPath()
                oval.move(to: CGPoint(x: 2.97, y: 18))
                oval.addCurve(to: CGPoint(x: 0, y: 31.47), controlPoint1: CGPoint(x: 1.07, y: 22.08), controlPoint2: CGPoint(x: 0, y: 26.65))
                oval.addCurve(to: CGPoint(x: 30.94, y: 62.94), controlPoint1: CGPoint(x: 0, y: 48.85), controlPoint2: CGPoint(x: 13.85, y: 62.94))
                oval.addLine(to: CGPoint(x: 30.94, y: 62.94))
                oval.addCurve(to: CGPoint(x: 61.89, y: 31.47), controlPoint1: CGPoint(x: 48.03, y: 62.94), controlPoint2: CGPoint(x: 61.89, y: 48.85))
                oval.addCurve(to: CGPoint(x: 30.94, y: 0), controlPoint1: CGPoint(x: 61.89, y: 14.09), controlPoint2: CGPoint(x: 48.03, y: 0))
                context.saveGState()
                context.translateBy(x: 2.13, y: 4.33)
                context.saveGState()
                oval.lineWidth = 3.46
                context.beginPath()
                context.addPath(oval.cgPath)
                context.setLineWidth(oval.lineWidth)
                context.setLineCap(oval.lineCapStyle)
                context.setLineJoin(oval.lineJoinStyle)
                context.setMiterLimit(oval.miterLimit)
                context.replacePathWithStrokedPath()
                context.clip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.399, saturation: 1, brightness: 0.63, alpha: 1).cgColor,
                            UIColor(hue: 0.408, saturation: 0.975, brightness: 0.864, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 47.91, y: 58.47),
                    end: CGPoint(x: 16.38, y: 31.47),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                /// Oval 4
                let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 8.54, height: 8.65))
                context.saveGState()
                context.translateBy(x: 28.17, y: 0)
                UIColor(hue: 0.399, saturation: 1, brightness: 0.851, alpha: 1).setFill()
                oval4.fill()
                context.restoreGState()
                
                /// Oval 4
                let oval16 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 8.54, height: 8.65))
                context.saveGState()
                context.translateBy(x: 1.28, y: 17.31)
                UIColor(hue: 0.398, saturation: 1, brightness: 0.855, alpha: 1).setFill()
                oval16.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 5.95, y: 10.34))
            combinedShape.addCurve(to: CGPoint(x: 4.35, y: 6.15), controlPoint1: CGPoint(x: 4.96, y: 9.24), controlPoint2: CGPoint(x: 4.35, y: 7.77))
            combinedShape.addCurve(to: CGPoint(x: 10.36, y: 0), controlPoint1: CGPoint(x: 4.35, y: 2.76), controlPoint2: CGPoint(x: 7.04, y: 0))
            combinedShape.addCurve(to: CGPoint(x: 16.38, y: 6.15), controlPoint1: CGPoint(x: 13.68, y: 0), controlPoint2: CGPoint(x: 16.38, y: 2.76))
            combinedShape.addCurve(to: CGPoint(x: 14.78, y: 10.33), controlPoint1: CGPoint(x: 16.38, y: 7.77), controlPoint2: CGPoint(x: 15.77, y: 9.23))
            combinedShape.addCurve(to: CGPoint(x: 20.91, y: 26.15), controlPoint1: CGPoint(x: 19.07, y: 12.75), controlPoint2: CGPoint(x: 20.91, y: 18.93))
            combinedShape.addCurve(to: CGPoint(x: 0, y: 26.15), controlPoint1: CGPoint(x: 12.06, y: 26.15), controlPoint2: CGPoint(x: 7.35, y: 26.15))
            combinedShape.addCurve(to: CGPoint(x: 5.95, y: 10.34), controlPoint1: CGPoint(x: 0, y: 18.93), controlPoint2: CGPoint(x: 1.72, y: 12.77))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 5.95, y: 10.34))
            context.saveGState()
            context.translateBy(x: 39.48, y: 35.38)
            combinedShape.usesEvenOddFillRule = true
            context.saveGState()
            combinedShape.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.399, saturation: 1, brightness: 0.63, alpha: 1).cgColor,
                        UIColor(hue: 0.408, saturation: 0.975, brightness: 0.864, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 20.91, y: 26.15),
                end: CGPoint(x: 5.7, y: 6.09),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawProgressBlue(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 108, height: 108), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 108, height: 108), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 108, y: resizedFrame.height / 108)
        context.translateBy(x: -2947, y: -710)
        
        /// ProgressBlue
        do {
            context.saveGState()
            context.translateBy(x: 2951, y: 711)
            
            /// Oval 12
            let oval12 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 100, height: 100))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(oval12.cgPath)
            context.addRect(oval12.bounds.insetBy(dx: -4, dy: -7))
            context.clip(using: .evenOdd)
            context.translateBy(x: -105, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 105, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            oval12.fill()
            context.restoreGState()
            context.saveGState()
            oval12.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 117.03, y: 171.37),
                end: CGPoint(x: 50, y: -11.2),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Group 4
            do {
                context.saveGState()
                context.translateBy(x: 16.92, y: 13.85)
                
                /// Oval
                let oval = UIBezierPath()
                oval.move(to: CGPoint(x: 2.97, y: 18))
                oval.addCurve(to: CGPoint(x: 0, y: 31.47), controlPoint1: CGPoint(x: 1.07, y: 22.08), controlPoint2: CGPoint(x: 0, y: 26.65))
                oval.addCurve(to: CGPoint(x: 30.94, y: 62.94), controlPoint1: CGPoint(x: 0, y: 48.85), controlPoint2: CGPoint(x: 13.85, y: 62.94))
                oval.addLine(to: CGPoint(x: 30.94, y: 62.94))
                oval.addCurve(to: CGPoint(x: 61.89, y: 31.47), controlPoint1: CGPoint(x: 48.03, y: 62.94), controlPoint2: CGPoint(x: 61.89, y: 48.85))
                oval.addCurve(to: CGPoint(x: 30.94, y: 0), controlPoint1: CGPoint(x: 61.89, y: 14.09), controlPoint2: CGPoint(x: 48.03, y: 0))
                context.saveGState()
                context.translateBy(x: 2.13, y: 4.33)
                context.saveGState()
                oval.lineWidth = 3.46
                context.beginPath()
                context.addPath(oval.cgPath)
                context.setLineWidth(oval.lineWidth)
                context.setLineCap(oval.lineCapStyle)
                context.setLineJoin(oval.lineJoinStyle)
                context.setMiterLimit(oval.miterLimit)
                context.replacePathWithStrokedPath()
                context.clip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.59, saturation: 0.815, brightness: 0.608, alpha: 1).cgColor,
                            UIColor(hue: 0.527, saturation: 0.893, brightness: 0.846, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 72.58, y: 31.47),
                    end: CGPoint(x: 16.38, y: 31.47),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                /// Oval 4
                let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 8.54, height: 8.65))
                context.saveGState()
                context.translateBy(x: 28.17, y: 0)
                UIColor(hue: 0.542, saturation: 0.872, brightness: 0.769, alpha: 1).setFill()
                oval4.fill()
                context.restoreGState()
                
                /// Oval 4
                let oval16 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 8.54, height: 8.65))
                context.saveGState()
                context.translateBy(x: 1.28, y: 17.31)
                UIColor(hue: 0.527, saturation: 0.894, brightness: 0.847, alpha: 1).setFill()
                oval16.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 5.95, y: 10.34))
            combinedShape.addCurve(to: CGPoint(x: 4.35, y: 6.15), controlPoint1: CGPoint(x: 4.96, y: 9.24), controlPoint2: CGPoint(x: 4.35, y: 7.77))
            combinedShape.addCurve(to: CGPoint(x: 10.36, y: 0), controlPoint1: CGPoint(x: 4.35, y: 2.76), controlPoint2: CGPoint(x: 7.04, y: 0))
            combinedShape.addCurve(to: CGPoint(x: 16.38, y: 6.15), controlPoint1: CGPoint(x: 13.68, y: 0), controlPoint2: CGPoint(x: 16.38, y: 2.76))
            combinedShape.addCurve(to: CGPoint(x: 14.78, y: 10.33), controlPoint1: CGPoint(x: 16.38, y: 7.77), controlPoint2: CGPoint(x: 15.77, y: 9.23))
            combinedShape.addCurve(to: CGPoint(x: 20.91, y: 26.15), controlPoint1: CGPoint(x: 19.07, y: 12.75), controlPoint2: CGPoint(x: 20.91, y: 18.93))
            combinedShape.addCurve(to: CGPoint(x: 0, y: 26.15), controlPoint1: CGPoint(x: 12.06, y: 26.15), controlPoint2: CGPoint(x: 7.35, y: 26.15))
            combinedShape.addCurve(to: CGPoint(x: 5.95, y: 10.34), controlPoint1: CGPoint(x: 0, y: 18.93), controlPoint2: CGPoint(x: 1.72, y: 12.77))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 5.95, y: 10.34))
            context.saveGState()
            context.translateBy(x: 39.48, y: 35.38)
            combinedShape.usesEvenOddFillRule = true
            context.saveGState()
            combinedShape.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.59, saturation: 0.815, brightness: 0.608, alpha: 1).cgColor,
                        UIColor(hue: 0.527, saturation: 0.893, brightness: 0.846, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 29.6, y: 31.64),
                end: CGPoint(x: 5.53, y: 13.08),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawCreateBlue(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 108, height: 108), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 108, height: 108), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 108, y: resizedFrame.height / 108)
        context.translateBy(x: -3227, y: -710)
        
        /// CreateBlue
        do {
            context.saveGState()
            context.translateBy(x: 3231, y: 711)
            
            /// Oval 7
            let oval7 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 100, height: 100))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(oval7.cgPath)
            context.addRect(oval7.bounds.insetBy(dx: -4, dy: -7))
            context.clip(using: .evenOdd)
            context.translateBy(x: -105, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 105, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            oval7.fill()
            context.restoreGState()
            context.saveGState()
            oval7.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 117.03, y: 171.37),
                end: CGPoint(x: 50, y: -11.2),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 35.36, y: 19.64))
            combinedShape.addLine(to: CGPoint(x: 35.36, y: 3.93))
            combinedShape.addCurve(to: CGPoint(x: 31.43, y: 0), controlPoint1: CGPoint(x: 35.36, y: 1.76), controlPoint2: CGPoint(x: 33.6, y: 0))
            combinedShape.addLine(to: CGPoint(x: 31.43, y: 0))
            combinedShape.addLine(to: CGPoint(x: 23.57, y: 0))
            combinedShape.addLine(to: CGPoint(x: 23.57, y: 0))
            combinedShape.addCurve(to: CGPoint(x: 19.64, y: 3.93), controlPoint1: CGPoint(x: 21.4, y: 0), controlPoint2: CGPoint(x: 19.64, y: 1.76))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 3.93))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 19.64))
            combinedShape.addLine(to: CGPoint(x: 3.93, y: 19.64))
            combinedShape.addCurve(to: CGPoint(x: 0, y: 23.57), controlPoint1: CGPoint(x: 1.76, y: 19.64), controlPoint2: CGPoint(x: 0, y: 21.4))
            combinedShape.addLine(to: CGPoint(x: 0, y: 23.57))
            combinedShape.addLine(to: CGPoint(x: 0, y: 31.43))
            combinedShape.addCurve(to: CGPoint(x: 3.93, y: 35.36), controlPoint1: CGPoint(x: 0, y: 33.6), controlPoint2: CGPoint(x: 1.76, y: 35.36))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 35.36))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 51.07))
            combinedShape.addCurve(to: CGPoint(x: 23.57, y: 55), controlPoint1: CGPoint(x: 19.64, y: 53.24), controlPoint2: CGPoint(x: 21.4, y: 55))
            combinedShape.addLine(to: CGPoint(x: 23.57, y: 55))
            combinedShape.addLine(to: CGPoint(x: 31.43, y: 55))
            combinedShape.addCurve(to: CGPoint(x: 35.36, y: 51.07), controlPoint1: CGPoint(x: 33.6, y: 55), controlPoint2: CGPoint(x: 35.36, y: 53.24))
            combinedShape.addLine(to: CGPoint(x: 35.36, y: 35.36))
            combinedShape.addLine(to: CGPoint(x: 51.07, y: 35.36))
            combinedShape.addCurve(to: CGPoint(x: 55, y: 31.43), controlPoint1: CGPoint(x: 53.24, y: 35.36), controlPoint2: CGPoint(x: 55, y: 33.6))
            combinedShape.addLine(to: CGPoint(x: 55, y: 23.57))
            combinedShape.addLine(to: CGPoint(x: 55, y: 23.57))
            combinedShape.addCurve(to: CGPoint(x: 51.07, y: 19.64), controlPoint1: CGPoint(x: 55, y: 21.4), controlPoint2: CGPoint(x: 53.24, y: 19.64))
            combinedShape.addLine(to: CGPoint(x: 35.36, y: 19.64))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 35.36, y: 19.64))
            context.saveGState()
            context.translateBy(x: 23, y: 24)
            combinedShape.usesEvenOddFillRule = true
            context.saveGState()
            combinedShape.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.59, saturation: 0.815, brightness: 0.608, alpha: 1).cgColor,
                        UIColor(hue: 0.527, saturation: 0.893, brightness: 0.846, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 55, y: 55),
                end: CGPoint(x: 13.95, y: 14.45),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawCal(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 108, height: 108), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 108, height: 108), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 108, y: resizedFrame.height / 108)
        context.translateBy(x: -3352, y: -530)
        
        /// Cal
        do {
            context.saveGState()
            context.translateBy(x: 3356, y: 531)
            
            /// Oval 11
            let oval11 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 100, height: 100))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(oval11.cgPath)
            context.addRect(oval11.bounds.insetBy(dx: -4, dy: -7))
            context.clip(using: .evenOdd)
            context.translateBy(x: -105, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 105, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            oval11.fill()
            context.restoreGState()
            context.saveGState()
            oval11.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 117.03, y: 171.37),
                end: CGPoint(x: 50, y: -11.2),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 19
            let rectangle19 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 60.67, height: 42.44), cornerRadius: 2.58)
            context.saveGState()
            context.translateBy(x: 18.89, y: 23.56)
            UIColor(white: 0.521, alpha: 1).setFill()
            rectangle19.fill()
            context.restoreGState()
            
            /// Rectangle 13
            let rectangle13 = UIBezierPath()
            rectangle13.move(to: CGPoint(x: 4.16, y: 0))
            rectangle13.addCurve(to: CGPoint(x: 39.52, y: 0), controlPoint1: CGPoint(x: 15.94, y: 0), controlPoint2: CGPoint(x: 27.73, y: 0))
            rectangle13.addCurve(to: CGPoint(x: 61.15, y: 12.93), controlPoint1: CGPoint(x: 46.78, y: 0), controlPoint2: CGPoint(x: 41.14, y: 12.93))
            rectangle13.addCurve(to: CGPoint(x: 63.12, y: 12.93), controlPoint1: CGPoint(x: 61.8, y: 12.93), controlPoint2: CGPoint(x: 62.46, y: 12.93))
            rectangle13.addLine(to: CGPoint(x: 63.12, y: 12.93))
            rectangle13.addCurve(to: CGPoint(x: 64.52, y: 14.34), controlPoint1: CGPoint(x: 63.89, y: 12.93), controlPoint2: CGPoint(x: 64.52, y: 13.56))
            rectangle13.addLine(to: CGPoint(x: 64.52, y: 53.25))
            rectangle13.addLine(to: CGPoint(x: 64.52, y: 53.25))
            rectangle13.addCurve(to: CGPoint(x: 61.16, y: 56.6), controlPoint1: CGPoint(x: 64.52, y: 55.1), controlPoint2: CGPoint(x: 63.02, y: 56.6))
            rectangle13.addLine(to: CGPoint(x: 3.71, y: 56.6))
            rectangle13.addLine(to: CGPoint(x: 3.71, y: 56.6))
            rectangle13.addCurve(to: CGPoint(x: 0, y: 52.89), controlPoint1: CGPoint(x: 1.66, y: 56.6), controlPoint2: CGPoint(x: 0, y: 54.94))
            rectangle13.addLine(to: CGPoint(x: 0, y: 4.16))
            rectangle13.addLine(to: CGPoint(x: 0, y: 4.16))
            rectangle13.addCurve(to: CGPoint(x: 4.16, y: 0), controlPoint1: CGPoint(x: 0, y: 1.86), controlPoint2: CGPoint(x: 1.86, y: 0))
            rectangle13.close()
            rectangle13.move(to: CGPoint(x: 4.16, y: 0))
            context.saveGState()
            context.translateBy(x: 17.11, y: 20.89)
            rectangle13.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle13.cgPath)
            context.addRect(rectangle13.bounds.insetBy(dx: -1, dy: -1))
            context.clip(using: .evenOdd)
            context.translateBy(x: -66.52, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 66.52, y: 0)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 1 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1).cgColor)
            }
            UIColor.black.setFill()
            rectangle13.fill()
            context.restoreGState()
            rectangle13.usesEvenOddFillRule = true
            UIColor.white.setFill()
            rectangle13.fill()
            context.restoreGState()
            
            /// Rectangle 21
            let rectangle21 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 6.44, height: 4.44), cornerRadius: 0.53)
            context.saveGState()
            context.translateBy(x: 36.44, y: 66)
            UIColor(hue: 0.444, saturation: 0.014, brightness: 0.847, alpha: 1).setFill()
            rectangle21.fill()
            context.restoreGState()
            
            /// Rectangle 21
            let rectangle32 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 6.44, height: 4.44), cornerRadius: 0.53)
            context.saveGState()
            context.translateBy(x: 26.89, y: 66)
            UIColor(hue: 0.444, saturation: 0.014, brightness: 0.847, alpha: 1).setFill()
            rectangle32.fill()
            context.restoreGState()
            
            /// Rectangle 21
            let rectangle33 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 6.44, height: 4.44), cornerRadius: 0.53)
            context.saveGState()
            context.translateBy(x: 65.56, y: 57.11)
            UIColor(hue: 0.108, saturation: 1, brightness: 1, alpha: 1).setFill()
            rectangle33.fill()
            context.restoreGState()
            
            /// Rectangle 21
            let rectangle34 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 6.44, height: 4.44), cornerRadius: 0.53)
            context.saveGState()
            context.translateBy(x: 65.56, y: 42.67)
            UIColor(hue: 0.736, saturation: 0.763, brightness: 0.925, alpha: 1).setFill()
            rectangle34.fill()
            context.restoreGState()
            
            /// Rectangle 21
            let rectangle35 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 6.44, height: 4.44), cornerRadius: 0.53)
            context.saveGState()
            context.translateBy(x: 65.56, y: 49.56)
            UIColor(hue: 0.529, saturation: 0.976, brightness: 0.976, alpha: 1).setFill()
            rectangle35.fill()
            context.restoreGState()
            
            /// Rectangle 21
            let rectangle36 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 6.44, height: 4.44), cornerRadius: 0.53)
            context.saveGState()
            context.translateBy(x: 56, y: 57.11)
            UIColor(hue: 0.143, saturation: 0.906, brightness: 0.98, alpha: 1).setFill()
            rectangle36.fill()
            context.restoreGState()
            
            /// Rectangle 21
            let rectangle37 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 6.44, height: 4.44), cornerRadius: 0.53)
            context.saveGState()
            context.translateBy(x: 56, y: 49.56)
            UIColor(hue: 0.357, saturation: 0.811, brightness: 0.769, alpha: 1).setFill()
            rectangle37.fill()
            context.restoreGState()
            
            /// Rectangle 21
            let rectangle38 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 6.44, height: 4.44), cornerRadius: 0.53)
            context.saveGState()
            context.translateBy(x: 56, y: 42.67)
            UIColor(hue: 0.981, saturation: 0.773, brightness: 1, alpha: 1).setFill()
            rectangle38.fill()
            context.restoreGState()
            
            /// CAL
            let cAL = NSMutableAttributedString(string: "CAL")
            cAL.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "EurostileBold", size: 13)!, range: NSRange(location: 0, length: cAL.length))
            cAL.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor(white: 0.184, alpha: 1), range: NSRange(location: 0, length: cAL.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                cAL.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: cAL.length))
            }
            context.saveGState()
            cAL.draw(in: CGRect(x: 26.22, y: 23, width: 26.55, height: 18))
            context.restoreGState()
            
            /// Rectangle 21
            let rectangle39 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 6.44, height: 4.44), cornerRadius: 0.53)
            context.saveGState()
            context.translateBy(x: 26.89, y: 57.33)
            UIColor(hue: 0.444, saturation: 0.014, brightness: 0.847, alpha: 1).setFill()
            rectangle39.fill()
            context.restoreGState()
            
            /// Rectangle 21
            let rectangle40 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 6.44, height: 4.44), cornerRadius: 0.53)
            context.saveGState()
            context.translateBy(x: 26.89, y: 49.33)
            UIColor(hue: 0.444, saturation: 0.014, brightness: 0.847, alpha: 1).setFill()
            rectangle40.fill()
            context.restoreGState()
            
            /// Rectangle 21
            let rectangle41 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 6.44, height: 4.44), cornerRadius: 0.53)
            context.saveGState()
            context.translateBy(x: 36.44, y: 42.67)
            UIColor(hue: 0.444, saturation: 0.014, brightness: 0.847, alpha: 1).setFill()
            rectangle41.fill()
            context.restoreGState()
            
            /// Rectangle 21
            let rectangle42 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 6.44, height: 4.44), cornerRadius: 0.53)
            context.saveGState()
            context.translateBy(x: 36.44, y: 49.33)
            UIColor(hue: 0.444, saturation: 0.014, brightness: 0.847, alpha: 1).setFill()
            rectangle42.fill()
            context.restoreGState()
            
            /// Rectangle 21
            let rectangle43 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 6.44, height: 4.44), cornerRadius: 0.53)
            context.saveGState()
            context.translateBy(x: 36.44, y: 57.33)
            UIColor(hue: 0.444, saturation: 0.014, brightness: 0.847, alpha: 1).setFill()
            rectangle43.fill()
            context.restoreGState()
            
            /// Rectangle 21
            let rectangle44 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 6.44, height: 4.44), cornerRadius: 0.53)
            context.saveGState()
            context.translateBy(x: 46, y: 49.11)
            UIColor(hue: 0.444, saturation: 0.014, brightness: 0.847, alpha: 1).setFill()
            rectangle44.fill()
            context.restoreGState()
            
            /// Rectangle 21
            let rectangle45 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 6.44, height: 4.44), cornerRadius: 0.53)
            context.saveGState()
            context.translateBy(x: 46, y: 57.33)
            UIColor(hue: 0.444, saturation: 0.014, brightness: 0.847, alpha: 1).setFill()
            rectangle45.fill()
            context.restoreGState()
            
            /// Rectangle 21
            let rectangle46 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 6.44, height: 4.44), cornerRadius: 0.53)
            context.saveGState()
            context.translateBy(x: 46.22, y: 42.67)
            UIColor(hue: 0.444, saturation: 0.014, brightness: 0.847, alpha: 1).setFill()
            rectangle46.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawCreatePurple(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 108, height: 108), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 108, height: 108), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 108, y: resizedFrame.height / 108)
        context.translateBy(x: -3139, y: -515)
        
        /// CreatePurple
        do {
            context.saveGState()
            context.translateBy(x: 3143, y: 516)
            
            /// Oval 7
            let oval7 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 100, height: 100))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(oval7.cgPath)
            context.addRect(oval7.bounds.insetBy(dx: -4, dy: -7))
            context.clip(using: .evenOdd)
            context.translateBy(x: -105, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 105, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            oval7.fill()
            context.restoreGState()
            context.saveGState()
            oval7.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 117.03, y: 171.37),
                end: CGPoint(x: 50, y: -11.2),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 35.36, y: 19.64))
            combinedShape.addLine(to: CGPoint(x: 35.36, y: 3.93))
            combinedShape.addCurve(to: CGPoint(x: 31.43, y: 0), controlPoint1: CGPoint(x: 35.36, y: 1.76), controlPoint2: CGPoint(x: 33.6, y: 0))
            combinedShape.addLine(to: CGPoint(x: 31.43, y: 0))
            combinedShape.addLine(to: CGPoint(x: 23.57, y: 0))
            combinedShape.addLine(to: CGPoint(x: 23.57, y: 0))
            combinedShape.addCurve(to: CGPoint(x: 19.64, y: 3.93), controlPoint1: CGPoint(x: 21.4, y: 0), controlPoint2: CGPoint(x: 19.64, y: 1.76))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 3.93))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 19.64))
            combinedShape.addLine(to: CGPoint(x: 3.93, y: 19.64))
            combinedShape.addCurve(to: CGPoint(x: 0, y: 23.57), controlPoint1: CGPoint(x: 1.76, y: 19.64), controlPoint2: CGPoint(x: 0, y: 21.4))
            combinedShape.addLine(to: CGPoint(x: 0, y: 23.57))
            combinedShape.addLine(to: CGPoint(x: 0, y: 31.43))
            combinedShape.addCurve(to: CGPoint(x: 3.93, y: 35.36), controlPoint1: CGPoint(x: 0, y: 33.6), controlPoint2: CGPoint(x: 1.76, y: 35.36))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 35.36))
            combinedShape.addLine(to: CGPoint(x: 19.64, y: 51.07))
            combinedShape.addCurve(to: CGPoint(x: 23.57, y: 55), controlPoint1: CGPoint(x: 19.64, y: 53.24), controlPoint2: CGPoint(x: 21.4, y: 55))
            combinedShape.addLine(to: CGPoint(x: 23.57, y: 55))
            combinedShape.addLine(to: CGPoint(x: 31.43, y: 55))
            combinedShape.addCurve(to: CGPoint(x: 35.36, y: 51.07), controlPoint1: CGPoint(x: 33.6, y: 55), controlPoint2: CGPoint(x: 35.36, y: 53.24))
            combinedShape.addLine(to: CGPoint(x: 35.36, y: 35.36))
            combinedShape.addLine(to: CGPoint(x: 51.07, y: 35.36))
            combinedShape.addCurve(to: CGPoint(x: 55, y: 31.43), controlPoint1: CGPoint(x: 53.24, y: 35.36), controlPoint2: CGPoint(x: 55, y: 33.6))
            combinedShape.addLine(to: CGPoint(x: 55, y: 23.57))
            combinedShape.addLine(to: CGPoint(x: 55, y: 23.57))
            combinedShape.addCurve(to: CGPoint(x: 51.07, y: 19.64), controlPoint1: CGPoint(x: 55, y: 21.4), controlPoint2: CGPoint(x: 53.24, y: 19.64))
            combinedShape.addLine(to: CGPoint(x: 35.36, y: 19.64))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 35.36, y: 19.64))
            context.saveGState()
            context.translateBy(x: 23, y: 24)
            combinedShape.usesEvenOddFillRule = true
            context.saveGState()
            combinedShape.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.763, saturation: 0.63, brightness: 0.616, alpha: 1).cgColor,
                        UIColor(hue: 0.728, saturation: 0.565, brightness: 1, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 46.28, y: 46.49),
                end: CGPoint(x: 14.55, y: 27.5),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawProgressPurple(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 108, height: 108), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 108, height: 108), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 108, y: resizedFrame.height / 108)
        context.translateBy(x: -2847, y: -501)
        
        /// ProgressPurple
        do {
            context.saveGState()
            context.translateBy(x: 2851, y: 502)
            
            /// Oval 12
            let oval12 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 100, height: 100))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(oval12.cgPath)
            context.addRect(oval12.bounds.insetBy(dx: -4, dy: -7))
            context.clip(using: .evenOdd)
            context.translateBy(x: -105, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 105, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            oval12.fill()
            context.restoreGState()
            context.saveGState()
            oval12.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 117.03, y: 171.37),
                end: CGPoint(x: 50, y: -11.2),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Group 4
            do {
                context.saveGState()
                context.translateBy(x: 16.92, y: 13.85)
                
                /// Oval
                let oval = UIBezierPath()
                oval.move(to: CGPoint(x: 2.97, y: 18))
                oval.addCurve(to: CGPoint(x: 0, y: 31.47), controlPoint1: CGPoint(x: 1.07, y: 22.08), controlPoint2: CGPoint(x: 0, y: 26.65))
                oval.addCurve(to: CGPoint(x: 30.94, y: 62.94), controlPoint1: CGPoint(x: 0, y: 48.85), controlPoint2: CGPoint(x: 13.85, y: 62.94))
                oval.addLine(to: CGPoint(x: 30.94, y: 62.94))
                oval.addCurve(to: CGPoint(x: 61.89, y: 31.47), controlPoint1: CGPoint(x: 48.03, y: 62.94), controlPoint2: CGPoint(x: 61.89, y: 48.85))
                oval.addCurve(to: CGPoint(x: 30.94, y: 0), controlPoint1: CGPoint(x: 61.89, y: 14.09), controlPoint2: CGPoint(x: 48.03, y: 0))
                context.saveGState()
                context.translateBy(x: 2.13, y: 4.33)
                context.saveGState()
                oval.lineWidth = 3.46
                context.beginPath()
                context.addPath(oval.cgPath)
                context.setLineWidth(oval.lineWidth)
                context.setLineCap(oval.lineCapStyle)
                context.setLineJoin(oval.lineJoinStyle)
                context.setMiterLimit(oval.miterLimit)
                context.replacePathWithStrokedPath()
                context.clip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.763, saturation: 0.63, brightness: 0.616, alpha: 1).cgColor,
                            UIColor(hue: 0.728, saturation: 0.565, brightness: 1, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 61.89, y: 62.94),
                    end: CGPoint(x: 16.38, y: 31.47),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                /// Oval 4
                let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 8.54, height: 8.65))
                context.saveGState()
                context.translateBy(x: 28.17, y: 0)
                UIColor(hue: 0.728, saturation: 0.547, brightness: 0.979, alpha: 1).setFill()
                oval4.fill()
                context.restoreGState()
                
                /// Oval 4
                let oval16 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 8.54, height: 8.65))
                context.saveGState()
                context.translateBy(x: 1.28, y: 17.31)
                UIColor(hue: 0.729, saturation: 0.541, brightness: 0.991, alpha: 1).setFill()
                oval16.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 5.95, y: 10.34))
            combinedShape.addCurve(to: CGPoint(x: 4.35, y: 6.15), controlPoint1: CGPoint(x: 4.96, y: 9.24), controlPoint2: CGPoint(x: 4.35, y: 7.77))
            combinedShape.addCurve(to: CGPoint(x: 10.36, y: 0), controlPoint1: CGPoint(x: 4.35, y: 2.76), controlPoint2: CGPoint(x: 7.04, y: 0))
            combinedShape.addCurve(to: CGPoint(x: 16.38, y: 6.15), controlPoint1: CGPoint(x: 13.68, y: 0), controlPoint2: CGPoint(x: 16.38, y: 2.76))
            combinedShape.addCurve(to: CGPoint(x: 14.78, y: 10.33), controlPoint1: CGPoint(x: 16.38, y: 7.77), controlPoint2: CGPoint(x: 15.77, y: 9.23))
            combinedShape.addCurve(to: CGPoint(x: 20.91, y: 26.15), controlPoint1: CGPoint(x: 19.07, y: 12.75), controlPoint2: CGPoint(x: 20.91, y: 18.93))
            combinedShape.addCurve(to: CGPoint(x: 0, y: 26.15), controlPoint1: CGPoint(x: 12.06, y: 26.15), controlPoint2: CGPoint(x: 7.35, y: 26.15))
            combinedShape.addCurve(to: CGPoint(x: 5.95, y: 10.34), controlPoint1: CGPoint(x: 0, y: 18.93), controlPoint2: CGPoint(x: 1.72, y: 12.77))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 5.95, y: 10.34))
            context.saveGState()
            context.translateBy(x: 39.48, y: 35.38)
            combinedShape.usesEvenOddFillRule = true
            context.saveGState()
            combinedShape.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.763, saturation: 0.63, brightness: 0.616, alpha: 1).cgColor,
                        UIColor(hue: 0.728, saturation: 0.565, brightness: 1, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 20.91, y: 26.15),
                end: CGPoint(x: 5.53, y: 13.08),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawProgressOrange(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 108, height: 108), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 108, height: 108), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 108, y: resizedFrame.height / 108)
        context.translateBy(x: -2769, y: -660)
        
        /// ProgressOrange
        do {
            context.saveGState()
            context.translateBy(x: 2773, y: 661)
            
            /// Oval 12
            let oval12 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 100, height: 100))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(oval12.cgPath)
            context.addRect(oval12.bounds.insetBy(dx: -4, dy: -7))
            context.clip(using: .evenOdd)
            context.translateBy(x: -105, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 105, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            oval12.fill()
            context.restoreGState()
            context.saveGState()
            oval12.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 117.03, y: 171.37),
                end: CGPoint(x: 50, y: -11.2),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Group 4
            do {
                context.saveGState()
                context.translateBy(x: 16.92, y: 13.85)
                
                /// Oval
                let oval = UIBezierPath()
                oval.move(to: CGPoint(x: 2.97, y: 18))
                oval.addCurve(to: CGPoint(x: 0, y: 31.47), controlPoint1: CGPoint(x: 1.07, y: 22.08), controlPoint2: CGPoint(x: 0, y: 26.65))
                oval.addCurve(to: CGPoint(x: 30.94, y: 62.94), controlPoint1: CGPoint(x: 0, y: 48.85), controlPoint2: CGPoint(x: 13.85, y: 62.94))
                oval.addLine(to: CGPoint(x: 30.94, y: 62.94))
                oval.addCurve(to: CGPoint(x: 61.89, y: 31.47), controlPoint1: CGPoint(x: 48.03, y: 62.94), controlPoint2: CGPoint(x: 61.89, y: 48.85))
                oval.addCurve(to: CGPoint(x: 30.94, y: 0), controlPoint1: CGPoint(x: 61.89, y: 14.09), controlPoint2: CGPoint(x: 48.03, y: 0))
                context.saveGState()
                context.translateBy(x: 2.13, y: 4.33)
                context.saveGState()
                oval.lineWidth = 3.46
                context.beginPath()
                context.addPath(oval.cgPath)
                context.setLineWidth(oval.lineWidth)
                context.setLineCap(oval.lineCapStyle)
                context.setLineJoin(oval.lineJoinStyle)
                context.setMiterLimit(oval.miterLimit)
                context.replacePathWithStrokedPath()
                context.clip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.065, saturation: 0.935, brightness: 1, alpha: 1).cgColor,
                            UIColor(hue: 0.113, saturation: 0.866, brightness: 0.965, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 61.89, y: 62.94),
                    end: CGPoint(x: 16.38, y: 31.47),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                /// Oval 4
                let oval4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 8.54, height: 8.65))
                context.saveGState()
                context.translateBy(x: 28.17, y: 0)
                UIColor(hue: 0.118, saturation: 1, brightness: 0.976, alpha: 1).setFill()
                oval4.fill()
                context.restoreGState()
                
                /// Oval 4
                let oval16 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 8.54, height: 8.65))
                context.saveGState()
                context.translateBy(x: 1.28, y: 17.31)
                UIColor(hue: 0.116, saturation: 1, brightness: 1, alpha: 1).setFill()
                oval16.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 5.95, y: 10.34))
            combinedShape.addCurve(to: CGPoint(x: 4.35, y: 6.15), controlPoint1: CGPoint(x: 4.96, y: 9.24), controlPoint2: CGPoint(x: 4.35, y: 7.77))
            combinedShape.addCurve(to: CGPoint(x: 10.36, y: 0), controlPoint1: CGPoint(x: 4.35, y: 2.76), controlPoint2: CGPoint(x: 7.04, y: 0))
            combinedShape.addCurve(to: CGPoint(x: 16.38, y: 6.15), controlPoint1: CGPoint(x: 13.68, y: 0), controlPoint2: CGPoint(x: 16.38, y: 2.76))
            combinedShape.addCurve(to: CGPoint(x: 14.78, y: 10.33), controlPoint1: CGPoint(x: 16.38, y: 7.77), controlPoint2: CGPoint(x: 15.77, y: 9.23))
            combinedShape.addCurve(to: CGPoint(x: 20.91, y: 26.15), controlPoint1: CGPoint(x: 19.07, y: 12.75), controlPoint2: CGPoint(x: 20.91, y: 18.93))
            combinedShape.addCurve(to: CGPoint(x: 0, y: 26.15), controlPoint1: CGPoint(x: 12.06, y: 26.15), controlPoint2: CGPoint(x: 7.35, y: 26.15))
            combinedShape.addCurve(to: CGPoint(x: 5.95, y: 10.34), controlPoint1: CGPoint(x: 0, y: 18.93), controlPoint2: CGPoint(x: 1.72, y: 12.77))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 5.95, y: 10.34))
            context.saveGState()
            context.translateBy(x: 39.48, y: 35.38)
            combinedShape.usesEvenOddFillRule = true
            context.saveGState()
            combinedShape.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.065, saturation: 0.935, brightness: 1, alpha: 1).cgColor,
                        UIColor(hue: 0.113, saturation: 0.866, brightness: 0.965, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 20.91, y: 26.15),
                end: CGPoint(x: 5.53, y: 13.08),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawRightButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 14, height: 17), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 14, height: 17), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 14, y: resizedFrame.height / 17)
        context.translateBy(x: -2344, y: -1520)
        
        /// rightButton
        let rightButton = UIBezierPath()
        rightButton.move(to: CGPoint(x: 13.83, y: 2.33))
        rightButton.addLine(to: CGPoint(x: 10.98, y: 7.64))
        rightButton.addLine(to: CGPoint(x: 13.76, y: 12.64))
        rightButton.addLine(to: CGPoint(x: 13.76, y: 12.64))
        rightButton.addCurve(to: CGPoint(x: 13.13, y: 14.84), controlPoint1: CGPoint(x: 14.19, y: 13.42), controlPoint2: CGPoint(x: 13.91, y: 14.4))
        rightButton.addCurve(to: CGPoint(x: 11.58, y: 14.84), controlPoint1: CGPoint(x: 12.65, y: 15.1), controlPoint2: CGPoint(x: 12.06, y: 15.11))
        rightButton.addLine(to: CGPoint(x: 0.86, y: 9.04))
        rightButton.addLine(to: CGPoint(x: 0.86, y: 9.04))
        rightButton.addCurve(to: CGPoint(x: 0.21, y: 6.85), controlPoint1: CGPoint(x: 0.08, y: 8.61), controlPoint2: CGPoint(x: -0.21, y: 7.63))
        rightButton.addCurve(to: CGPoint(x: 0.84, y: 6.21), controlPoint1: CGPoint(x: 0.36, y: 6.58), controlPoint2: CGPoint(x: 0.58, y: 6.36))
        rightButton.addLine(to: CGPoint(x: 11.62, y: 0.16))
        rightButton.addLine(to: CGPoint(x: 11.62, y: 0.16))
        rightButton.addCurve(to: CGPoint(x: 13.81, y: 0.78), controlPoint1: CGPoint(x: 12.39, y: -0.27), controlPoint2: CGPoint(x: 13.38, y: 0.01))
        rightButton.addCurve(to: CGPoint(x: 13.83, y: 2.33), controlPoint1: CGPoint(x: 14.08, y: 1.26), controlPoint2: CGPoint(x: 14.09, y: 1.85))
        rightButton.close()
        rightButton.move(to: CGPoint(x: 13.83, y: 2.33))
        context.saveGState()
        context.translateBy(x: 2351, y: 1528.5)
        context.scaleBy(x: -1, y: 1)
        context.rotate(by: 2 * CGFloat.pi)
        context.translateBy(x: -7, y: -7.5)
        rightButton.usesEvenOddFillRule = true
        UIColor(white: 0.184, alpha: 1).setFill()
        rightButton.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawLeftButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 14, height: 17), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 14, height: 17), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 14, y: resizedFrame.height / 17)
        context.translateBy(x: -2261, y: -1520)
        
        /// leftButton
        let leftButton = UIBezierPath()
        leftButton.move(to: CGPoint(x: 13.83, y: 2.33))
        leftButton.addLine(to: CGPoint(x: 10.98, y: 7.64))
        leftButton.addLine(to: CGPoint(x: 13.76, y: 12.64))
        leftButton.addLine(to: CGPoint(x: 13.76, y: 12.64))
        leftButton.addCurve(to: CGPoint(x: 13.13, y: 14.84), controlPoint1: CGPoint(x: 14.19, y: 13.42), controlPoint2: CGPoint(x: 13.91, y: 14.4))
        leftButton.addCurve(to: CGPoint(x: 11.58, y: 14.84), controlPoint1: CGPoint(x: 12.65, y: 15.1), controlPoint2: CGPoint(x: 12.06, y: 15.11))
        leftButton.addLine(to: CGPoint(x: 0.86, y: 9.04))
        leftButton.addLine(to: CGPoint(x: 0.86, y: 9.04))
        leftButton.addCurve(to: CGPoint(x: 0.21, y: 6.85), controlPoint1: CGPoint(x: 0.08, y: 8.61), controlPoint2: CGPoint(x: -0.21, y: 7.63))
        leftButton.addCurve(to: CGPoint(x: 0.84, y: 6.21), controlPoint1: CGPoint(x: 0.36, y: 6.58), controlPoint2: CGPoint(x: 0.58, y: 6.36))
        leftButton.addLine(to: CGPoint(x: 11.62, y: 0.16))
        leftButton.addLine(to: CGPoint(x: 11.62, y: 0.16))
        leftButton.addCurve(to: CGPoint(x: 13.81, y: 0.78), controlPoint1: CGPoint(x: 12.39, y: -0.27), controlPoint2: CGPoint(x: 13.38, y: 0.01))
        leftButton.addCurve(to: CGPoint(x: 13.83, y: 2.33), controlPoint1: CGPoint(x: 14.08, y: 1.26), controlPoint2: CGPoint(x: 14.09, y: 1.85))
        leftButton.close()
        leftButton.move(to: CGPoint(x: 13.83, y: 2.33))
        context.saveGState()
        context.translateBy(x: 2261, y: 1521)
        leftButton.usesEvenOddFillRule = true
        UIColor(white: 0.184, alpha: 1).setFill()
        leftButton.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawRClass5Tag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 94, height: 35), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 94, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 94, y: resizedFrame.height / 35)
        context.translateBy(x: -2329, y: -1912)
        
        /// RClass5Tag
        do {
            context.saveGState()
            context.translateBy(x: 2329, y: 1912)
            
            /// YellowClassTag
            let yellowClassTag = UIBezierPath()
            yellowClassTag.move(to: CGPoint(x: 2, y: 0))
            yellowClassTag.addLine(to: CGPoint(x: 93.92, y: 0))
            yellowClassTag.addLine(to: CGPoint(x: 93.92, y: 35))
            yellowClassTag.addLine(to: CGPoint(x: 2, y: 35))
            yellowClassTag.addLine(to: CGPoint(x: 2, y: 35))
            yellowClassTag.addCurve(to: CGPoint(x: 0, y: 33), controlPoint1: CGPoint(x: 0.9, y: 35), controlPoint2: CGPoint(x: 0, y: 34.1))
            yellowClassTag.addCurve(to: CGPoint(x: 0.17, y: 32.19), controlPoint1: CGPoint(x: 0, y: 32.72), controlPoint2: CGPoint(x: 0.06, y: 32.44))
            yellowClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            yellowClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            yellowClassTag.addCurve(to: CGPoint(x: 6.33, y: 16.69), controlPoint1: CGPoint(x: 6.56, y: 17.79), controlPoint2: CGPoint(x: 6.56, y: 17.21))
            yellowClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            yellowClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            yellowClassTag.addCurve(to: CGPoint(x: 1.19, y: 0.17), controlPoint1: CGPoint(x: -0.28, y: 1.8), controlPoint2: CGPoint(x: 0.18, y: 0.62))
            yellowClassTag.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 1.44, y: 0.06), controlPoint2: CGPoint(x: 1.72, y: 0))
            yellowClassTag.close()
            yellowClassTag.move(to: CGPoint(x: 2, y: 0))
            context.saveGState()
            context.translateBy(x: 46.96, y: 17.5)
            context.scaleBy(x: -1, y: 1)
            context.rotate(by: 2 * CGFloat.pi)
            context.translateBy(x: -46.96, y: -17.5)
            yellowClassTag.usesEvenOddFillRule = true
            context.saveGState()
            yellowClassTag.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.116, saturation: 1, brightness: 1, alpha: 1).cgColor,
                        UIColor(hue: 0.159, saturation: 0.742, brightness: 1, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 46.96, y: 35),
                end: CGPoint(x: 46.96, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Class 5
            let class5 = NSMutableAttributedString(string: "Class 5")
            class5.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "ArialRoundedMTBold", size: 13.98)!, range: NSRange(location: 0, length: class5.length))
            class5.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor(white: 0.184, alpha: 1), range: NSRange(location: 0, length: class5.length))
            class5.addAttribute(NSAttributedStringKey.kern, value: -0.24, range: NSRange(location: 0, length: class5.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                class5.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: class5.length))
            }
            context.saveGState()
            class5.draw(in: CGRect(x: 10, y: 8, width: 73.27, height: 18))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawRClass1ATag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 94, height: 35), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 94, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 94, y: resizedFrame.height / 35)
        context.translateBy(x: -2329, y: -1867)
        
        /// RClass1ATag
        do {
            context.saveGState()
            context.translateBy(x: 2329, y: 1867)
            
            /// PurpleClassTag
            let purpleClassTag = UIBezierPath()
            purpleClassTag.move(to: CGPoint(x: 2, y: 0))
            purpleClassTag.addLine(to: CGPoint(x: 93.92, y: 0))
            purpleClassTag.addLine(to: CGPoint(x: 93.92, y: 35))
            purpleClassTag.addLine(to: CGPoint(x: 2, y: 35))
            purpleClassTag.addLine(to: CGPoint(x: 2, y: 35))
            purpleClassTag.addCurve(to: CGPoint(x: 0, y: 33), controlPoint1: CGPoint(x: 0.9, y: 35), controlPoint2: CGPoint(x: 0, y: 34.1))
            purpleClassTag.addCurve(to: CGPoint(x: 0.17, y: 32.19), controlPoint1: CGPoint(x: 0, y: 32.72), controlPoint2: CGPoint(x: 0.06, y: 32.44))
            purpleClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            purpleClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            purpleClassTag.addCurve(to: CGPoint(x: 6.33, y: 16.69), controlPoint1: CGPoint(x: 6.56, y: 17.79), controlPoint2: CGPoint(x: 6.56, y: 17.21))
            purpleClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            purpleClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            purpleClassTag.addCurve(to: CGPoint(x: 1.19, y: 0.17), controlPoint1: CGPoint(x: -0.28, y: 1.8), controlPoint2: CGPoint(x: 0.18, y: 0.62))
            purpleClassTag.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 1.44, y: 0.06), controlPoint2: CGPoint(x: 1.72, y: 0))
            purpleClassTag.close()
            purpleClassTag.move(to: CGPoint(x: 2, y: 0))
            context.saveGState()
            context.translateBy(x: 46.96, y: 17.5)
            context.scaleBy(x: -1, y: 1)
            context.rotate(by: 2 * CGFloat.pi)
            context.translateBy(x: -46.96, y: -17.5)
            purpleClassTag.usesEvenOddFillRule = true
            context.saveGState()
            purpleClassTag.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.763, saturation: 0.653, brightness: 0.396, alpha: 1).cgColor,
                        UIColor(hue: 0.728, saturation: 0.563, brightness: 0.773, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 46.96, y: 35),
                end: CGPoint(x: 46.96, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Class 1A
            let class1A = NSMutableAttributedString(string: "Class 1A")
            class1A.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "ArialRoundedMTBold", size: 13.98)!, range: NSRange(location: 0, length: class1A.length))
            class1A.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: class1A.length))
            class1A.addAttribute(NSAttributedStringKey.kern, value: -0.24, range: NSRange(location: 0, length: class1A.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                class1A.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: class1A.length))
            }
            context.saveGState()
            class1A.draw(in: CGRect(x: 10, y: 8, width: 73.27, height: 18))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawRClass3Tag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 94, height: 35), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 94, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 94, y: resizedFrame.height / 35)
        context.translateBy(x: -2329, y: -1822)
        
        /// RClass3Tag
        do {
            context.saveGState()
            context.translateBy(x: 2329, y: 1822)
            
            /// BlueClassTag
            let blueClassTag = UIBezierPath()
            blueClassTag.move(to: CGPoint(x: 2, y: 0))
            blueClassTag.addLine(to: CGPoint(x: 93.92, y: 0))
            blueClassTag.addLine(to: CGPoint(x: 93.92, y: 35))
            blueClassTag.addLine(to: CGPoint(x: 2, y: 35))
            blueClassTag.addLine(to: CGPoint(x: 2, y: 35))
            blueClassTag.addCurve(to: CGPoint(x: 0, y: 33), controlPoint1: CGPoint(x: 0.9, y: 35), controlPoint2: CGPoint(x: 0, y: 34.1))
            blueClassTag.addCurve(to: CGPoint(x: 0.17, y: 32.19), controlPoint1: CGPoint(x: 0, y: 32.72), controlPoint2: CGPoint(x: 0.06, y: 32.44))
            blueClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            blueClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            blueClassTag.addCurve(to: CGPoint(x: 6.33, y: 16.69), controlPoint1: CGPoint(x: 6.56, y: 17.79), controlPoint2: CGPoint(x: 6.56, y: 17.21))
            blueClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            blueClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            blueClassTag.addCurve(to: CGPoint(x: 1.19, y: 0.17), controlPoint1: CGPoint(x: -0.28, y: 1.8), controlPoint2: CGPoint(x: 0.18, y: 0.62))
            blueClassTag.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 1.44, y: 0.06), controlPoint2: CGPoint(x: 1.72, y: 0))
            blueClassTag.close()
            blueClassTag.move(to: CGPoint(x: 2, y: 0))
            context.saveGState()
            context.translateBy(x: 46.96, y: 17.5)
            context.scaleBy(x: -1, y: 1)
            context.rotate(by: 2 * CGFloat.pi)
            context.translateBy(x: -46.96, y: -17.5)
            blueClassTag.usesEvenOddFillRule = true
            context.saveGState()
            blueClassTag.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.59, saturation: 0.815, brightness: 0.608, alpha: 1).cgColor,
                        UIColor(hue: 0.527, saturation: 0.893, brightness: 0.846, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 46.96, y: 35),
                end: CGPoint(x: 46.96, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Class 3
            let class3 = NSMutableAttributedString(string: "Class 3")
            class3.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "ArialRoundedMTBold", size: 13.98)!, range: NSRange(location: 0, length: class3.length))
            class3.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: class3.length))
            class3.addAttribute(NSAttributedStringKey.kern, value: -0.24, range: NSRange(location: 0, length: class3.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                class3.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: class3.length))
            }
            context.saveGState()
            class3.draw(in: CGRect(x: 10, y: 8, width: 73.27, height: 18))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawRClass2Tag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 94, height: 35), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 94, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 94, y: resizedFrame.height / 35)
        context.translateBy(x: -2328, y: -1777)
        
        /// RClass2Tag
        do {
            context.saveGState()
            context.translateBy(x: 2328, y: 1777)
            
            /// GreenClassTag
            let greenClassTag = UIBezierPath()
            greenClassTag.move(to: CGPoint(x: 2, y: 0))
            greenClassTag.addLine(to: CGPoint(x: 93.92, y: 0))
            greenClassTag.addLine(to: CGPoint(x: 93.92, y: 35))
            greenClassTag.addLine(to: CGPoint(x: 2, y: 35))
            greenClassTag.addLine(to: CGPoint(x: 2, y: 35))
            greenClassTag.addCurve(to: CGPoint(x: 0, y: 33), controlPoint1: CGPoint(x: 0.9, y: 35), controlPoint2: CGPoint(x: 0, y: 34.1))
            greenClassTag.addCurve(to: CGPoint(x: 0.17, y: 32.19), controlPoint1: CGPoint(x: 0, y: 32.72), controlPoint2: CGPoint(x: 0.06, y: 32.44))
            greenClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            greenClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            greenClassTag.addCurve(to: CGPoint(x: 6.33, y: 16.69), controlPoint1: CGPoint(x: 6.56, y: 17.79), controlPoint2: CGPoint(x: 6.56, y: 17.21))
            greenClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            greenClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            greenClassTag.addCurve(to: CGPoint(x: 1.19, y: 0.17), controlPoint1: CGPoint(x: -0.28, y: 1.8), controlPoint2: CGPoint(x: 0.18, y: 0.62))
            greenClassTag.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 1.44, y: 0.06), controlPoint2: CGPoint(x: 1.72, y: 0))
            greenClassTag.close()
            greenClassTag.move(to: CGPoint(x: 2, y: 0))
            context.saveGState()
            context.translateBy(x: 47.04, y: 17.5)
            context.scaleBy(x: -1, y: 1)
            context.rotate(by: 2 * CGFloat.pi)
            context.translateBy(x: -46.96, y: -17.5)
            greenClassTag.usesEvenOddFillRule = true
            context.saveGState()
            greenClassTag.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.399, saturation: 1, brightness: 0.63, alpha: 1).cgColor,
                        UIColor(hue: 0.408, saturation: 0.975, brightness: 0.864, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 46.96, y: 35),
                end: CGPoint(x: 46.96, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Class 2
            let class2 = NSMutableAttributedString(string: "Class 2")
            class2.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "ArialRoundedMTBold", size: 13.98)!, range: NSRange(location: 0, length: class2.length))
            class2.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: class2.length))
            class2.addAttribute(NSAttributedStringKey.kern, value: -0.24, range: NSRange(location: 0, length: class2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                class2.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: class2.length))
            }
            context.saveGState()
            class2.draw(in: CGRect(x: 11, y: 8, width: 73.27, height: 18))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawRClass1BTag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 94, height: 35), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 94, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 94, y: resizedFrame.height / 35)
        context.translateBy(x: -2329, y: -1729)
        
        /// RClass1BTag
        do {
            context.saveGState()
            context.translateBy(x: 2329, y: 1729)
            
            /// OrangeClassTag
            let orangeClassTag = UIBezierPath()
            orangeClassTag.move(to: CGPoint(x: 2, y: 0))
            orangeClassTag.addLine(to: CGPoint(x: 93.92, y: 0))
            orangeClassTag.addLine(to: CGPoint(x: 93.92, y: 35))
            orangeClassTag.addLine(to: CGPoint(x: 2, y: 35))
            orangeClassTag.addLine(to: CGPoint(x: 2, y: 35))
            orangeClassTag.addCurve(to: CGPoint(x: 0, y: 33), controlPoint1: CGPoint(x: 0.9, y: 35), controlPoint2: CGPoint(x: 0, y: 34.1))
            orangeClassTag.addCurve(to: CGPoint(x: 0.17, y: 32.19), controlPoint1: CGPoint(x: 0, y: 32.72), controlPoint2: CGPoint(x: 0.06, y: 32.44))
            orangeClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            orangeClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            orangeClassTag.addCurve(to: CGPoint(x: 6.33, y: 16.69), controlPoint1: CGPoint(x: 6.56, y: 17.79), controlPoint2: CGPoint(x: 6.56, y: 17.21))
            orangeClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            orangeClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            orangeClassTag.addCurve(to: CGPoint(x: 1.19, y: 0.17), controlPoint1: CGPoint(x: -0.28, y: 1.8), controlPoint2: CGPoint(x: 0.18, y: 0.62))
            orangeClassTag.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 1.44, y: 0.06), controlPoint2: CGPoint(x: 1.72, y: 0))
            orangeClassTag.close()
            orangeClassTag.move(to: CGPoint(x: 2, y: 0))
            context.saveGState()
            context.translateBy(x: 46.96, y: 17.5)
            context.scaleBy(x: -1, y: 1)
            context.rotate(by: 2 * CGFloat.pi)
            context.translateBy(x: -46.96, y: -17.5)
            orangeClassTag.usesEvenOddFillRule = true
            context.saveGState()
            orangeClassTag.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.065, saturation: 0.935, brightness: 1, alpha: 1).cgColor,
                        UIColor(hue: 0.113, saturation: 0.866, brightness: 0.965, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 46.96, y: 35),
                end: CGPoint(x: 46.96, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Class 1B
            let class1B = NSMutableAttributedString(string: "Class 1B")
            class1B.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "ArialRoundedMTBold", size: 13.98)!, range: NSRange(location: 0, length: class1B.length))
            class1B.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: class1B.length))
            class1B.addAttribute(NSAttributedStringKey.kern, value: -0.24, range: NSRange(location: 0, length: class1B.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                class1B.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: class1B.length))
            }
            context.saveGState()
            class1B.draw(in: CGRect(x: 9, y: 8, width: 73.27, height: 18))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawRClass4Tag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 94, height: 35), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 94, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 94, y: resizedFrame.height / 35)
        context.translateBy(x: -2329, y: -1684)
        
        /// RClass4Tag
        do {
            context.saveGState()
            context.translateBy(x: 2329, y: 1684)
            
            /// RedClassTag
            let redClassTag = UIBezierPath()
            redClassTag.move(to: CGPoint(x: 2, y: 0))
            redClassTag.addLine(to: CGPoint(x: 93.92, y: 0))
            redClassTag.addLine(to: CGPoint(x: 93.92, y: 35))
            redClassTag.addLine(to: CGPoint(x: 2, y: 35))
            redClassTag.addLine(to: CGPoint(x: 2, y: 35))
            redClassTag.addCurve(to: CGPoint(x: 0, y: 33), controlPoint1: CGPoint(x: 0.9, y: 35), controlPoint2: CGPoint(x: 0, y: 34.1))
            redClassTag.addCurve(to: CGPoint(x: 0.17, y: 32.19), controlPoint1: CGPoint(x: 0, y: 32.72), controlPoint2: CGPoint(x: 0.06, y: 32.44))
            redClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            redClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            redClassTag.addCurve(to: CGPoint(x: 6.33, y: 16.69), controlPoint1: CGPoint(x: 6.56, y: 17.79), controlPoint2: CGPoint(x: 6.56, y: 17.21))
            redClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            redClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            redClassTag.addCurve(to: CGPoint(x: 1.19, y: 0.17), controlPoint1: CGPoint(x: -0.28, y: 1.8), controlPoint2: CGPoint(x: 0.18, y: 0.62))
            redClassTag.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 1.44, y: 0.06), controlPoint2: CGPoint(x: 1.72, y: 0))
            redClassTag.close()
            redClassTag.move(to: CGPoint(x: 2, y: 0))
            context.saveGState()
            context.translateBy(x: 46.96, y: 17.5)
            context.scaleBy(x: -1, y: 1)
            context.rotate(by: 2 * CGFloat.pi)
            context.translateBy(x: -46.96, y: -17.5)
            redClassTag.usesEvenOddFillRule = true
            context.saveGState()
            redClassTag.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.985, saturation: 0.67, brightness: 0.961, alpha: 1).cgColor,
                        UIColor(hue: 0.975, saturation: 0.975, brightness: 0.624, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 46.96, y: 0),
                end: CGPoint(x: 46.96, y: 35),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Class 4
            let class4 = NSMutableAttributedString(string: "Class 4")
            class4.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "ArialRoundedMTBold", size: 13.98)!, range: NSRange(location: 0, length: class4.length))
            class4.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: class4.length))
            class4.addAttribute(NSAttributedStringKey.kern, value: -0.24, range: NSRange(location: 0, length: class4.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                class4.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: class4.length))
            }
            context.saveGState()
            class4.draw(in: CGRect(x: 10, y: 8, width: 73.27, height: 18))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawClass5Tag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 94, height: 35), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 94, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 94, y: resizedFrame.height / 35)
        context.translateBy(x: -2208, y: -1912)
        
        /// Class5Tag
        do {
            context.saveGState()
            context.translateBy(x: 2208, y: 1912)
            
            /// YellowClassTag
            let yellowClassTag = UIBezierPath()
            yellowClassTag.move(to: CGPoint(x: 2, y: 0))
            yellowClassTag.addLine(to: CGPoint(x: 93.92, y: 0))
            yellowClassTag.addLine(to: CGPoint(x: 93.92, y: 35))
            yellowClassTag.addLine(to: CGPoint(x: 2, y: 35))
            yellowClassTag.addLine(to: CGPoint(x: 2, y: 35))
            yellowClassTag.addCurve(to: CGPoint(x: 0, y: 33), controlPoint1: CGPoint(x: 0.9, y: 35), controlPoint2: CGPoint(x: 0, y: 34.1))
            yellowClassTag.addCurve(to: CGPoint(x: 0.17, y: 32.19), controlPoint1: CGPoint(x: 0, y: 32.72), controlPoint2: CGPoint(x: 0.06, y: 32.44))
            yellowClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            yellowClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            yellowClassTag.addCurve(to: CGPoint(x: 6.33, y: 16.69), controlPoint1: CGPoint(x: 6.56, y: 17.79), controlPoint2: CGPoint(x: 6.56, y: 17.21))
            yellowClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            yellowClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            yellowClassTag.addCurve(to: CGPoint(x: 1.19, y: 0.17), controlPoint1: CGPoint(x: -0.28, y: 1.8), controlPoint2: CGPoint(x: 0.18, y: 0.62))
            yellowClassTag.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 1.44, y: 0.06), controlPoint2: CGPoint(x: 1.72, y: 0))
            yellowClassTag.close()
            yellowClassTag.move(to: CGPoint(x: 2, y: 0))
            context.saveGState()
            context.translateBy(x: -0, y: 0)
            yellowClassTag.usesEvenOddFillRule = true
            context.saveGState()
            yellowClassTag.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.116, saturation: 1, brightness: 1, alpha: 1).cgColor,
                        UIColor(hue: 0.159, saturation: 0.742, brightness: 1, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 46.96, y: 35),
                end: CGPoint(x: 46.96, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Class 5
            let class5 = NSMutableAttributedString(string: "Class 5")
            class5.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "ArialRoundedMTBold", size: 13.98)!, range: NSRange(location: 0, length: class5.length))
            class5.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor(white: 0.184, alpha: 1), range: NSRange(location: 0, length: class5.length))
            class5.addAttribute(NSAttributedStringKey.kern, value: -0.24, range: NSRange(location: 0, length: class5.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                class5.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: class5.length))
            }
            context.saveGState()
            class5.draw(in: CGRect(x: 10, y: 8, width: 73.27, height: 18))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawClass1ATag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 94, height: 35), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 94, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 94, y: resizedFrame.height / 35)
        context.translateBy(x: -2208, y: -1867)
        
        /// Class1ATag
        do {
            context.saveGState()
            context.translateBy(x: 2208, y: 1867)
            
            /// PurpleClassTag
            let purpleClassTag = UIBezierPath()
            purpleClassTag.move(to: CGPoint(x: 2, y: 0))
            purpleClassTag.addLine(to: CGPoint(x: 93.92, y: 0))
            purpleClassTag.addLine(to: CGPoint(x: 93.92, y: 35))
            purpleClassTag.addLine(to: CGPoint(x: 2, y: 35))
            purpleClassTag.addLine(to: CGPoint(x: 2, y: 35))
            purpleClassTag.addCurve(to: CGPoint(x: 0, y: 33), controlPoint1: CGPoint(x: 0.9, y: 35), controlPoint2: CGPoint(x: 0, y: 34.1))
            purpleClassTag.addCurve(to: CGPoint(x: 0.17, y: 32.19), controlPoint1: CGPoint(x: 0, y: 32.72), controlPoint2: CGPoint(x: 0.06, y: 32.44))
            purpleClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            purpleClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            purpleClassTag.addCurve(to: CGPoint(x: 6.33, y: 16.69), controlPoint1: CGPoint(x: 6.56, y: 17.79), controlPoint2: CGPoint(x: 6.56, y: 17.21))
            purpleClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            purpleClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            purpleClassTag.addCurve(to: CGPoint(x: 1.19, y: 0.17), controlPoint1: CGPoint(x: -0.28, y: 1.8), controlPoint2: CGPoint(x: 0.18, y: 0.62))
            purpleClassTag.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 1.44, y: 0.06), controlPoint2: CGPoint(x: 1.72, y: 0))
            purpleClassTag.close()
            purpleClassTag.move(to: CGPoint(x: 2, y: 0))
            context.saveGState()
            context.translateBy(x: -0, y: 0)
            purpleClassTag.usesEvenOddFillRule = true
            context.saveGState()
            purpleClassTag.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.763, saturation: 0.653, brightness: 0.396, alpha: 1).cgColor,
                        UIColor(hue: 0.728, saturation: 0.563, brightness: 0.773, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 46.96, y: 35),
                end: CGPoint(x: 46.96, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Class 1A
            let class1A = NSMutableAttributedString(string: "Class 1A")
            class1A.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "ArialRoundedMTBold", size: 13.98)!, range: NSRange(location: 0, length: class1A.length))
            class1A.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: class1A.length))
            class1A.addAttribute(NSAttributedStringKey.kern, value: -0.24, range: NSRange(location: 0, length: class1A.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                class1A.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: class1A.length))
            }
            context.saveGState()
            class1A.draw(in: CGRect(x: 10, y: 8, width: 73.27, height: 18))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawClass3Tag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 94, height: 35), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 94, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 94, y: resizedFrame.height / 35)
        context.translateBy(x: -2208, y: -1822)
        
        /// Class3Tag
        do {
            context.saveGState()
            context.translateBy(x: 2208, y: 1822)
            
            /// BlueClassTag
            let blueClassTag = UIBezierPath()
            blueClassTag.move(to: CGPoint(x: 2, y: 0))
            blueClassTag.addLine(to: CGPoint(x: 93.92, y: 0))
            blueClassTag.addLine(to: CGPoint(x: 93.92, y: 35))
            blueClassTag.addLine(to: CGPoint(x: 2, y: 35))
            blueClassTag.addLine(to: CGPoint(x: 2, y: 35))
            blueClassTag.addCurve(to: CGPoint(x: 0, y: 33), controlPoint1: CGPoint(x: 0.9, y: 35), controlPoint2: CGPoint(x: 0, y: 34.1))
            blueClassTag.addCurve(to: CGPoint(x: 0.17, y: 32.19), controlPoint1: CGPoint(x: 0, y: 32.72), controlPoint2: CGPoint(x: 0.06, y: 32.44))
            blueClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            blueClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            blueClassTag.addCurve(to: CGPoint(x: 6.33, y: 16.69), controlPoint1: CGPoint(x: 6.56, y: 17.79), controlPoint2: CGPoint(x: 6.56, y: 17.21))
            blueClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            blueClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            blueClassTag.addCurve(to: CGPoint(x: 1.19, y: 0.17), controlPoint1: CGPoint(x: -0.28, y: 1.8), controlPoint2: CGPoint(x: 0.18, y: 0.62))
            blueClassTag.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 1.44, y: 0.06), controlPoint2: CGPoint(x: 1.72, y: 0))
            blueClassTag.close()
            blueClassTag.move(to: CGPoint(x: 2, y: 0))
            context.saveGState()
            context.translateBy(x: -0, y: 0)
            blueClassTag.usesEvenOddFillRule = true
            context.saveGState()
            blueClassTag.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.59, saturation: 0.815, brightness: 0.608, alpha: 1).cgColor,
                        UIColor(hue: 0.527, saturation: 0.893, brightness: 0.846, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 46.96, y: 35),
                end: CGPoint(x: 46.96, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Class 3
            let class3 = NSMutableAttributedString(string: "Class 3")
            class3.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "ArialRoundedMTBold", size: 13.98)!, range: NSRange(location: 0, length: class3.length))
            class3.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: class3.length))
            class3.addAttribute(NSAttributedStringKey.kern, value: -0.24, range: NSRange(location: 0, length: class3.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                class3.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: class3.length))
            }
            context.saveGState()
            class3.draw(in: CGRect(x: 10, y: 8, width: 73.27, height: 18))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawClass2Tag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 94, height: 35), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 94, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 94, y: resizedFrame.height / 35)
        context.translateBy(x: -2207, y: -1777)
        
        /// Class2Tag
        do {
            context.saveGState()
            context.translateBy(x: 2207, y: 1777)
            
            /// GreenClassTag
            let greenClassTag = UIBezierPath()
            greenClassTag.move(to: CGPoint(x: 2, y: 0))
            greenClassTag.addLine(to: CGPoint(x: 93.92, y: 0))
            greenClassTag.addLine(to: CGPoint(x: 93.92, y: 35))
            greenClassTag.addLine(to: CGPoint(x: 2, y: 35))
            greenClassTag.addLine(to: CGPoint(x: 2, y: 35))
            greenClassTag.addCurve(to: CGPoint(x: 0, y: 33), controlPoint1: CGPoint(x: 0.9, y: 35), controlPoint2: CGPoint(x: 0, y: 34.1))
            greenClassTag.addCurve(to: CGPoint(x: 0.17, y: 32.19), controlPoint1: CGPoint(x: 0, y: 32.72), controlPoint2: CGPoint(x: 0.06, y: 32.44))
            greenClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            greenClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            greenClassTag.addCurve(to: CGPoint(x: 6.33, y: 16.69), controlPoint1: CGPoint(x: 6.56, y: 17.79), controlPoint2: CGPoint(x: 6.56, y: 17.21))
            greenClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            greenClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            greenClassTag.addCurve(to: CGPoint(x: 1.19, y: 0.17), controlPoint1: CGPoint(x: -0.28, y: 1.8), controlPoint2: CGPoint(x: 0.18, y: 0.62))
            greenClassTag.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 1.44, y: 0.06), controlPoint2: CGPoint(x: 1.72, y: 0))
            greenClassTag.close()
            greenClassTag.move(to: CGPoint(x: 2, y: 0))
            context.saveGState()
            context.translateBy(x: 0.08, y: 0)
            greenClassTag.usesEvenOddFillRule = true
            context.saveGState()
            greenClassTag.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.399, saturation: 1, brightness: 0.63, alpha: 1).cgColor,
                        UIColor(hue: 0.408, saturation: 0.975, brightness: 0.864, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 46.96, y: 35),
                end: CGPoint(x: 46.96, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Class 2
            let class2 = NSMutableAttributedString(string: "Class 2")
            class2.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "ArialRoundedMTBold", size: 13.98)!, range: NSRange(location: 0, length: class2.length))
            class2.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: class2.length))
            class2.addAttribute(NSAttributedStringKey.kern, value: -0.24, range: NSRange(location: 0, length: class2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                class2.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: class2.length))
            }
            context.saveGState()
            class2.draw(in: CGRect(x: 11, y: 8, width: 73.27, height: 18))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawClass1BTag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 94, height: 35), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 94, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 94, y: resizedFrame.height / 35)
        context.translateBy(x: -2208, y: -1729)
        
        /// Class1BTag
        do {
            context.saveGState()
            context.translateBy(x: 2208, y: 1729)
            
            /// OrangeClassTag
            let orangeClassTag = UIBezierPath()
            orangeClassTag.move(to: CGPoint(x: 2, y: 0))
            orangeClassTag.addLine(to: CGPoint(x: 93.92, y: 0))
            orangeClassTag.addLine(to: CGPoint(x: 93.92, y: 35))
            orangeClassTag.addLine(to: CGPoint(x: 2, y: 35))
            orangeClassTag.addLine(to: CGPoint(x: 2, y: 35))
            orangeClassTag.addCurve(to: CGPoint(x: 0, y: 33), controlPoint1: CGPoint(x: 0.9, y: 35), controlPoint2: CGPoint(x: 0, y: 34.1))
            orangeClassTag.addCurve(to: CGPoint(x: 0.17, y: 32.19), controlPoint1: CGPoint(x: 0, y: 32.72), controlPoint2: CGPoint(x: 0.06, y: 32.44))
            orangeClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            orangeClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            orangeClassTag.addCurve(to: CGPoint(x: 6.33, y: 16.69), controlPoint1: CGPoint(x: 6.56, y: 17.79), controlPoint2: CGPoint(x: 6.56, y: 17.21))
            orangeClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            orangeClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            orangeClassTag.addCurve(to: CGPoint(x: 1.19, y: 0.17), controlPoint1: CGPoint(x: -0.28, y: 1.8), controlPoint2: CGPoint(x: 0.18, y: 0.62))
            orangeClassTag.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 1.44, y: 0.06), controlPoint2: CGPoint(x: 1.72, y: 0))
            orangeClassTag.close()
            orangeClassTag.move(to: CGPoint(x: 2, y: 0))
            context.saveGState()
            context.translateBy(x: -0, y: 0)
            orangeClassTag.usesEvenOddFillRule = true
            context.saveGState()
            orangeClassTag.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.065, saturation: 0.935, brightness: 1, alpha: 1).cgColor,
                        UIColor(hue: 0.113, saturation: 0.866, brightness: 0.965, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 46.96, y: 35),
                end: CGPoint(x: 46.96, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Class 1B
            let class1B = NSMutableAttributedString(string: "Class 1B")
            class1B.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "ArialRoundedMTBold", size: 13.98)!, range: NSRange(location: 0, length: class1B.length))
            class1B.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: class1B.length))
            class1B.addAttribute(NSAttributedStringKey.kern, value: -0.24, range: NSRange(location: 0, length: class1B.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                class1B.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: class1B.length))
            }
            context.saveGState()
            class1B.draw(in: CGRect(x: 9, y: 8, width: 73.27, height: 18))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawClass4Tag(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 94, height: 35), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 94, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 94, y: resizedFrame.height / 35)
        context.translateBy(x: -2208, y: -1684)
        
        /// Class4Tag
        do {
            context.saveGState()
            context.translateBy(x: 2208, y: 1684)
            
            /// RedClassTag
            let redClassTag = UIBezierPath()
            redClassTag.move(to: CGPoint(x: 2, y: 0))
            redClassTag.addLine(to: CGPoint(x: 93.92, y: 0))
            redClassTag.addLine(to: CGPoint(x: 93.92, y: 35))
            redClassTag.addLine(to: CGPoint(x: 2, y: 35))
            redClassTag.addLine(to: CGPoint(x: 2, y: 35))
            redClassTag.addCurve(to: CGPoint(x: 0, y: 33), controlPoint1: CGPoint(x: 0.9, y: 35), controlPoint2: CGPoint(x: 0, y: 34.1))
            redClassTag.addCurve(to: CGPoint(x: 0.17, y: 32.19), controlPoint1: CGPoint(x: 0, y: 32.72), controlPoint2: CGPoint(x: 0.06, y: 32.44))
            redClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            redClassTag.addLine(to: CGPoint(x: 6.33, y: 18.31))
            redClassTag.addCurve(to: CGPoint(x: 6.33, y: 16.69), controlPoint1: CGPoint(x: 6.56, y: 17.79), controlPoint2: CGPoint(x: 6.56, y: 17.21))
            redClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            redClassTag.addLine(to: CGPoint(x: 0.17, y: 2.81))
            redClassTag.addCurve(to: CGPoint(x: 1.19, y: 0.17), controlPoint1: CGPoint(x: -0.28, y: 1.8), controlPoint2: CGPoint(x: 0.18, y: 0.62))
            redClassTag.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 1.44, y: 0.06), controlPoint2: CGPoint(x: 1.72, y: 0))
            redClassTag.close()
            redClassTag.move(to: CGPoint(x: 2, y: 0))
            context.saveGState()
            context.translateBy(x: -0, y: 0)
            redClassTag.usesEvenOddFillRule = true
            context.saveGState()
            redClassTag.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.985, saturation: 0.67, brightness: 0.961, alpha: 1).cgColor,
                        UIColor(hue: 0.975, saturation: 0.975, brightness: 0.624, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 46.96, y: 0),
                end: CGPoint(x: 46.96, y: 35),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Class 4
            let class4 = NSMutableAttributedString(string: "Class 4")
            class4.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "ArialRoundedMTBold", size: 13.98)!, range: NSRange(location: 0, length: class4.length))
            class4.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: class4.length))
            class4.addAttribute(NSAttributedStringKey.kern, value: -0.24, range: NSRange(location: 0, length: class4.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                class4.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: class4.length))
            }
            context.saveGState()
            class4.draw(in: CGRect(x: 10, y: 8, width: 73.27, height: 18))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawClassBackgroundYellow(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 158, height: 188), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 158, height: 188), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 158, y: resizedFrame.height / 188)
        context.translateBy(x: -2170, y: -2309)
        
        /// ClassBackgroundYellow
        do {
            context.saveGState()
            context.translateBy(x: 2173, y: 2310)
            
            /// Rectangle
            let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 150, height: 180), cornerRadius: 15)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.addRect(rectangle.bounds.insetBy(dx: -5, dy: -7))
            context.clip(using: .evenOdd)
            context.translateBy(x: -156, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 157, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            rectangle.fill()
            context.restoreGState()
            context.saveGState()
            rectangle.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.116, saturation: 1, brightness: 1, alpha: 1).cgColor,
                        UIColor(hue: 0.159, saturation: 0.742, brightness: 1, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 75, y: 180),
                end: CGPoint(x: 75, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 9
            let rectangle9 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 79, height: 97.5), cornerRadius: 12.34)
            context.saveGState()
            context.translateBy(x: 34.5, y: 46)
            UIColor(white: 1, alpha: 0.19).setFill()
            rectangle9.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawClassBackgroundBlue(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 158, height: 188), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 158, height: 188), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 158, y: resizedFrame.height / 188)
        context.translateBy(x: -1814, y: -2309)
        
        /// ClassBackgroundBlue
        do {
            context.saveGState()
            context.translateBy(x: 1817, y: 2310)
            
            /// Rectangle
            let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 150, height: 180), cornerRadius: 15)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.addRect(rectangle.bounds.insetBy(dx: -5, dy: -7))
            context.clip(using: .evenOdd)
            context.translateBy(x: -156, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 157, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            rectangle.fill()
            context.restoreGState()
            context.saveGState()
            rectangle.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.59, saturation: 0.815, brightness: 0.608, alpha: 1).cgColor,
                        UIColor(hue: 0.527, saturation: 0.893, brightness: 0.846, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 75, y: 180),
                end: CGPoint(x: 75, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 9
            let rectangle9 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 79, height: 97.5), cornerRadius: 12.34)
            context.saveGState()
            context.translateBy(x: 34.5, y: 46)
            UIColor(white: 1, alpha: 0.15).setFill()
            rectangle9.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawClassBackgroundRed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 158, height: 188), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 158, height: 188), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 158, y: resizedFrame.height / 188)
        context.translateBy(x: -1439, y: -2309)
        
        /// ClassBackgroundRed
        do {
            context.saveGState()
            context.translateBy(x: 1442, y: 2310)
            
            /// Rectangle
            let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 150, height: 180), cornerRadius: 15)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.addRect(rectangle.bounds.insetBy(dx: -5, dy: -7))
            context.clip(using: .evenOdd)
            context.translateBy(x: -156, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 157, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            rectangle.fill()
            context.restoreGState()
            context.saveGState()
            rectangle.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.985, saturation: 0.67, brightness: 0.961, alpha: 1).cgColor,
                        UIColor(hue: 0.975, saturation: 0.975, brightness: 0.624, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 75, y: 0),
                end: CGPoint(x: 75, y: 180),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 9
            let rectangle9 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 79, height: 97.5), cornerRadius: 12.34)
            context.saveGState()
            context.translateBy(x: 34.5, y: 46)
            UIColor(white: 1, alpha: 0.15).setFill()
            rectangle9.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawClassBackgroundGreen(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 158, height: 188), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 158, height: 188), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 158, y: resizedFrame.height / 188)
        context.translateBy(x: -1070, y: -2302)
        
        /// ClassBackgroundGreen
        do {
            context.saveGState()
            context.translateBy(x: 1073, y: 2303)
            
            /// Rectangle
            let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 150, height: 180), cornerRadius: 15)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.addRect(rectangle.bounds.insetBy(dx: -5, dy: -7))
            context.clip(using: .evenOdd)
            context.translateBy(x: -156, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 157, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            rectangle.fill()
            context.restoreGState()
            context.saveGState()
            rectangle.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.399, saturation: 1, brightness: 0.63, alpha: 1).cgColor,
                        UIColor(hue: 0.408, saturation: 0.975, brightness: 0.864, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 75, y: 180),
                end: CGPoint(x: 75, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 9
            let rectangle9 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 79, height: 97.5), cornerRadius: 12.34)
            context.saveGState()
            context.translateBy(x: 34.5, y: 46)
            UIColor(white: 1, alpha: 0.15).setFill()
            rectangle9.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawClassBackgroundOrange(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 158, height: 188), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 158, height: 188), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 158, y: resizedFrame.height / 188)
        context.translateBy(x: -714, y: -2302)
        
        /// ClassBackgroundOrange
        do {
            context.saveGState()
            context.translateBy(x: 717, y: 2303)
            
            /// Rectangle
            let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 150, height: 180), cornerRadius: 15)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.addRect(rectangle.bounds.insetBy(dx: -5, dy: -7))
            context.clip(using: .evenOdd)
            context.translateBy(x: -156, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 157, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            rectangle.fill()
            context.restoreGState()
            context.saveGState()
            rectangle.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.065, saturation: 0.935, brightness: 1, alpha: 1).cgColor,
                        UIColor(hue: 0.113, saturation: 0.866, brightness: 0.965, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 75, y: 180),
                end: CGPoint(x: 75, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 9
            let rectangle9 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 120, height: 97.5), cornerRadius: 12.34)
            context.saveGState()
            context.translateBy(x: 15, y: 46)
            UIColor(white: 1, alpha: 0.15).setFill()
            rectangle9.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawClassBackgroundPurple(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 158, height: 188), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 158, height: 188), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 158, y: resizedFrame.height / 188)
        context.translateBy(x: -339, y: -2297)
        
        /// ClassBackgroundPurple
        do {
            context.saveGState()
            context.translateBy(x: 342, y: 2298)
            
            /// Rectangle
            let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 150, height: 180), cornerRadius: 15)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.addRect(rectangle.bounds.insetBy(dx: -5, dy: -7))
            context.clip(using: .evenOdd)
            context.translateBy(x: -156, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 157, y: 3)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            rectangle.fill()
            context.restoreGState()
            context.saveGState()
            rectangle.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.763, saturation: 0.653, brightness: 0.396, alpha: 1).cgColor,
                        UIColor(hue: 0.728, saturation: 0.563, brightness: 0.773, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 75, y: 180),
                end: CGPoint(x: 75, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 9
            let rectangle9 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 79, height: 97.5), cornerRadius: 12.34)
            context.saveGState()
            context.translateBy(x: 34.5, y: 46)
            UIColor(white: 1, alpha: 0.05).setFill()
            rectangle9.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawEditClasses(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 69, height: 69), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 69, height: 69), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 69, y: resizedFrame.height / 69)
        context.translateBy(x: -3326, y: -2036)
        
        /// EditClasses
        do {
            context.saveGState()
            context.translateBy(x: 3328, y: 2038)
            
            /// RequirementBackground
            do {
                context.saveGState()
                context.translateBy(x: 32.63, y: 55.37)
                context.rotate(by: 540 * CGFloat.pi/180)
                context.translateBy(x: -7.96, y: -9.63)
                
                /// Rectangle
                let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 15.92, height: 19.26), cornerRadius: 1.6)
                context.saveGState()
                context.translateBy(x: -0, y: 0)
                context.saveGState()
                context.beginPath()
                context.addPath(rectangle.cgPath)
                context.addRect(rectangle.bounds.insetBy(dx: -2, dy: -2))
                context.clip(using: .evenOdd)
                context.translateBy(x: -18.92, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 18.92, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 2 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
                }
                UIColor.black.setFill()
                rectangle.fill()
                context.restoreGState()
                context.saveGState()
                rectangle.addClip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.763, saturation: 0.653, brightness: 0.396, alpha: 1).cgColor,
                            UIColor(hue: 0.728, saturation: 0.563, brightness: 0.773, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 7.96, y: 19.26),
                    end: CGPoint(x: 7.96, y: 0),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                /// Rectangle 9
                let rectangle9 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 6.79, height: 8.45), cornerRadius: 1.07)
                context.saveGState()
                context.translateBy(x: 4.46, y: 5.88)
                UIColor(white: 1, alpha: 0.05).setFill()
                rectangle9.fill()
                context.restoreGState()
                
                /// Combined Shape
                let combinedShape = UIBezierPath()
                combinedShape.move(to: CGPoint(x: 1.09, y: 0.06))
                combinedShape.addLine(to: CGPoint(x: 1.14, y: 0.1))
                combinedShape.addLine(to: CGPoint(x: 1.14, y: 0.1))
                combinedShape.addCurve(to: CGPoint(x: 1.14, y: 0.41), controlPoint1: CGPoint(x: 1.22, y: 0.19), controlPoint2: CGPoint(x: 1.23, y: 0.32))
                combinedShape.addCurve(to: CGPoint(x: 1.14, y: 0.41), controlPoint1: CGPoint(x: 1.14, y: 0.41), controlPoint2: CGPoint(x: 1.14, y: 0.41))
                combinedShape.addLine(to: CGPoint(x: 0.56, y: 0.96))
                combinedShape.addCurve(to: CGPoint(x: 0.41, y: 0.96), controlPoint1: CGPoint(x: 0.52, y: 1), controlPoint2: CGPoint(x: 0.46, y: 1))
                combinedShape.addLine(to: CGPoint(x: 0.24, y: 0.79))
                combinedShape.addLine(to: CGPoint(x: 0.24, y: 0.79))
                combinedShape.addCurve(to: CGPoint(x: 0.24, y: 0.64), controlPoint1: CGPoint(x: 0.2, y: 0.75), controlPoint2: CGPoint(x: 0.19, y: 0.68))
                combinedShape.addLine(to: CGPoint(x: 0.79, y: 0.07))
                combinedShape.addLine(to: CGPoint(x: 0.79, y: 0.07))
                combinedShape.addCurve(to: CGPoint(x: 1.09, y: 0.06), controlPoint1: CGPoint(x: 0.87, y: -0.02), controlPoint2: CGPoint(x: 1.01, y: -0.02))
                combinedShape.addLine(to: CGPoint(x: 1.09, y: 0.06))
                combinedShape.close()
                combinedShape.move(to: CGPoint(x: 0.17, y: 0.8))
                combinedShape.addLine(to: CGPoint(x: 0.39, y: 1.02))
                combinedShape.addLine(to: CGPoint(x: 0.39, y: 1.02))
                combinedShape.addCurve(to: CGPoint(x: 0.39, y: 1.09), controlPoint1: CGPoint(x: 0.41, y: 1.04), controlPoint2: CGPoint(x: 0.41, y: 1.07))
                combinedShape.addCurve(to: CGPoint(x: 0.36, y: 1.11), controlPoint1: CGPoint(x: 0.38, y: 1.1), controlPoint2: CGPoint(x: 0.37, y: 1.11))
                combinedShape.addLine(to: CGPoint(x: 0.07, y: 1.18))
                combinedShape.addCurve(to: CGPoint(x: 0, y: 1.14), controlPoint1: CGPoint(x: 0.04, y: 1.19), controlPoint2: CGPoint(x: 0.01, y: 1.17))
                combinedShape.addCurve(to: CGPoint(x: 0, y: 1.11), controlPoint1: CGPoint(x: -0, y: 1.13), controlPoint2: CGPoint(x: -0, y: 1.12))
                combinedShape.addLine(to: CGPoint(x: 0.09, y: 0.82))
                combinedShape.addCurve(to: CGPoint(x: 0.15, y: 0.79), controlPoint1: CGPoint(x: 0.09, y: 0.8), controlPoint2: CGPoint(x: 0.12, y: 0.78))
                combinedShape.addCurve(to: CGPoint(x: 0.17, y: 0.8), controlPoint1: CGPoint(x: 0.16, y: 0.79), controlPoint2: CGPoint(x: 0.17, y: 0.79))
                combinedShape.close()
                combinedShape.move(to: CGPoint(x: 0.17, y: 0.8))
                context.saveGState()
                context.translateBy(x: 9.84, y: 13.39)
                combinedShape.usesEvenOddFillRule = true
                UIColor.white.setFill()
                combinedShape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// RequirementBackground
            do {
                context.saveGState()
                context.translateBy(x: 12.73, y: 44.14)
                context.rotate(by: 240 * CGFloat.pi/180)
                context.translateBy(x: -7.96, y: -9.63)
                
                /// Rectangle
                let rectangle32 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 15.92, height: 19.26), cornerRadius: 1.6)
                context.saveGState()
                context.translateBy(x: -0, y: 0)
                context.saveGState()
                context.beginPath()
                context.addPath(rectangle32.cgPath)
                context.addRect(rectangle32.bounds.insetBy(dx: -2, dy: -2))
                context.clip(using: .evenOdd)
                context.translateBy(x: -18.92, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 18.92, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 2 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
                }
                UIColor.black.setFill()
                rectangle32.fill()
                context.restoreGState()
                context.saveGState()
                rectangle32.addClip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.065, saturation: 0.935, brightness: 1, alpha: 1).cgColor,
                            UIColor(hue: 0.113, saturation: 0.866, brightness: 0.965, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 7.96, y: 19.26),
                    end: CGPoint(x: 7.96, y: 0),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                /// Rectangle 9
                let rectangle33 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 6.79, height: 8.45), cornerRadius: 1.07)
                context.saveGState()
                context.translateBy(x: 4.46, y: 5.88)
                UIColor(white: 1, alpha: 0.15).setFill()
                rectangle33.fill()
                context.restoreGState()
                
                /// Combined Shape
                let combinedShape2 = UIBezierPath()
                combinedShape2.move(to: CGPoint(x: 1.09, y: 0.06))
                combinedShape2.addLine(to: CGPoint(x: 1.14, y: 0.1))
                combinedShape2.addLine(to: CGPoint(x: 1.14, y: 0.1))
                combinedShape2.addCurve(to: CGPoint(x: 1.14, y: 0.41), controlPoint1: CGPoint(x: 1.22, y: 0.19), controlPoint2: CGPoint(x: 1.23, y: 0.32))
                combinedShape2.addCurve(to: CGPoint(x: 1.14, y: 0.41), controlPoint1: CGPoint(x: 1.14, y: 0.41), controlPoint2: CGPoint(x: 1.14, y: 0.41))
                combinedShape2.addLine(to: CGPoint(x: 0.56, y: 0.96))
                combinedShape2.addLine(to: CGPoint(x: 0.56, y: 0.96))
                combinedShape2.addCurve(to: CGPoint(x: 0.41, y: 0.96), controlPoint1: CGPoint(x: 0.52, y: 1), controlPoint2: CGPoint(x: 0.46, y: 1))
                combinedShape2.addLine(to: CGPoint(x: 0.24, y: 0.79))
                combinedShape2.addCurve(to: CGPoint(x: 0.24, y: 0.64), controlPoint1: CGPoint(x: 0.2, y: 0.75), controlPoint2: CGPoint(x: 0.19, y: 0.68))
                combinedShape2.addLine(to: CGPoint(x: 0.79, y: 0.07))
                combinedShape2.addCurve(to: CGPoint(x: 1.09, y: 0.06), controlPoint1: CGPoint(x: 0.87, y: -0.02), controlPoint2: CGPoint(x: 1.01, y: -0.02))
                combinedShape2.addLine(to: CGPoint(x: 1.09, y: 0.06))
                combinedShape2.close()
                combinedShape2.move(to: CGPoint(x: 0.17, y: 0.8))
                combinedShape2.addLine(to: CGPoint(x: 0.39, y: 1.02))
                combinedShape2.addLine(to: CGPoint(x: 0.39, y: 1.02))
                combinedShape2.addCurve(to: CGPoint(x: 0.39, y: 1.09), controlPoint1: CGPoint(x: 0.41, y: 1.04), controlPoint2: CGPoint(x: 0.41, y: 1.07))
                combinedShape2.addCurve(to: CGPoint(x: 0.36, y: 1.11), controlPoint1: CGPoint(x: 0.38, y: 1.1), controlPoint2: CGPoint(x: 0.37, y: 1.11))
                combinedShape2.addLine(to: CGPoint(x: 0.07, y: 1.18))
                combinedShape2.addCurve(to: CGPoint(x: 0, y: 1.14), controlPoint1: CGPoint(x: 0.04, y: 1.19), controlPoint2: CGPoint(x: 0.01, y: 1.17))
                combinedShape2.addCurve(to: CGPoint(x: 0, y: 1.11), controlPoint1: CGPoint(x: -0, y: 1.13), controlPoint2: CGPoint(x: -0, y: 1.12))
                combinedShape2.addLine(to: CGPoint(x: 0.09, y: 0.82))
                combinedShape2.addCurve(to: CGPoint(x: 0.15, y: 0.79), controlPoint1: CGPoint(x: 0.09, y: 0.8), controlPoint2: CGPoint(x: 0.12, y: 0.78))
                combinedShape2.addCurve(to: CGPoint(x: 0.17, y: 0.8), controlPoint1: CGPoint(x: 0.16, y: 0.79), controlPoint2: CGPoint(x: 0.17, y: 0.79))
                combinedShape2.close()
                combinedShape2.move(to: CGPoint(x: 0.17, y: 0.8))
                context.saveGState()
                context.translateBy(x: 9.84, y: 13.39)
                combinedShape2.usesEvenOddFillRule = true
                UIColor.white.setFill()
                combinedShape2.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// RequirementBackground
            do {
                context.saveGState()
                context.translateBy(x: 12.47, y: 21.13)
                context.rotate(by: 300 * CGFloat.pi/180)
                context.translateBy(x: -7.96, y: -9.63)
                
                /// Rectangle
                let rectangle35 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 15.92, height: 19.26), cornerRadius: 1.6)
                context.saveGState()
                context.translateBy(x: -0, y: 0)
                context.saveGState()
                context.beginPath()
                context.addPath(rectangle35.cgPath)
                context.addRect(rectangle35.bounds.insetBy(dx: -2, dy: -2))
                context.clip(using: .evenOdd)
                context.translateBy(x: -18.92, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 18.92, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 2 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
                }
                UIColor.black.setFill()
                rectangle35.fill()
                context.restoreGState()
                context.saveGState()
                rectangle35.addClip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.399, saturation: 1, brightness: 0.63, alpha: 1).cgColor,
                            UIColor(hue: 0.408, saturation: 0.975, brightness: 0.864, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 7.96, y: 19.26),
                    end: CGPoint(x: 7.96, y: 0),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                /// Rectangle 9
                let rectangle36 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 6.79, height: 8.45), cornerRadius: 1.07)
                context.saveGState()
                context.translateBy(x: 4.46, y: 5.88)
                UIColor(white: 1, alpha: 0.15).setFill()
                rectangle36.fill()
                context.restoreGState()
                
                /// Combined Shape
                let combinedShape3 = UIBezierPath()
                combinedShape3.move(to: CGPoint(x: 1.09, y: 0.06))
                combinedShape3.addLine(to: CGPoint(x: 1.14, y: 0.1))
                combinedShape3.addLine(to: CGPoint(x: 1.14, y: 0.1))
                combinedShape3.addCurve(to: CGPoint(x: 1.14, y: 0.41), controlPoint1: CGPoint(x: 1.22, y: 0.19), controlPoint2: CGPoint(x: 1.23, y: 0.32))
                combinedShape3.addCurve(to: CGPoint(x: 1.14, y: 0.41), controlPoint1: CGPoint(x: 1.14, y: 0.41), controlPoint2: CGPoint(x: 1.14, y: 0.41))
                combinedShape3.addLine(to: CGPoint(x: 0.56, y: 0.96))
                combinedShape3.addCurve(to: CGPoint(x: 0.41, y: 0.96), controlPoint1: CGPoint(x: 0.52, y: 1), controlPoint2: CGPoint(x: 0.46, y: 1))
                combinedShape3.addLine(to: CGPoint(x: 0.24, y: 0.79))
                combinedShape3.addLine(to: CGPoint(x: 0.24, y: 0.79))
                combinedShape3.addCurve(to: CGPoint(x: 0.24, y: 0.64), controlPoint1: CGPoint(x: 0.2, y: 0.75), controlPoint2: CGPoint(x: 0.19, y: 0.68))
                combinedShape3.addLine(to: CGPoint(x: 0.79, y: 0.07))
                combinedShape3.addLine(to: CGPoint(x: 0.79, y: 0.07))
                combinedShape3.addCurve(to: CGPoint(x: 1.09, y: 0.06), controlPoint1: CGPoint(x: 0.87, y: -0.02), controlPoint2: CGPoint(x: 1.01, y: -0.02))
                combinedShape3.addLine(to: CGPoint(x: 1.09, y: 0.06))
                combinedShape3.close()
                combinedShape3.move(to: CGPoint(x: 0.17, y: 0.8))
                combinedShape3.addLine(to: CGPoint(x: 0.39, y: 1.02))
                combinedShape3.addLine(to: CGPoint(x: 0.39, y: 1.02))
                combinedShape3.addCurve(to: CGPoint(x: 0.39, y: 1.09), controlPoint1: CGPoint(x: 0.41, y: 1.04), controlPoint2: CGPoint(x: 0.41, y: 1.07))
                combinedShape3.addCurve(to: CGPoint(x: 0.36, y: 1.11), controlPoint1: CGPoint(x: 0.38, y: 1.1), controlPoint2: CGPoint(x: 0.37, y: 1.11))
                combinedShape3.addLine(to: CGPoint(x: 0.07, y: 1.18))
                combinedShape3.addCurve(to: CGPoint(x: 0, y: 1.14), controlPoint1: CGPoint(x: 0.04, y: 1.19), controlPoint2: CGPoint(x: 0.01, y: 1.17))
                combinedShape3.addCurve(to: CGPoint(x: 0, y: 1.11), controlPoint1: CGPoint(x: -0, y: 1.13), controlPoint2: CGPoint(x: -0, y: 1.12))
                combinedShape3.addLine(to: CGPoint(x: 0.09, y: 0.82))
                combinedShape3.addCurve(to: CGPoint(x: 0.15, y: 0.79), controlPoint1: CGPoint(x: 0.09, y: 0.8), controlPoint2: CGPoint(x: 0.12, y: 0.78))
                combinedShape3.addCurve(to: CGPoint(x: 0.17, y: 0.8), controlPoint1: CGPoint(x: 0.16, y: 0.79), controlPoint2: CGPoint(x: 0.17, y: 0.79))
                combinedShape3.close()
                combinedShape3.move(to: CGPoint(x: 0.17, y: 0.8))
                context.saveGState()
                context.translateBy(x: 9.84, y: 13.39)
                combinedShape3.usesEvenOddFillRule = true
                UIColor.white.setFill()
                combinedShape3.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// RequirementBackground
            do {
                context.saveGState()
                context.translateBy(x: 52.53, y: 21.13)
                context.rotate(by: 420 * CGFloat.pi/180)
                context.translateBy(x: -7.96, y: -9.63)
                
                /// Rectangle
                let rectangle38 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 15.92, height: 19.26), cornerRadius: 1.6)
                context.saveGState()
                context.translateBy(x: -0, y: 0)
                context.saveGState()
                context.beginPath()
                context.addPath(rectangle38.cgPath)
                context.addRect(rectangle38.bounds.insetBy(dx: -2, dy: -2))
                context.clip(using: .evenOdd)
                context.translateBy(x: -18.92, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 18.92, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 2 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
                }
                UIColor.black.setFill()
                rectangle38.fill()
                context.restoreGState()
                context.saveGState()
                rectangle38.addClip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.985, saturation: 0.67, brightness: 0.961, alpha: 1).cgColor,
                            UIColor(hue: 0.975, saturation: 0.975, brightness: 0.624, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 7.96, y: 0),
                    end: CGPoint(x: 7.96, y: 19.26),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                /// Rectangle 9
                let rectangle39 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 6.79, height: 8.45), cornerRadius: 1.07)
                context.saveGState()
                context.translateBy(x: 4.46, y: 5.88)
                UIColor(white: 1, alpha: 0.15).setFill()
                rectangle39.fill()
                context.restoreGState()
                
                /// Combined Shape
                let combinedShape4 = UIBezierPath()
                combinedShape4.move(to: CGPoint(x: 1.09, y: 0.06))
                combinedShape4.addLine(to: CGPoint(x: 1.14, y: 0.1))
                combinedShape4.addLine(to: CGPoint(x: 1.14, y: 0.1))
                combinedShape4.addCurve(to: CGPoint(x: 1.14, y: 0.41), controlPoint1: CGPoint(x: 1.22, y: 0.19), controlPoint2: CGPoint(x: 1.23, y: 0.32))
                combinedShape4.addCurve(to: CGPoint(x: 1.14, y: 0.41), controlPoint1: CGPoint(x: 1.14, y: 0.41), controlPoint2: CGPoint(x: 1.14, y: 0.41))
                combinedShape4.addLine(to: CGPoint(x: 0.56, y: 0.96))
                combinedShape4.addCurve(to: CGPoint(x: 0.41, y: 0.96), controlPoint1: CGPoint(x: 0.52, y: 1), controlPoint2: CGPoint(x: 0.46, y: 1))
                combinedShape4.addLine(to: CGPoint(x: 0.24, y: 0.79))
                combinedShape4.addLine(to: CGPoint(x: 0.24, y: 0.79))
                combinedShape4.addCurve(to: CGPoint(x: 0.24, y: 0.64), controlPoint1: CGPoint(x: 0.2, y: 0.75), controlPoint2: CGPoint(x: 0.19, y: 0.68))
                combinedShape4.addLine(to: CGPoint(x: 0.79, y: 0.07))
                combinedShape4.addLine(to: CGPoint(x: 0.79, y: 0.07))
                combinedShape4.addCurve(to: CGPoint(x: 1.09, y: 0.06), controlPoint1: CGPoint(x: 0.87, y: -0.02), controlPoint2: CGPoint(x: 1.01, y: -0.02))
                combinedShape4.addLine(to: CGPoint(x: 1.09, y: 0.06))
                combinedShape4.close()
                combinedShape4.move(to: CGPoint(x: 0.17, y: 0.8))
                combinedShape4.addLine(to: CGPoint(x: 0.39, y: 1.02))
                combinedShape4.addLine(to: CGPoint(x: 0.39, y: 1.02))
                combinedShape4.addCurve(to: CGPoint(x: 0.39, y: 1.09), controlPoint1: CGPoint(x: 0.41, y: 1.04), controlPoint2: CGPoint(x: 0.41, y: 1.07))
                combinedShape4.addCurve(to: CGPoint(x: 0.36, y: 1.11), controlPoint1: CGPoint(x: 0.38, y: 1.1), controlPoint2: CGPoint(x: 0.37, y: 1.11))
                combinedShape4.addLine(to: CGPoint(x: 0.07, y: 1.18))
                combinedShape4.addCurve(to: CGPoint(x: 0, y: 1.14), controlPoint1: CGPoint(x: 0.04, y: 1.19), controlPoint2: CGPoint(x: 0.01, y: 1.17))
                combinedShape4.addCurve(to: CGPoint(x: 0, y: 1.11), controlPoint1: CGPoint(x: -0, y: 1.13), controlPoint2: CGPoint(x: -0, y: 1.12))
                combinedShape4.addLine(to: CGPoint(x: 0.09, y: 0.82))
                combinedShape4.addCurve(to: CGPoint(x: 0.15, y: 0.79), controlPoint1: CGPoint(x: 0.09, y: 0.8), controlPoint2: CGPoint(x: 0.12, y: 0.78))
                combinedShape4.addCurve(to: CGPoint(x: 0.17, y: 0.8), controlPoint1: CGPoint(x: 0.16, y: 0.79), controlPoint2: CGPoint(x: 0.17, y: 0.79))
                combinedShape4.close()
                combinedShape4.move(to: CGPoint(x: 0.17, y: 0.8))
                context.saveGState()
                context.translateBy(x: 9.84, y: 13.39)
                combinedShape4.usesEvenOddFillRule = true
                UIColor.white.setFill()
                combinedShape4.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// RequirementBackground
            do {
                context.saveGState()
                context.translateBy(x: 24.67, y: 0)
                
                /// Rectangle
                let rectangle41 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 15.92, height: 19.26), cornerRadius: 1.6)
                context.saveGState()
                context.translateBy(x: -0, y: 0)
                context.saveGState()
                context.beginPath()
                context.addPath(rectangle41.cgPath)
                context.addRect(rectangle41.bounds.insetBy(dx: -2, dy: -2))
                context.clip(using: .evenOdd)
                context.translateBy(x: -18.92, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 18.92, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 2 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
                }
                UIColor.black.setFill()
                rectangle41.fill()
                context.restoreGState()
                context.saveGState()
                rectangle41.addClip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.59, saturation: 0.815, brightness: 0.608, alpha: 1).cgColor,
                            UIColor(hue: 0.527, saturation: 0.893, brightness: 0.846, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 7.96, y: 19.26),
                    end: CGPoint(x: 7.96, y: 0),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                /// Rectangle 9
                let rectangle42 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 6.79, height: 8.45), cornerRadius: 1.07)
                context.saveGState()
                context.translateBy(x: 4.46, y: 5.88)
                UIColor(white: 1, alpha: 0.15).setFill()
                rectangle42.fill()
                context.restoreGState()
                
                /// Combined Shape
                let combinedShape5 = UIBezierPath()
                combinedShape5.move(to: CGPoint(x: 1.09, y: 0.06))
                combinedShape5.addLine(to: CGPoint(x: 1.14, y: 0.1))
                combinedShape5.addLine(to: CGPoint(x: 1.14, y: 0.1))
                combinedShape5.addCurve(to: CGPoint(x: 1.14, y: 0.41), controlPoint1: CGPoint(x: 1.22, y: 0.19), controlPoint2: CGPoint(x: 1.23, y: 0.32))
                combinedShape5.addCurve(to: CGPoint(x: 1.14, y: 0.41), controlPoint1: CGPoint(x: 1.14, y: 0.41), controlPoint2: CGPoint(x: 1.14, y: 0.41))
                combinedShape5.addLine(to: CGPoint(x: 0.56, y: 0.96))
                combinedShape5.addCurve(to: CGPoint(x: 0.41, y: 0.96), controlPoint1: CGPoint(x: 0.52, y: 1), controlPoint2: CGPoint(x: 0.46, y: 1))
                combinedShape5.addLine(to: CGPoint(x: 0.24, y: 0.79))
                combinedShape5.addLine(to: CGPoint(x: 0.24, y: 0.79))
                combinedShape5.addCurve(to: CGPoint(x: 0.24, y: 0.64), controlPoint1: CGPoint(x: 0.2, y: 0.75), controlPoint2: CGPoint(x: 0.19, y: 0.68))
                combinedShape5.addLine(to: CGPoint(x: 0.79, y: 0.07))
                combinedShape5.addLine(to: CGPoint(x: 0.79, y: 0.07))
                combinedShape5.addCurve(to: CGPoint(x: 1.09, y: 0.06), controlPoint1: CGPoint(x: 0.87, y: -0.02), controlPoint2: CGPoint(x: 1.01, y: -0.02))
                combinedShape5.addLine(to: CGPoint(x: 1.09, y: 0.06))
                combinedShape5.close()
                combinedShape5.move(to: CGPoint(x: 0.17, y: 0.8))
                combinedShape5.addLine(to: CGPoint(x: 0.39, y: 1.02))
                combinedShape5.addLine(to: CGPoint(x: 0.39, y: 1.02))
                combinedShape5.addCurve(to: CGPoint(x: 0.39, y: 1.09), controlPoint1: CGPoint(x: 0.41, y: 1.04), controlPoint2: CGPoint(x: 0.41, y: 1.07))
                combinedShape5.addCurve(to: CGPoint(x: 0.36, y: 1.11), controlPoint1: CGPoint(x: 0.38, y: 1.1), controlPoint2: CGPoint(x: 0.37, y: 1.11))
                combinedShape5.addLine(to: CGPoint(x: 0.07, y: 1.18))
                combinedShape5.addCurve(to: CGPoint(x: 0, y: 1.14), controlPoint1: CGPoint(x: 0.04, y: 1.19), controlPoint2: CGPoint(x: 0.01, y: 1.17))
                combinedShape5.addCurve(to: CGPoint(x: 0, y: 1.11), controlPoint1: CGPoint(x: -0, y: 1.13), controlPoint2: CGPoint(x: -0, y: 1.12))
                combinedShape5.addLine(to: CGPoint(x: 0.09, y: 0.82))
                combinedShape5.addCurve(to: CGPoint(x: 0.15, y: 0.79), controlPoint1: CGPoint(x: 0.09, y: 0.8), controlPoint2: CGPoint(x: 0.12, y: 0.78))
                combinedShape5.addCurve(to: CGPoint(x: 0.17, y: 0.8), controlPoint1: CGPoint(x: 0.16, y: 0.79), controlPoint2: CGPoint(x: 0.17, y: 0.79))
                combinedShape5.close()
                combinedShape5.move(to: CGPoint(x: 0.17, y: 0.8))
                context.saveGState()
                context.translateBy(x: 9.84, y: 13.39)
                combinedShape5.usesEvenOddFillRule = true
                UIColor.white.setFill()
                combinedShape5.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// RequirementBackground
            do {
                context.saveGState()
                context.translateBy(x: 52.53, y: 44.14)
                context.rotate(by: 480 * CGFloat.pi/180)
                context.translateBy(x: -7.96, y: -9.63)
                
                /// Rectangle
                let rectangle44 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 15.92, height: 19.26), cornerRadius: 1.6)
                context.saveGState()
                context.translateBy(x: -0, y: 0)
                context.saveGState()
                context.beginPath()
                context.addPath(rectangle44.cgPath)
                context.addRect(rectangle44.bounds.insetBy(dx: -2, dy: -2))
                context.clip(using: .evenOdd)
                context.translateBy(x: -18.92, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 18.92, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 2 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
                }
                UIColor.black.setFill()
                rectangle44.fill()
                context.restoreGState()
                context.saveGState()
                rectangle44.addClip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.116, saturation: 1, brightness: 1, alpha: 1).cgColor,
                            UIColor(hue: 0.159, saturation: 0.742, brightness: 1, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 7.96, y: 19.26),
                    end: CGPoint(x: 7.96, y: 0),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                /// Rectangle 9
                let rectangle45 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 6.79, height: 8.45), cornerRadius: 1.07)
                context.saveGState()
                context.translateBy(x: 4.46, y: 5.88)
                UIColor(white: 1, alpha: 0.19).setFill()
                rectangle45.fill()
                context.restoreGState()
                
                /// Combined Shape
                let combinedShape6 = UIBezierPath()
                combinedShape6.move(to: CGPoint(x: 1.09, y: 0.06))
                combinedShape6.addLine(to: CGPoint(x: 1.14, y: 0.1))
                combinedShape6.addLine(to: CGPoint(x: 1.14, y: 0.1))
                combinedShape6.addCurve(to: CGPoint(x: 1.14, y: 0.41), controlPoint1: CGPoint(x: 1.22, y: 0.19), controlPoint2: CGPoint(x: 1.23, y: 0.32))
                combinedShape6.addCurve(to: CGPoint(x: 1.14, y: 0.41), controlPoint1: CGPoint(x: 1.14, y: 0.41), controlPoint2: CGPoint(x: 1.14, y: 0.41))
                combinedShape6.addLine(to: CGPoint(x: 0.56, y: 0.96))
                combinedShape6.addCurve(to: CGPoint(x: 0.41, y: 0.96), controlPoint1: CGPoint(x: 0.52, y: 1), controlPoint2: CGPoint(x: 0.46, y: 1))
                combinedShape6.addLine(to: CGPoint(x: 0.24, y: 0.79))
                combinedShape6.addLine(to: CGPoint(x: 0.24, y: 0.79))
                combinedShape6.addCurve(to: CGPoint(x: 0.24, y: 0.64), controlPoint1: CGPoint(x: 0.2, y: 0.75), controlPoint2: CGPoint(x: 0.19, y: 0.68))
                combinedShape6.addLine(to: CGPoint(x: 0.79, y: 0.07))
                combinedShape6.addLine(to: CGPoint(x: 0.79, y: 0.07))
                combinedShape6.addCurve(to: CGPoint(x: 1.09, y: 0.06), controlPoint1: CGPoint(x: 0.87, y: -0.02), controlPoint2: CGPoint(x: 1.01, y: -0.02))
                combinedShape6.addLine(to: CGPoint(x: 1.09, y: 0.06))
                combinedShape6.close()
                combinedShape6.move(to: CGPoint(x: 0.17, y: 0.8))
                combinedShape6.addLine(to: CGPoint(x: 0.39, y: 1.02))
                combinedShape6.addLine(to: CGPoint(x: 0.39, y: 1.02))
                combinedShape6.addCurve(to: CGPoint(x: 0.39, y: 1.09), controlPoint1: CGPoint(x: 0.41, y: 1.04), controlPoint2: CGPoint(x: 0.41, y: 1.07))
                combinedShape6.addCurve(to: CGPoint(x: 0.36, y: 1.11), controlPoint1: CGPoint(x: 0.38, y: 1.1), controlPoint2: CGPoint(x: 0.37, y: 1.11))
                combinedShape6.addLine(to: CGPoint(x: 0.07, y: 1.18))
                combinedShape6.addCurve(to: CGPoint(x: 0, y: 1.14), controlPoint1: CGPoint(x: 0.04, y: 1.19), controlPoint2: CGPoint(x: 0.01, y: 1.17))
                combinedShape6.addCurve(to: CGPoint(x: 0, y: 1.11), controlPoint1: CGPoint(x: -0, y: 1.13), controlPoint2: CGPoint(x: -0, y: 1.12))
                combinedShape6.addLine(to: CGPoint(x: 0.09, y: 0.82))
                combinedShape6.addCurve(to: CGPoint(x: 0.15, y: 0.79), controlPoint1: CGPoint(x: 0.09, y: 0.8), controlPoint2: CGPoint(x: 0.12, y: 0.78))
                combinedShape6.addCurve(to: CGPoint(x: 0.17, y: 0.8), controlPoint1: CGPoint(x: 0.16, y: 0.79), controlPoint2: CGPoint(x: 0.17, y: 0.79))
                combinedShape6.close()
                combinedShape6.move(to: CGPoint(x: 0.17, y: 0.8))
                context.saveGState()
                context.translateBy(x: 9.84, y: 13.39)
                combinedShape6.usesEvenOddFillRule = true
                UIColor.white.setFill()
                combinedShape6.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawTabTop(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 383, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 383, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 383, y: resizedFrame.height / 60)
        context.translateBy(x: -953, y: -1630)
        
        /// Rectangle 13
        let rectangle13 = UIBezierPath()
        rectangle13.move(to: CGPoint(x: 23, y: 0))
        rectangle13.addCurve(to: CGPoint(x: 160.49, y: 0), controlPoint1: CGPoint(x: 68.83, y: 0), controlPoint2: CGPoint(x: 114.66, y: 0))
        rectangle13.addCurve(to: CGPoint(x: 202.45, y: 35.5), controlPoint1: CGPoint(x: 181.47, y: 0), controlPoint2: CGPoint(x: 183.21, y: 35.5))
        rectangle13.addCurve(to: CGPoint(x: 352, y: 35.5), controlPoint1: CGPoint(x: 252.3, y: 35.5), controlPoint2: CGPoint(x: 302.15, y: 35.5))
        rectangle13.addLine(to: CGPoint(x: 352, y: 35.5))
        rectangle13.addCurve(to: CGPoint(x: 375, y: 58.5), controlPoint1: CGPoint(x: 364.7, y: 35.5), controlPoint2: CGPoint(x: 375, y: 45.8))
        rectangle13.addLine(to: CGPoint(x: 375, y: 356))
        rectangle13.addLine(to: CGPoint(x: 375, y: 356))
        rectangle13.addCurve(to: CGPoint(x: 352, y: 379), controlPoint1: CGPoint(x: 375, y: 368.7), controlPoint2: CGPoint(x: 364.7, y: 379))
        rectangle13.addLine(to: CGPoint(x: 23, y: 379))
        rectangle13.addLine(to: CGPoint(x: 23, y: 379))
        rectangle13.addCurve(to: CGPoint(x: 0, y: 356), controlPoint1: CGPoint(x: 10.3, y: 379), controlPoint2: CGPoint(x: 0, y: 368.7))
        rectangle13.addLine(to: CGPoint(x: 0, y: 23))
        rectangle13.addLine(to: CGPoint(x: 0, y: 23))
        rectangle13.addCurve(to: CGPoint(x: 23, y: 0), controlPoint1: CGPoint(x: 0, y: 10.3), controlPoint2: CGPoint(x: 10.3, y: 0))
        rectangle13.close()
        rectangle13.move(to: CGPoint(x: 23, y: 0))
        context.saveGState()
        context.translateBy(x: 957, y: 1633)
        rectangle13.usesEvenOddFillRule = true
        context.saveGState()
        context.beginPath()
        context.addPath(rectangle13.cgPath)
        context.addRect(rectangle13.bounds.insetBy(dx: -4, dy: -5))
        context.clip(using: .evenOdd)
        context.translateBy(x: -380, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 380, y: 1)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1).cgColor)
        }
        UIColor.black.setFill()
        rectangle13.fill()
        context.restoreGState()
        rectangle13.usesEvenOddFillRule = true
        UIColor.white.setFill()
        rectangle13.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawRequirementBackgroundYellow(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 314, height: 374), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 314, height: 374), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 314, y: resizedFrame.height / 374)
        context.translateBy(x: -2208, y: -999)
        
        /// RequirementBackground
        do {
            context.saveGState()
            context.translateBy(x: 2214, y: 1001)
            
            /// Rectangle
            let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 300, height: 360), cornerRadius: 30)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.addRect(rectangle.bounds.insetBy(dx: -8, dy: -12))
            context.clip(using: .evenOdd)
            context.translateBy(x: -309, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 310, y: 5)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 7 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            rectangle.fill()
            context.restoreGState()
            context.saveGState()
            rectangle.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.116, saturation: 1, brightness: 1, alpha: 1).cgColor,
                        UIColor(hue: 0.159, saturation: 0.742, brightness: 1, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 150, y: 360),
                end: CGPoint(x: 150, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 9
            let rectangle9 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 128, height: 158), cornerRadius: 20)
            context.saveGState()
            context.translateBy(x: 84, y: 110)
            UIColor(white: 1, alpha: 0.19).setFill()
            rectangle9.fill()
            context.restoreGState()
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 20.46, y: 1.12))
            combinedShape.addLine(to: CGPoint(x: 21.32, y: 1.95))
            combinedShape.addCurve(to: CGPoint(x: 21.42, y: 7.6), controlPoint1: CGPoint(x: 22.91, y: 3.48), controlPoint2: CGPoint(x: 22.95, y: 6.02))
            combinedShape.addCurve(to: CGPoint(x: 21.31, y: 7.71), controlPoint1: CGPoint(x: 21.38, y: 7.64), controlPoint2: CGPoint(x: 21.34, y: 7.68))
            combinedShape.addLine(to: CGPoint(x: 10.56, y: 18.01))
            combinedShape.addLine(to: CGPoint(x: 10.56, y: 18.01))
            combinedShape.addCurve(to: CGPoint(x: 7.78, y: 18), controlPoint1: CGPoint(x: 9.79, y: 18.76), controlPoint2: CGPoint(x: 8.56, y: 18.75))
            combinedShape.addLine(to: CGPoint(x: 4.46, y: 14.77))
            combinedShape.addCurve(to: CGPoint(x: 4.42, y: 11.94), controlPoint1: CGPoint(x: 3.67, y: 14), controlPoint2: CGPoint(x: 3.65, y: 12.73))
            combinedShape.addLine(to: CGPoint(x: 14.81, y: 1.22))
            combinedShape.addLine(to: CGPoint(x: 14.81, y: 1.22))
            combinedShape.addCurve(to: CGPoint(x: 20.46, y: 1.12), controlPoint1: CGPoint(x: 16.34, y: -0.37), controlPoint2: CGPoint(x: 18.87, y: -0.41))
            combinedShape.addLine(to: CGPoint(x: 20.46, y: 1.12))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 3.27, y: 14.98))
            combinedShape.addLine(to: CGPoint(x: 7.29, y: 19.02))
            combinedShape.addCurve(to: CGPoint(x: 7.28, y: 20.44), controlPoint1: CGPoint(x: 7.68, y: 19.42), controlPoint2: CGPoint(x: 7.68, y: 20.05))
            combinedShape.addCurve(to: CGPoint(x: 6.82, y: 20.7), controlPoint1: CGPoint(x: 7.16, y: 20.57), controlPoint2: CGPoint(x: 7, y: 20.66))
            combinedShape.addLine(to: CGPoint(x: 1.24, y: 22.09))
            combinedShape.addLine(to: CGPoint(x: 1.24, y: 22.09))
            combinedShape.addCurve(to: CGPoint(x: 0.03, y: 21.36), controlPoint1: CGPoint(x: 0.71, y: 22.22), controlPoint2: CGPoint(x: 0.16, y: 21.89))
            combinedShape.addCurve(to: CGPoint(x: 0.04, y: 20.84), controlPoint1: CGPoint(x: -0.01, y: 21.19), controlPoint2: CGPoint(x: -0.01, y: 21.01))
            combinedShape.addLine(to: CGPoint(x: 1.6, y: 15.4))
            combinedShape.addLine(to: CGPoint(x: 1.6, y: 15.4))
            combinedShape.addCurve(to: CGPoint(x: 2.84, y: 14.72), controlPoint1: CGPoint(x: 1.76, y: 14.87), controlPoint2: CGPoint(x: 2.31, y: 14.57))
            combinedShape.addCurve(to: CGPoint(x: 3.27, y: 14.98), controlPoint1: CGPoint(x: 3, y: 14.77), controlPoint2: CGPoint(x: 3.15, y: 14.85))
            combinedShape.addLine(to: CGPoint(x: 3.27, y: 14.98))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 3.27, y: 14.98))
            context.saveGState()
            context.translateBy(x: 185.44, y: 250.23)
            combinedShape.usesEvenOddFillRule = true
            UIColor.white.setFill()
            combinedShape.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawRequirementBackgroundBlue(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 314, height: 374), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 314, height: 374), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 314, y: resizedFrame.height / 374)
        context.translateBy(x: -1852, y: -999)
        
        /// RequirementBackground
        do {
            context.saveGState()
            context.translateBy(x: 1858, y: 1001)
            
            /// Rectangle
            let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 300, height: 360), cornerRadius: 30)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.addRect(rectangle.bounds.insetBy(dx: -8, dy: -12))
            context.clip(using: .evenOdd)
            context.translateBy(x: -309, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 310, y: 5)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 7 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            rectangle.fill()
            context.restoreGState()
            context.saveGState()
            rectangle.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.59, saturation: 0.815, brightness: 0.608, alpha: 1).cgColor,
                        UIColor(hue: 0.527, saturation: 0.893, brightness: 0.846, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 150, y: 360),
                end: CGPoint(x: 150, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle
            let rectangle32 = UIBezierPath()
            rectangle32.move(to: CGPoint.zero)
            rectangle32.addLine(to: CGPoint(x: 120, y: 0))
            rectangle32.addLine(to: CGPoint(x: 120, y: 0))
            rectangle32.addCurve(to: CGPoint(x: 150, y: 30), controlPoint1: CGPoint(x: 136.57, y: 0), controlPoint2: CGPoint(x: 150, y: 13.43))
            rectangle32.addLine(to: CGPoint(x: 150, y: 330))
            rectangle32.addLine(to: CGPoint(x: 150, y: 330))
            rectangle32.addCurve(to: CGPoint(x: 120, y: 360), controlPoint1: CGPoint(x: 150, y: 346.57), controlPoint2: CGPoint(x: 136.57, y: 360))
            rectangle32.addLine(to: CGPoint(x: 0, y: 360))
            rectangle32.addLine(to: CGPoint.zero)
            rectangle32.close()
            rectangle32.move(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 150, y: 0)
            rectangle32.usesEvenOddFillRule = true
            context.saveGState()
            rectangle32.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.985, saturation: 0.67, brightness: 0.961, alpha: 1).cgColor,
                        UIColor(hue: 0.975, saturation: 0.975, brightness: 0.624, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 75, y: 0),
                end: CGPoint(x: 75, y: 360),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 9
            let rectangle9 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 128, height: 158), cornerRadius: 20)
            context.saveGState()
            context.translateBy(x: 84, y: 110)
            UIColor(white: 1, alpha: 0.15).setFill()
            rectangle9.fill()
            context.restoreGState()
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 20.46, y: 1.12))
            combinedShape.addLine(to: CGPoint(x: 21.32, y: 1.95))
            combinedShape.addCurve(to: CGPoint(x: 21.42, y: 7.6), controlPoint1: CGPoint(x: 22.91, y: 3.48), controlPoint2: CGPoint(x: 22.95, y: 6.02))
            combinedShape.addCurve(to: CGPoint(x: 21.31, y: 7.71), controlPoint1: CGPoint(x: 21.38, y: 7.64), controlPoint2: CGPoint(x: 21.34, y: 7.68))
            combinedShape.addLine(to: CGPoint(x: 10.56, y: 18.01))
            combinedShape.addLine(to: CGPoint(x: 10.56, y: 18.01))
            combinedShape.addCurve(to: CGPoint(x: 7.78, y: 18), controlPoint1: CGPoint(x: 9.79, y: 18.76), controlPoint2: CGPoint(x: 8.56, y: 18.75))
            combinedShape.addLine(to: CGPoint(x: 4.46, y: 14.77))
            combinedShape.addCurve(to: CGPoint(x: 4.42, y: 11.94), controlPoint1: CGPoint(x: 3.67, y: 14), controlPoint2: CGPoint(x: 3.65, y: 12.73))
            combinedShape.addLine(to: CGPoint(x: 14.81, y: 1.22))
            combinedShape.addLine(to: CGPoint(x: 14.81, y: 1.22))
            combinedShape.addCurve(to: CGPoint(x: 20.46, y: 1.12), controlPoint1: CGPoint(x: 16.34, y: -0.37), controlPoint2: CGPoint(x: 18.87, y: -0.41))
            combinedShape.addLine(to: CGPoint(x: 20.46, y: 1.12))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 3.27, y: 14.98))
            combinedShape.addLine(to: CGPoint(x: 7.29, y: 19.02))
            combinedShape.addCurve(to: CGPoint(x: 7.28, y: 20.44), controlPoint1: CGPoint(x: 7.68, y: 19.42), controlPoint2: CGPoint(x: 7.68, y: 20.05))
            combinedShape.addCurve(to: CGPoint(x: 6.82, y: 20.7), controlPoint1: CGPoint(x: 7.16, y: 20.57), controlPoint2: CGPoint(x: 7, y: 20.66))
            combinedShape.addLine(to: CGPoint(x: 1.24, y: 22.09))
            combinedShape.addLine(to: CGPoint(x: 1.24, y: 22.09))
            combinedShape.addCurve(to: CGPoint(x: 0.03, y: 21.36), controlPoint1: CGPoint(x: 0.71, y: 22.22), controlPoint2: CGPoint(x: 0.16, y: 21.89))
            combinedShape.addCurve(to: CGPoint(x: 0.04, y: 20.84), controlPoint1: CGPoint(x: -0.01, y: 21.19), controlPoint2: CGPoint(x: -0.01, y: 21.01))
            combinedShape.addLine(to: CGPoint(x: 1.6, y: 15.4))
            combinedShape.addLine(to: CGPoint(x: 1.6, y: 15.4))
            combinedShape.addCurve(to: CGPoint(x: 2.84, y: 14.72), controlPoint1: CGPoint(x: 1.76, y: 14.87), controlPoint2: CGPoint(x: 2.31, y: 14.57))
            combinedShape.addCurve(to: CGPoint(x: 3.27, y: 14.98), controlPoint1: CGPoint(x: 3, y: 14.77), controlPoint2: CGPoint(x: 3.15, y: 14.85))
            combinedShape.addLine(to: CGPoint(x: 3.27, y: 14.98))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 3.27, y: 14.98))
            context.saveGState()
            context.translateBy(x: 185.44, y: 250.23)
            combinedShape.usesEvenOddFillRule = true
            UIColor.white.setFill()
            combinedShape.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawRequirementBackgroundRed(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 314, height: 374), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 314, height: 374), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 314, y: resizedFrame.height / 374)
        context.translateBy(x: -1477, y: -999)
        
        /// RequirementBackground
        do {
            context.saveGState()
            context.translateBy(x: 1483, y: 1001)
            
            /// Rectangle
            let rectangle = UIBezierPath()
            rectangle.move(to: CGPoint(x: 30, y: 0))
            rectangle.addLine(to: CGPoint(x: 150, y: 0))
            rectangle.addLine(to: CGPoint(x: 270, y: 0))
            rectangle.addLine(to: CGPoint(x: 270, y: 0))
            rectangle.addCurve(to: CGPoint(x: 300, y: 30), controlPoint1: CGPoint(x: 286.57, y: 0), controlPoint2: CGPoint(x: 300, y: 13.43))
            rectangle.addLine(to: CGPoint(x: 300, y: 330))
            rectangle.addLine(to: CGPoint(x: 300, y: 330))
            rectangle.addCurve(to: CGPoint(x: 270, y: 360), controlPoint1: CGPoint(x: 300, y: 346.57), controlPoint2: CGPoint(x: 286.57, y: 360))
            rectangle.addLine(to: CGPoint(x: 30, y: 360))
            rectangle.addLine(to: CGPoint(x: 30, y: 360))
            rectangle.addCurve(to: CGPoint(x: 0, y: 330), controlPoint1: CGPoint(x: 13.43, y: 360), controlPoint2: CGPoint(x: 0, y: 346.57))
            rectangle.addLine(to: CGPoint(x: 0, y: 30))
            rectangle.addLine(to: CGPoint(x: 0, y: 30))
            rectangle.addCurve(to: CGPoint(x: 30, y: 0), controlPoint1: CGPoint(x: 0, y: 13.43), controlPoint2: CGPoint(x: 13.43, y: 0))
            rectangle.close()
            rectangle.move(to: CGPoint(x: 30, y: 0))
            context.saveGState()
            rectangle.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.addRect(rectangle.bounds.insetBy(dx: -8, dy: -12))
            context.clip(using: .evenOdd)
            context.translateBy(x: -309, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 310, y: 5)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 7 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            rectangle.fill()
            context.restoreGState()
            rectangle.usesEvenOddFillRule = true
            context.saveGState()
            rectangle.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.985, saturation: 0.67, brightness: 0.961, alpha: 1).cgColor,
                        UIColor(hue: 0.975, saturation: 0.975, brightness: 0.624, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 150, y: 0),
                end: CGPoint(x: 150, y: 360),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 9
            let rectangle9 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 128, height: 158), cornerRadius: 20)
            context.saveGState()
            context.translateBy(x: 84, y: 110)
            UIColor(white: 1, alpha: 0.15).setFill()
            rectangle9.fill()
            context.restoreGState()
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 20.46, y: 1.12))
            combinedShape.addLine(to: CGPoint(x: 21.32, y: 1.95))
            combinedShape.addCurve(to: CGPoint(x: 21.42, y: 7.6), controlPoint1: CGPoint(x: 22.91, y: 3.48), controlPoint2: CGPoint(x: 22.95, y: 6.02))
            combinedShape.addCurve(to: CGPoint(x: 21.31, y: 7.71), controlPoint1: CGPoint(x: 21.38, y: 7.64), controlPoint2: CGPoint(x: 21.34, y: 7.68))
            combinedShape.addLine(to: CGPoint(x: 10.56, y: 18.01))
            combinedShape.addLine(to: CGPoint(x: 10.56, y: 18.01))
            combinedShape.addCurve(to: CGPoint(x: 7.78, y: 18), controlPoint1: CGPoint(x: 9.79, y: 18.76), controlPoint2: CGPoint(x: 8.56, y: 18.75))
            combinedShape.addLine(to: CGPoint(x: 4.46, y: 14.77))
            combinedShape.addCurve(to: CGPoint(x: 4.42, y: 11.94), controlPoint1: CGPoint(x: 3.67, y: 14), controlPoint2: CGPoint(x: 3.65, y: 12.73))
            combinedShape.addLine(to: CGPoint(x: 14.81, y: 1.22))
            combinedShape.addLine(to: CGPoint(x: 14.81, y: 1.22))
            combinedShape.addCurve(to: CGPoint(x: 20.46, y: 1.12), controlPoint1: CGPoint(x: 16.34, y: -0.37), controlPoint2: CGPoint(x: 18.87, y: -0.41))
            combinedShape.addLine(to: CGPoint(x: 20.46, y: 1.12))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 3.27, y: 14.98))
            combinedShape.addLine(to: CGPoint(x: 7.29, y: 19.02))
            combinedShape.addCurve(to: CGPoint(x: 7.28, y: 20.44), controlPoint1: CGPoint(x: 7.68, y: 19.42), controlPoint2: CGPoint(x: 7.68, y: 20.05))
            combinedShape.addCurve(to: CGPoint(x: 6.82, y: 20.7), controlPoint1: CGPoint(x: 7.16, y: 20.57), controlPoint2: CGPoint(x: 7, y: 20.66))
            combinedShape.addLine(to: CGPoint(x: 1.24, y: 22.09))
            combinedShape.addLine(to: CGPoint(x: 1.24, y: 22.09))
            combinedShape.addCurve(to: CGPoint(x: 0.03, y: 21.36), controlPoint1: CGPoint(x: 0.71, y: 22.22), controlPoint2: CGPoint(x: 0.16, y: 21.89))
            combinedShape.addCurve(to: CGPoint(x: 0.04, y: 20.84), controlPoint1: CGPoint(x: -0.01, y: 21.19), controlPoint2: CGPoint(x: -0.01, y: 21.01))
            combinedShape.addLine(to: CGPoint(x: 1.6, y: 15.4))
            combinedShape.addLine(to: CGPoint(x: 1.6, y: 15.4))
            combinedShape.addCurve(to: CGPoint(x: 2.84, y: 14.72), controlPoint1: CGPoint(x: 1.76, y: 14.87), controlPoint2: CGPoint(x: 2.31, y: 14.57))
            combinedShape.addCurve(to: CGPoint(x: 3.27, y: 14.98), controlPoint1: CGPoint(x: 3, y: 14.77), controlPoint2: CGPoint(x: 3.15, y: 14.85))
            combinedShape.addLine(to: CGPoint(x: 3.27, y: 14.98))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 3.27, y: 14.98))
            context.saveGState()
            context.translateBy(x: 185.44, y: 250.23)
            combinedShape.usesEvenOddFillRule = true
            UIColor.white.setFill()
            combinedShape.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawRequirementBackgroundGreen(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 314, height: 374), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 314, height: 374), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 314, y: resizedFrame.height / 374)
        context.translateBy(x: -1108, y: -992)
        
        /// RequirementBackground
        do {
            context.saveGState()
            context.translateBy(x: 1114, y: 994)
            
            /// Rectangle
            let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 300, height: 360), cornerRadius: 30)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.addRect(rectangle.bounds.insetBy(dx: -8, dy: -12))
            context.clip(using: .evenOdd)
            context.translateBy(x: -309, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 310, y: 5)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 7 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            rectangle.fill()
            context.restoreGState()
            context.saveGState()
            rectangle.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.399, saturation: 1, brightness: 0.63, alpha: 1).cgColor,
                        UIColor(hue: 0.408, saturation: 0.975, brightness: 0.864, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 150, y: 360),
                end: CGPoint(x: 150, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 9
            let rectangle9 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 128, height: 158), cornerRadius: 20)
            context.saveGState()
            context.translateBy(x: 84, y: 110)
            UIColor(white: 1, alpha: 0.15).setFill()
            rectangle9.fill()
            context.restoreGState()
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 20.46, y: 1.12))
            combinedShape.addLine(to: CGPoint(x: 21.32, y: 1.95))
            combinedShape.addCurve(to: CGPoint(x: 21.42, y: 7.6), controlPoint1: CGPoint(x: 22.91, y: 3.48), controlPoint2: CGPoint(x: 22.95, y: 6.02))
            combinedShape.addCurve(to: CGPoint(x: 21.31, y: 7.71), controlPoint1: CGPoint(x: 21.38, y: 7.64), controlPoint2: CGPoint(x: 21.34, y: 7.68))
            combinedShape.addLine(to: CGPoint(x: 10.56, y: 18.01))
            combinedShape.addLine(to: CGPoint(x: 10.56, y: 18.01))
            combinedShape.addCurve(to: CGPoint(x: 7.78, y: 18), controlPoint1: CGPoint(x: 9.79, y: 18.76), controlPoint2: CGPoint(x: 8.56, y: 18.75))
            combinedShape.addLine(to: CGPoint(x: 4.46, y: 14.77))
            combinedShape.addCurve(to: CGPoint(x: 4.42, y: 11.94), controlPoint1: CGPoint(x: 3.67, y: 14), controlPoint2: CGPoint(x: 3.65, y: 12.73))
            combinedShape.addLine(to: CGPoint(x: 14.81, y: 1.22))
            combinedShape.addLine(to: CGPoint(x: 14.81, y: 1.22))
            combinedShape.addCurve(to: CGPoint(x: 20.46, y: 1.12), controlPoint1: CGPoint(x: 16.34, y: -0.37), controlPoint2: CGPoint(x: 18.87, y: -0.41))
            combinedShape.addLine(to: CGPoint(x: 20.46, y: 1.12))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 3.27, y: 14.98))
            combinedShape.addLine(to: CGPoint(x: 7.29, y: 19.02))
            combinedShape.addCurve(to: CGPoint(x: 7.28, y: 20.44), controlPoint1: CGPoint(x: 7.68, y: 19.42), controlPoint2: CGPoint(x: 7.68, y: 20.05))
            combinedShape.addCurve(to: CGPoint(x: 6.82, y: 20.7), controlPoint1: CGPoint(x: 7.16, y: 20.57), controlPoint2: CGPoint(x: 7, y: 20.66))
            combinedShape.addLine(to: CGPoint(x: 1.24, y: 22.09))
            combinedShape.addLine(to: CGPoint(x: 1.24, y: 22.09))
            combinedShape.addCurve(to: CGPoint(x: 0.03, y: 21.36), controlPoint1: CGPoint(x: 0.71, y: 22.22), controlPoint2: CGPoint(x: 0.16, y: 21.89))
            combinedShape.addCurve(to: CGPoint(x: 0.04, y: 20.84), controlPoint1: CGPoint(x: -0.01, y: 21.19), controlPoint2: CGPoint(x: -0.01, y: 21.01))
            combinedShape.addLine(to: CGPoint(x: 1.6, y: 15.4))
            combinedShape.addLine(to: CGPoint(x: 1.6, y: 15.4))
            combinedShape.addCurve(to: CGPoint(x: 2.84, y: 14.72), controlPoint1: CGPoint(x: 1.76, y: 14.87), controlPoint2: CGPoint(x: 2.31, y: 14.57))
            combinedShape.addCurve(to: CGPoint(x: 3.27, y: 14.98), controlPoint1: CGPoint(x: 3, y: 14.77), controlPoint2: CGPoint(x: 3.15, y: 14.85))
            combinedShape.addLine(to: CGPoint(x: 3.27, y: 14.98))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 3.27, y: 14.98))
            context.saveGState()
            context.translateBy(x: 185.44, y: 250.23)
            combinedShape.usesEvenOddFillRule = true
            UIColor.white.setFill()
            combinedShape.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawRequirementBackgroundOrange(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 314, height: 374), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 314, height: 374), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 314, y: resizedFrame.height / 374)
        context.translateBy(x: -752, y: -992)
        
        /// RequirementBackground
        do {
            context.saveGState()
            context.translateBy(x: 758, y: 994)
            
            /// Rectangle
            let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 300, height: 360), cornerRadius: 30)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.addRect(rectangle.bounds.insetBy(dx: -8, dy: -12))
            context.clip(using: .evenOdd)
            context.translateBy(x: -309, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 310, y: 5)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 7 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            rectangle.fill()
            context.restoreGState()
            context.saveGState()
            rectangle.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.065, saturation: 0.935, brightness: 1, alpha: 1).cgColor,
                        UIColor(hue: 0.113, saturation: 0.866, brightness: 0.965, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 150, y: 360),
                end: CGPoint(x: 150, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 9
            let rectangle9 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 128, height: 158), cornerRadius: 20)
            context.saveGState()
            context.translateBy(x: 84, y: 110)
            UIColor(white: 1, alpha: 0.15).setFill()
            rectangle9.fill()
            context.restoreGState()
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 20.46, y: 1.12))
            combinedShape.addLine(to: CGPoint(x: 21.32, y: 1.95))
            combinedShape.addCurve(to: CGPoint(x: 21.42, y: 7.6), controlPoint1: CGPoint(x: 22.91, y: 3.48), controlPoint2: CGPoint(x: 22.95, y: 6.02))
            combinedShape.addCurve(to: CGPoint(x: 21.31, y: 7.71), controlPoint1: CGPoint(x: 21.38, y: 7.64), controlPoint2: CGPoint(x: 21.34, y: 7.68))
            combinedShape.addLine(to: CGPoint(x: 10.56, y: 18.01))
            combinedShape.addLine(to: CGPoint(x: 10.56, y: 18.01))
            combinedShape.addCurve(to: CGPoint(x: 7.78, y: 18), controlPoint1: CGPoint(x: 9.79, y: 18.76), controlPoint2: CGPoint(x: 8.56, y: 18.75))
            combinedShape.addLine(to: CGPoint(x: 4.46, y: 14.77))
            combinedShape.addCurve(to: CGPoint(x: 4.42, y: 11.94), controlPoint1: CGPoint(x: 3.67, y: 14), controlPoint2: CGPoint(x: 3.65, y: 12.73))
            combinedShape.addLine(to: CGPoint(x: 14.81, y: 1.22))
            combinedShape.addLine(to: CGPoint(x: 14.81, y: 1.22))
            combinedShape.addCurve(to: CGPoint(x: 20.46, y: 1.12), controlPoint1: CGPoint(x: 16.34, y: -0.37), controlPoint2: CGPoint(x: 18.87, y: -0.41))
            combinedShape.addLine(to: CGPoint(x: 20.46, y: 1.12))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 3.27, y: 14.98))
            combinedShape.addLine(to: CGPoint(x: 7.29, y: 19.02))
            combinedShape.addCurve(to: CGPoint(x: 7.28, y: 20.44), controlPoint1: CGPoint(x: 7.68, y: 19.42), controlPoint2: CGPoint(x: 7.68, y: 20.05))
            combinedShape.addCurve(to: CGPoint(x: 6.82, y: 20.7), controlPoint1: CGPoint(x: 7.16, y: 20.57), controlPoint2: CGPoint(x: 7, y: 20.66))
            combinedShape.addLine(to: CGPoint(x: 1.24, y: 22.09))
            combinedShape.addLine(to: CGPoint(x: 1.24, y: 22.09))
            combinedShape.addCurve(to: CGPoint(x: 0.03, y: 21.36), controlPoint1: CGPoint(x: 0.71, y: 22.22), controlPoint2: CGPoint(x: 0.16, y: 21.89))
            combinedShape.addCurve(to: CGPoint(x: 0.04, y: 20.84), controlPoint1: CGPoint(x: -0.01, y: 21.19), controlPoint2: CGPoint(x: -0.01, y: 21.01))
            combinedShape.addLine(to: CGPoint(x: 1.6, y: 15.4))
            combinedShape.addLine(to: CGPoint(x: 1.6, y: 15.4))
            combinedShape.addCurve(to: CGPoint(x: 2.84, y: 14.72), controlPoint1: CGPoint(x: 1.76, y: 14.87), controlPoint2: CGPoint(x: 2.31, y: 14.57))
            combinedShape.addCurve(to: CGPoint(x: 3.27, y: 14.98), controlPoint1: CGPoint(x: 3, y: 14.77), controlPoint2: CGPoint(x: 3.15, y: 14.85))
            combinedShape.addLine(to: CGPoint(x: 3.27, y: 14.98))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 3.27, y: 14.98))
            context.saveGState()
            context.translateBy(x: 185.44, y: 250.23)
            combinedShape.usesEvenOddFillRule = true
            UIColor.white.setFill()
            combinedShape.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawRequirementBackgroundPurple(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 314, height: 374), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 314, height: 374), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 314, y: resizedFrame.height / 374)
        context.translateBy(x: -377, y: -987)
        
        /// RequirementBackground
        do {
            context.saveGState()
            context.translateBy(x: 383, y: 989)
            
            /// Rectangle
            let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 300, height: 360), cornerRadius: 30)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.addRect(rectangle.bounds.insetBy(dx: -8, dy: -12))
            context.clip(using: .evenOdd)
            context.translateBy(x: -309, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 310, y: 5)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 7 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            rectangle.fill()
            context.restoreGState()
            context.saveGState()
            rectangle.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.763, saturation: 0.653, brightness: 0.396, alpha: 1).cgColor,
                        UIColor(hue: 0.728, saturation: 0.563, brightness: 0.773, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 150, y: 360),
                end: CGPoint(x: 150, y: 0),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 9
            let rectangle9 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 128, height: 158), cornerRadius: 20)
            context.saveGState()
            context.translateBy(x: 84, y: 110)
            UIColor(white: 1, alpha: 0.05).setFill()
            rectangle9.fill()
            context.restoreGState()
            
            /// Combined Shape
            let combinedShape = UIBezierPath()
            combinedShape.move(to: CGPoint(x: 20.46, y: 1.12))
            combinedShape.addLine(to: CGPoint(x: 21.32, y: 1.95))
            combinedShape.addCurve(to: CGPoint(x: 21.42, y: 7.6), controlPoint1: CGPoint(x: 22.91, y: 3.48), controlPoint2: CGPoint(x: 22.95, y: 6.02))
            combinedShape.addCurve(to: CGPoint(x: 21.31, y: 7.71), controlPoint1: CGPoint(x: 21.38, y: 7.64), controlPoint2: CGPoint(x: 21.34, y: 7.68))
            combinedShape.addLine(to: CGPoint(x: 10.56, y: 18.01))
            combinedShape.addLine(to: CGPoint(x: 10.56, y: 18.01))
            combinedShape.addCurve(to: CGPoint(x: 7.78, y: 18), controlPoint1: CGPoint(x: 9.79, y: 18.76), controlPoint2: CGPoint(x: 8.56, y: 18.75))
            combinedShape.addLine(to: CGPoint(x: 4.46, y: 14.77))
            combinedShape.addCurve(to: CGPoint(x: 4.42, y: 11.94), controlPoint1: CGPoint(x: 3.67, y: 14), controlPoint2: CGPoint(x: 3.65, y: 12.73))
            combinedShape.addLine(to: CGPoint(x: 14.81, y: 1.22))
            combinedShape.addLine(to: CGPoint(x: 14.81, y: 1.22))
            combinedShape.addCurve(to: CGPoint(x: 20.46, y: 1.12), controlPoint1: CGPoint(x: 16.34, y: -0.37), controlPoint2: CGPoint(x: 18.87, y: -0.41))
            combinedShape.addLine(to: CGPoint(x: 20.46, y: 1.12))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 3.27, y: 14.98))
            combinedShape.addLine(to: CGPoint(x: 7.29, y: 19.02))
            combinedShape.addCurve(to: CGPoint(x: 7.28, y: 20.44), controlPoint1: CGPoint(x: 7.68, y: 19.42), controlPoint2: CGPoint(x: 7.68, y: 20.05))
            combinedShape.addCurve(to: CGPoint(x: 6.82, y: 20.7), controlPoint1: CGPoint(x: 7.16, y: 20.57), controlPoint2: CGPoint(x: 7, y: 20.66))
            combinedShape.addLine(to: CGPoint(x: 1.24, y: 22.09))
            combinedShape.addLine(to: CGPoint(x: 1.24, y: 22.09))
            combinedShape.addCurve(to: CGPoint(x: 0.03, y: 21.36), controlPoint1: CGPoint(x: 0.71, y: 22.22), controlPoint2: CGPoint(x: 0.16, y: 21.89))
            combinedShape.addCurve(to: CGPoint(x: 0.04, y: 20.84), controlPoint1: CGPoint(x: -0.01, y: 21.19), controlPoint2: CGPoint(x: -0.01, y: 21.01))
            combinedShape.addLine(to: CGPoint(x: 1.6, y: 15.4))
            combinedShape.addLine(to: CGPoint(x: 1.6, y: 15.4))
            combinedShape.addCurve(to: CGPoint(x: 2.84, y: 14.72), controlPoint1: CGPoint(x: 1.76, y: 14.87), controlPoint2: CGPoint(x: 2.31, y: 14.57))
            combinedShape.addCurve(to: CGPoint(x: 3.27, y: 14.98), controlPoint1: CGPoint(x: 3, y: 14.77), controlPoint2: CGPoint(x: 3.15, y: 14.85))
            combinedShape.addLine(to: CGPoint(x: 3.27, y: 14.98))
            combinedShape.close()
            combinedShape.move(to: CGPoint(x: 3.27, y: 14.98))
            context.saveGState()
            context.translateBy(x: 185.44, y: 250.23)
            combinedShape.usesEvenOddFillRule = true
            UIColor.white.setFill()
            combinedShape.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawIPhone7Copy3(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 38, y: 168)
            
            /// Rectangle
            let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 300, height: 120), cornerRadius: 13.31)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.addRect(rectangle.bounds.insetBy(dx: -3, dy: -5))
            context.clip(using: .evenOdd)
            context.translateBy(x: -304, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 304, y: 2)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            rectangle.fill()
            context.restoreGState()
            context.saveGState()
            rectangle.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 313.38, y: 311.08),
                end: CGPoint(x: 255.64, y: 26.87),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 26
            let rectangle26 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 155, height: 1), cornerRadius: 8)
            context.saveGState()
            context.translateBy(x: 90.5, y: 50.5)
            context.scaleBy(x: 1, y: -1)
            context.rotate(by: 2 * CGFloat.pi)
            context.translateBy(x: -77.5, y: -0.5)
            UIColor(white: 0.793, alpha: 1).setFill()
            rectangle26.fill()
            context.restoreGState()
            
            /// Pano
            let pano = NSMutableAttributedString(string: "Pano")
            pano.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "Comfortaa-Bold", size: 24)!, range: NSRange(location: 0, length: pano.length))
            pano.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor(hue: 0.905, saturation: 0, brightness: 0.138, alpha: 1), range: NSRange(location: 0, length: pano.length))
            pano.addAttribute(NSAttributedStringKey.kern, value: -0.21, range: NSRange(location: 0, length: pano.length))
            context.saveGState()
            pano.draw(in: CGRect(x: 19, y: 13, width: 73, height: 36))
            context.restoreGState()
            
            /// Group 3
            do {
                context.saveGState()
                context.translateBy(x: 196, y: 21)
                
                /// Group
                do {
                    context.saveGState()
                    
                    /// Oval
                    let oval = UIBezierPath()
                    oval.move(to: CGPoint(x: 3.72, y: 22.18))
                    oval.addCurve(to: CGPoint(x: 0, y: 38.79), controlPoint1: CGPoint(x: 1.34, y: 27.21), controlPoint2: CGPoint(x: 0, y: 32.85))
                    oval.addCurve(to: CGPoint(x: 38.79, y: 77.58), controlPoint1: CGPoint(x: 0, y: 60.21), controlPoint2: CGPoint(x: 17.37, y: 77.58))
                    oval.addLine(to: CGPoint(x: 38.79, y: 77.58))
                    oval.addCurve(to: CGPoint(x: 77.58, y: 38.79), controlPoint1: CGPoint(x: 60.21, y: 77.58), controlPoint2: CGPoint(x: 77.58, y: 60.21))
                    oval.addCurve(to: CGPoint(x: 38.79, y: 0), controlPoint1: CGPoint(x: 77.58, y: 17.37), controlPoint2: CGPoint(x: 60.21, y: 0))
                    context.saveGState()
                    context.translateBy(x: 0, y: 2.42)
                    context.saveGState()
                    oval.lineWidth = 5.33
                    context.beginPath()
                    context.addPath(oval.cgPath)
                    context.setLineWidth(oval.lineWidth)
                    context.setLineCap(oval.lineCapStyle)
                    context.setLineJoin(oval.lineJoinStyle)
                    context.setMiterLimit(oval.miterLimit)
                    context.replacePathWithStrokedPath()
                    context.clip()
                    context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                                UIColor(hue: 0.985, saturation: 0.67, brightness: 0.961, alpha: 1).cgColor,
                                UIColor(hue: 0.975, saturation: 0.975, brightness: 0.624, alpha: 1).cgColor,
                            ] as CFArray, locations: [0, 1])!,
                        start: CGPoint(x: 38.79, y: 0),
                        end: CGPoint(x: 38.79, y: 77.58),
                        options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                    context.restoreGState()
                    context.restoreGState()
                    
                    /// Oval 2
                    let oval2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 5.33, height: 5.33))
                    context.saveGState()
                    context.translateBy(x: 0.97, y: 22.3)
                    UIColor(hue: 0.982, saturation: 0.745, brightness: 0.847, alpha: 1).setFill()
                    oval2.fill()
                    context.restoreGState()
                    
                    /// Oval 2
                    let oval16 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 5.33, height: 5.33))
                    context.saveGState()
                    context.translateBy(x: 36.36, y: 0)
                    UIColor(hue: 0.986, saturation: 0.669, brightness: 0.961, alpha: 1).setFill()
                    oval16.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// 66%
                let _66 = NSMutableAttributedString(string: "66%")
                _66.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "Comfortaa-Regular", size: 20)!, range: NSRange(location: 0, length: _66.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _66.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _66.length))
                }
                context.saveGState()
                _66.draw(in: CGRect(x: 12, y: 25, width: 54.84, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 38, y: 308)
            
            /// Rectangle
            let rectangle32 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 300, height: 120), cornerRadius: 13.31)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle32.cgPath)
            context.addRect(rectangle32.bounds.insetBy(dx: -3, dy: -5))
            context.clip(using: .evenOdd)
            context.translateBy(x: -304, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 304, y: 2)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            rectangle32.fill()
            context.restoreGState()
            context.saveGState()
            rectangle32.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 313.38, y: 311.08),
                end: CGPoint(x: 255.64, y: 26.87),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 26
            let rectangle33 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 155, height: 1), cornerRadius: 8)
            context.saveGState()
            context.translateBy(x: 90.5, y: 50.5)
            context.scaleBy(x: 1, y: -1)
            context.rotate(by: 2 * CGFloat.pi)
            context.translateBy(x: -77.5, y: -0.5)
            UIColor(white: 0.793, alpha: 1).setFill()
            rectangle33.fill()
            context.restoreGState()
            
            /// BWX
            let bWX = NSMutableAttributedString(string: "BWX")
            bWX.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "Comfortaa-Bold", size: 24)!, range: NSRange(location: 0, length: bWX.length))
            bWX.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor(hue: 0.905, saturation: 0, brightness: 0.138, alpha: 1), range: NSRange(location: 0, length: bWX.length))
            bWX.addAttribute(NSAttributedStringKey.kern, value: -0.21, range: NSRange(location: 0, length: bWX.length))
            context.saveGState()
            bWX.draw(in: CGRect(x: 19, y: 13, width: 73, height: 36))
            context.restoreGState()
            
            /// Group 3
            do {
                context.saveGState()
                context.translateBy(x: 196, y: 21)
                
                /// Group
                do {
                    context.saveGState()
                    
                    /// Oval
                    let oval17 = UIBezierPath()
                    oval17.move(to: CGPoint(x: 3.72, y: 22.18))
                    oval17.addCurve(to: CGPoint(x: 0, y: 38.79), controlPoint1: CGPoint(x: 1.34, y: 27.21), controlPoint2: CGPoint(x: 0, y: 32.85))
                    oval17.addCurve(to: CGPoint(x: 38.79, y: 77.58), controlPoint1: CGPoint(x: 0, y: 60.21), controlPoint2: CGPoint(x: 17.37, y: 77.58))
                    oval17.addLine(to: CGPoint(x: 38.79, y: 77.58))
                    oval17.addCurve(to: CGPoint(x: 77.58, y: 38.79), controlPoint1: CGPoint(x: 60.21, y: 77.58), controlPoint2: CGPoint(x: 77.58, y: 60.21))
                    oval17.addCurve(to: CGPoint(x: 38.79, y: 0), controlPoint1: CGPoint(x: 77.58, y: 17.37), controlPoint2: CGPoint(x: 60.21, y: 0))
                    context.saveGState()
                    context.translateBy(x: 0, y: 2.42)
                    context.saveGState()
                    oval17.lineWidth = 5.33
                    context.beginPath()
                    context.addPath(oval17.cgPath)
                    context.setLineWidth(oval17.lineWidth)
                    context.setLineCap(oval17.lineCapStyle)
                    context.setLineJoin(oval17.lineJoinStyle)
                    context.setMiterLimit(oval17.miterLimit)
                    context.replacePathWithStrokedPath()
                    context.clip()
                    context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                                UIColor(hue: 0.065, saturation: 0.935, brightness: 1, alpha: 1).cgColor,
                                UIColor(hue: 0.113, saturation: 0.866, brightness: 0.965, alpha: 1).cgColor,
                            ] as CFArray, locations: [0, 1])!,
                        start: CGPoint(x: 38.79, y: 82.17),
                        end: CGPoint(x: 38.79, y: 28.23),
                        options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                    context.restoreGState()
                    context.restoreGState()
                    
                    /// Oval 2
                    let oval18 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 5.33, height: 5.33))
                    context.saveGState()
                    context.translateBy(x: 0.97, y: 22.3)
                    UIColor(hue: 0.113, saturation: 0.866, brightness: 0.965, alpha: 1).setFill()
                    oval18.fill()
                    context.restoreGState()
                    
                    /// Oval 2
                    let oval19 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 5.33, height: 5.33))
                    context.saveGState()
                    context.translateBy(x: 36.36, y: 0)
                    UIColor(hue: 0.113, saturation: 0.866, brightness: 0.965, alpha: 1).setFill()
                    oval19.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// 66%
                let _6 = NSMutableAttributedString(string: "66%")
                _6.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "Comfortaa-Regular", size: 20)!, range: NSRange(location: 0, length: _6.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _6.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _6.length))
                }
                context.saveGState()
                _6.draw(in: CGRect(x: 12, y: 25, width: 54.84, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 38, y: 448)
            
            /// Rectangle
            let rectangle34 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 300, height: 120), cornerRadius: 13.31)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle34.cgPath)
            context.addRect(rectangle34.bounds.insetBy(dx: -3, dy: -5))
            context.clip(using: .evenOdd)
            context.translateBy(x: -304, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 304, y: 2)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            rectangle34.fill()
            context.restoreGState()
            context.saveGState()
            rectangle34.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 313.38, y: 311.08),
                end: CGPoint(x: 255.64, y: 26.87),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 26
            let rectangle35 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 155, height: 1), cornerRadius: 8)
            context.saveGState()
            context.translateBy(x: 90.5, y: 50.5)
            context.scaleBy(x: 1, y: -1)
            context.rotate(by: 2 * CGFloat.pi)
            context.translateBy(x: -77.5, y: -0.5)
            UIColor(white: 0.793, alpha: 1).setFill()
            rectangle35.fill()
            context.restoreGState()
            
            /// PA
            let pA = NSMutableAttributedString(string: "PA")
            pA.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "Comfortaa-Bold", size: 24)!, range: NSRange(location: 0, length: pA.length))
            pA.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor(hue: 0.905, saturation: 0, brightness: 0.138, alpha: 1), range: NSRange(location: 0, length: pA.length))
            pA.addAttribute(NSAttributedStringKey.kern, value: -0.21, range: NSRange(location: 0, length: pA.length))
            context.saveGState()
            pA.draw(in: CGRect(x: 19, y: 13, width: 73, height: 36))
            context.restoreGState()
            
            /// Group 3
            do {
                context.saveGState()
                context.translateBy(x: 196, y: 21)
                
                /// Group
                do {
                    context.saveGState()
                    
                    /// Oval
                    let oval20 = UIBezierPath()
                    oval20.move(to: CGPoint(x: 3.72, y: 22.18))
                    oval20.addCurve(to: CGPoint(x: 0, y: 38.79), controlPoint1: CGPoint(x: 1.34, y: 27.21), controlPoint2: CGPoint(x: 0, y: 32.85))
                    oval20.addCurve(to: CGPoint(x: 38.79, y: 77.58), controlPoint1: CGPoint(x: 0, y: 60.21), controlPoint2: CGPoint(x: 17.37, y: 77.58))
                    oval20.addLine(to: CGPoint(x: 38.79, y: 77.58))
                    oval20.addCurve(to: CGPoint(x: 77.58, y: 38.79), controlPoint1: CGPoint(x: 60.21, y: 77.58), controlPoint2: CGPoint(x: 77.58, y: 60.21))
                    oval20.addCurve(to: CGPoint(x: 38.79, y: 0), controlPoint1: CGPoint(x: 77.58, y: 17.37), controlPoint2: CGPoint(x: 60.21, y: 0))
                    context.saveGState()
                    context.translateBy(x: 0, y: 2.42)
                    context.saveGState()
                    oval20.lineWidth = 5.33
                    context.beginPath()
                    context.addPath(oval20.cgPath)
                    context.setLineWidth(oval20.lineWidth)
                    context.setLineCap(oval20.lineCapStyle)
                    context.setLineJoin(oval20.lineJoinStyle)
                    context.setMiterLimit(oval20.miterLimit)
                    context.replacePathWithStrokedPath()
                    context.clip()
                    context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                                UIColor(hue: 0.065, saturation: 0.935, brightness: 1, alpha: 1).cgColor,
                                UIColor(hue: 0.113, saturation: 0.866, brightness: 0.965, alpha: 1).cgColor,
                            ] as CFArray, locations: [0, 1])!,
                        start: CGPoint(x: 38.79, y: 82.17),
                        end: CGPoint(x: 38.79, y: 28.23),
                        options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                    context.restoreGState()
                    context.restoreGState()
                    
                    /// Oval 2
                    let oval21 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 5.33, height: 5.33))
                    context.saveGState()
                    context.translateBy(x: 0.97, y: 22.3)
                    UIColor(hue: 0.113, saturation: 0.866, brightness: 0.965, alpha: 1).setFill()
                    oval21.fill()
                    context.restoreGState()
                    
                    /// Oval 2
                    let oval22 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 5.33, height: 5.33))
                    context.saveGState()
                    context.translateBy(x: 36.36, y: 0)
                    UIColor(hue: 0.113, saturation: 0.866, brightness: 0.965, alpha: 1).setFill()
                    oval22.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// 66%
                let _7 = NSMutableAttributedString(string: "66%")
                _7.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "Comfortaa-Regular", size: 20)!, range: NSRange(location: 0, length: _7.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _7.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _7.length))
                }
                context.saveGState()
                _7.draw(in: CGRect(x: 12, y: 25, width: 54.84, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 38, y: 28)
            
            /// Rectangle
            let rectangle36 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 300, height: 120), cornerRadius: 13.31)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle36.cgPath)
            context.addRect(rectangle36.bounds.insetBy(dx: -3, dy: -5))
            context.clip(using: .evenOdd)
            context.translateBy(x: -304, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 304, y: 2)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 3 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
            }
            UIColor.black.setFill()
            rectangle36.fill()
            context.restoreGState()
            context.saveGState()
            rectangle36.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                        UIColor.white.cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 313.38, y: 311.08),
                end: CGPoint(x: 255.64, y: 26.87),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle 26
            let rectangle37 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 155, height: 1), cornerRadius: 8)
            context.saveGState()
            context.translateBy(x: 90.5, y: 50.5)
            context.scaleBy(x: 1, y: -1)
            context.rotate(by: 2 * CGFloat.pi)
            context.translateBy(x: -77.5, y: -0.5)
            UIColor(white: 0.793, alpha: 1).setFill()
            rectangle37.fill()
            context.restoreGState()
            
            /// Overall
            let overall = NSMutableAttributedString(string: "Overall")
            overall.addAttribute(NSFontAttributeName, value: UIFont(name: "Comfortaa-Bold", size: 24)!, range: NSRange(location: 0, length: overall.length))
            overall.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.905, saturation: 0, brightness: 0.138, alpha: 1), range: NSRange(location: 0, length: overall.length))
            overall.addAttribute(NSKernAttributeName, value: -0.21, range: NSRange(location: 0, length: overall.length))
            context.saveGState()
            overall.draw(in: CGRect(x: 19, y: 13, width: 100, height: 36))
            context.restoreGState()
            
            /// Group 3
            do {
                context.saveGState()
                context.translateBy(x: 196, y: 21)
                
                /// Group
                do {
                    context.saveGState()
                    
                    /// Oval
                    let oval23 = UIBezierPath()
                    oval23.move(to: CGPoint(x: 3.72, y: 22.18))
                    oval23.addCurve(to: CGPoint(x: 0, y: 38.79), controlPoint1: CGPoint(x: 1.34, y: 27.21), controlPoint2: CGPoint(x: 0, y: 32.85))
                    oval23.addCurve(to: CGPoint(x: 38.79, y: 77.58), controlPoint1: CGPoint(x: 0, y: 60.21), controlPoint2: CGPoint(x: 17.37, y: 77.58))
                    oval23.addLine(to: CGPoint(x: 38.79, y: 77.58))
                    oval23.addCurve(to: CGPoint(x: 77.58, y: 38.79), controlPoint1: CGPoint(x: 60.21, y: 77.58), controlPoint2: CGPoint(x: 77.58, y: 60.21))
                    oval23.addCurve(to: CGPoint(x: 38.79, y: 0), controlPoint1: CGPoint(x: 77.58, y: 17.37), controlPoint2: CGPoint(x: 60.21, y: 0))
                    context.saveGState()
                    context.translateBy(x: 0, y: 2.42)
                    context.saveGState()
                    oval23.lineWidth = 5.33
                    context.beginPath()
                    context.addPath(oval23.cgPath)
                    context.setLineWidth(oval23.lineWidth)
                    context.setLineCap(oval23.lineCapStyle)
                    context.setLineJoin(oval23.lineJoinStyle)
                    context.setMiterLimit(oval23.miterLimit)
                    context.replacePathWithStrokedPath()
                    context.clip()
                    context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                                UIColor(hue: 0.59, saturation: 0.815, brightness: 0.608, alpha: 1).cgColor,
                                UIColor(hue: 0.527, saturation: 0.893, brightness: 0.846, alpha: 1).cgColor,
                            ] as CFArray, locations: [0, 1])!,
                        start: CGPoint(x: 38.79, y: 77.58),
                        end: CGPoint(x: 38.79, y: 28.84),
                        options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                    context.restoreGState()
                    context.restoreGState()
                    
                    /// Oval 2
                    let oval24 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 5.33, height: 5.33))
                    context.saveGState()
                    context.translateBy(x: 0.97, y: 22.3)
                    UIColor(hue: 0.527, saturation: 0.894, brightness: 0.847, alpha: 1).setFill()
                    oval24.fill()
                    context.restoreGState()
                    
                    /// Oval 2
                    let oval25 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 5.33, height: 5.33))
                    context.saveGState()
                    context.translateBy(x: 36.36, y: 0)
                    UIColor(hue: 0.527, saturation: 0.894, brightness: 0.847, alpha: 1).setFill()
                    oval25.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                /// 66%
                let _8 = NSMutableAttributedString(string: "66%")
                _8.addAttribute(NSAttributedStringKey.font, value: UIFont(name: "Comfortaa-Regular", size: 20)!, range: NSRange(location: 0, length: _8.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    _8.addAttribute(NSAttributedStringKey.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _8.length))
                }
                context.saveGState()
                _8.draw(in: CGRect(x: 12, y: 25, width: 54.84, height: 31))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawIPhone7Copy(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 667), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 667), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 667)
        
        /// Rectangle 25
        let rectangle25 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 667))
        context.saveGState()
        context.saveGState()
        rectangle25.addClip()
        context.translateBy(x: 187.5, y: 705.47)
        context.rotate(by: -1.57)
        context.scaleBy(x: 2.18, y: 1)
        context.drawRadialGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 0.975, saturation: 0.975, brightness: 0.624, alpha: 1).cgColor,
                    UIColor(hue: 0.985, saturation: 0.67, brightness: 0.961, alpha: 1).cgColor,
                    UIColor.white.cgColor,
                ] as CFArray, locations: [0, 0.15, 1])!,
            startCenter: CGPoint.zero, startRadius: 0,
            endCenter: CGPoint.zero, endRadius: 187.5,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawHygenLogo(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 1024, height: 1024), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 1024, height: 1024), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 1024, y: resizedFrame.height / 1024)
        
        /// Background Color
        UIColor(white: 0.184, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Rectangle 24
        let rectangle24 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1024, height: 1024))
        context.saveGState()
        context.saveGState()
        rectangle24.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                    UIColor.white.cgColor,
                ] as CFArray, locations: [0, 1])!,
            start: CGPoint(x: -64.97, y: 1866.18),
            end: CGPoint(x: 377.8, y: 345.9),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.restoreGState()
        /// Oval 14
        let oval14 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 515, height: 515))
        context.saveGState()
        context.translateBy(x: 256, y: 256)
        context.saveGState()
        oval14.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(white: 0.723, alpha: 1).cgColor,
                    UIColor.white.cgColor,
                ] as CFArray, locations: [0, 1])!,
            start: CGPoint(x: 331.97, y: 0),
            end: CGPoint(x: 223.57, y: 318.81),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.saveGState()
        UIRectClip(oval14.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
        context.setAlpha(0.6)
        context.beginTransparencyLayer(in: oval14.bounds, auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            oval14.fill()
            context.setBlendMode(.destinationOut)
            context.beginTransparencyLayer(in: oval14.bounds, auxiliaryInfo: nil)
            do {
                context.translateBy(x: -515, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 515, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 70 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                }
                UIColor.black.setFill()
                oval14.fill()
            }
            context.endTransparencyLayer()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.restoreGState()
        /// EditClasses
        do {
            context.saveGState()
            context.translateBy(x: 153, y: 135)
            
            /// RequirementBackground
            do {
                context.saveGState()
                context.translateBy(x: 358.94, y: 626.37)
                context.rotate(by: 540 * CGFloat.pi/180)
                context.translateBy(x: -83.38, y: -123.63)
                
                /// Rectangle
                let rectangle39 = UIBezierPath()
                rectangle39.move(to: CGPoint(x: 17.34, y: 0))
                rectangle39.addLine(to: CGPoint(x: 149.15, y: 0))
                rectangle39.addLine(to: CGPoint(x: 149.15, y: 0))
                rectangle39.addCurve(to: CGPoint(x: 165.73, y: 16.44), controlPoint1: CGPoint(x: 158.25, y: 0), controlPoint2: CGPoint(x: 165.65, y: 7.34))
                rectangle39.addCurve(to: CGPoint(x: 165.58, y: 128.03), controlPoint1: CGPoint(x: 166.2, y: 72.11), controlPoint2: CGPoint(x: 166.15, y: 109.3))
                rectangle39.addCurve(to: CGPoint(x: 134.89, y: 235.63), controlPoint1: CGPoint(x: 165, y: 147.26), controlPoint2: CGPoint(x: 154.77, y: 183.12))
                rectangle39.addCurve(to: CGPoint(x: 134.87, y: 235.68), controlPoint1: CGPoint(x: 134.89, y: 235.65), controlPoint2: CGPoint(x: 134.88, y: 235.67))
                rectangle39.addLine(to: CGPoint(x: 134.87, y: 235.68))
                rectangle39.addCurve(to: CGPoint(x: 119.39, y: 246.34), controlPoint1: CGPoint(x: 132.42, y: 242.1), controlPoint2: CGPoint(x: 126.26, y: 246.34))
                rectangle39.addLine(to: CGPoint(x: 50.16, y: 246.34))
                rectangle39.addLine(to: CGPoint(x: 50.16, y: 246.34))
                rectangle39.addCurve(to: CGPoint(x: 34.89, y: 236.21), controlPoint1: CGPoint(x: 43.5, y: 246.34), controlPoint2: CGPoint(x: 37.48, y: 242.35))
                rectangle39.addCurve(to: CGPoint(x: 34.54, y: 235.39), controlPoint1: CGPoint(x: 34.68, y: 235.71), controlPoint2: CGPoint(x: 34.56, y: 235.44))
                rectangle39.addCurve(to: CGPoint(x: 1.11, y: 131.28), controlPoint1: CGPoint(x: 13.63, y: 185.38), controlPoint2: CGPoint(x: 2.49, y: 150.67))
                rectangle39.addCurve(to: CGPoint(x: 0.77, y: 16.25), controlPoint1: CGPoint(x: -0.25, y: 112.23), controlPoint2: CGPoint(x: -0.36, y: 73.89))
                rectangle39.addLine(to: CGPoint(x: 0.77, y: 16.25))
                rectangle39.addCurve(to: CGPoint(x: 17.34, y: 0), controlPoint1: CGPoint(x: 0.94, y: 7.23), controlPoint2: CGPoint(x: 8.31, y: 0))
                rectangle39.close()
                rectangle39.move(to: CGPoint(x: 17.34, y: 0))
                context.saveGState()
                context.translateBy(x: -0, y: 0.92)
                rectangle39.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(rectangle39.cgPath)
                context.addRect(rectangle39.bounds.insetBy(dx: -12, dy: -14))
                context.clip(using: .evenOdd)
                context.translateBy(x: -179.05, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 179.05, y: 2)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.2).cgColor)
                }
                UIColor.black.setFill()
                rectangle39.fill()
                context.restoreGState()
                context.saveGState()
                context.beginPath()
                context.addPath(rectangle39.cgPath)
                context.addRect(rectangle39.bounds.insetBy(dx: -32, dy: -45))
                context.clip(using: .evenOdd)
                context.translateBy(x: -199.05, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 199.05, y: -13)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 32 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.6).cgColor)
                }
                UIColor.black.setFill()
                rectangle39.fill()
                context.restoreGState()
                rectangle39.usesEvenOddFillRule = true
                context.saveGState()
                rectangle39.addClip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.763, saturation: 0.653, brightness: 0.396, alpha: 1).cgColor,
                            UIColor(hue: 0.728, saturation: 0.563, brightness: 0.773, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 83.02, y: 246.34),
                    end: CGPoint(x: 83.02, y: 0),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// RequirementBackground
            do {
                context.saveGState()
                context.translateBy(x: 148.64, y: 502.07)
                context.rotate(by: 240 * CGFloat.pi/180)
                context.translateBy(x: -83.84, y: -123.17)
                
                /// Rectangle
                let rectangle41 = UIBezierPath()
                rectangle41.move(to: CGPoint(x: 17.34, y: 0))
                rectangle41.addLine(to: CGPoint(x: 149.15, y: 0))
                rectangle41.addLine(to: CGPoint(x: 149.15, y: 0))
                rectangle41.addCurve(to: CGPoint(x: 165.73, y: 16.44), controlPoint1: CGPoint(x: 158.25, y: 0), controlPoint2: CGPoint(x: 165.65, y: 7.34))
                rectangle41.addCurve(to: CGPoint(x: 165.58, y: 128.03), controlPoint1: CGPoint(x: 166.2, y: 72.11), controlPoint2: CGPoint(x: 166.15, y: 109.3))
                rectangle41.addCurve(to: CGPoint(x: 134.89, y: 235.63), controlPoint1: CGPoint(x: 165, y: 147.26), controlPoint2: CGPoint(x: 154.77, y: 183.12))
                rectangle41.addLine(to: CGPoint(x: 134.89, y: 235.63))
                rectangle41.addCurve(to: CGPoint(x: 119.39, y: 246.34), controlPoint1: CGPoint(x: 132.45, y: 242.07), controlPoint2: CGPoint(x: 126.28, y: 246.34))
                rectangle41.addLine(to: CGPoint(x: 50.16, y: 246.34))
                rectangle41.addLine(to: CGPoint(x: 50.16, y: 246.34))
                rectangle41.addCurve(to: CGPoint(x: 34.87, y: 236.16), controlPoint1: CGPoint(x: 43.47, y: 246.34), controlPoint2: CGPoint(x: 37.45, y: 242.33))
                rectangle41.addCurve(to: CGPoint(x: 1.11, y: 131.28), controlPoint1: CGPoint(x: 13.75, y: 185.74), controlPoint2: CGPoint(x: 2.49, y: 150.77))
                rectangle41.addCurve(to: CGPoint(x: 0.77, y: 16.25), controlPoint1: CGPoint(x: -0.25, y: 112.23), controlPoint2: CGPoint(x: -0.36, y: 73.89))
                rectangle41.addLine(to: CGPoint(x: 0.77, y: 16.25))
                rectangle41.addCurve(to: CGPoint(x: 17.34, y: 0), controlPoint1: CGPoint(x: 0.94, y: 7.23), controlPoint2: CGPoint(x: 8.31, y: 0))
                rectangle41.close()
                rectangle41.move(to: CGPoint(x: 17.34, y: 0))
                context.saveGState()
                context.translateBy(x: 0.92, y: -0)
                rectangle41.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(rectangle41.cgPath)
                context.addRect(rectangle41.bounds.insetBy(dx: -12, dy: -14))
                context.clip(using: .evenOdd)
                context.translateBy(x: -179.05, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 179.05, y: 2)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.2).cgColor)
                }
                UIColor.black.setFill()
                rectangle41.fill()
                context.restoreGState()
                context.saveGState()
                context.beginPath()
                context.addPath(rectangle41.cgPath)
                context.addRect(rectangle41.bounds.insetBy(dx: -32, dy: -45))
                context.clip(using: .evenOdd)
                context.translateBy(x: -199.05, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 199.05, y: -13)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 32 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.6).cgColor)
                }
                UIColor.black.setFill()
                rectangle41.fill()
                context.restoreGState()
                rectangle41.usesEvenOddFillRule = true
                context.saveGState()
                rectangle41.addClip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.065, saturation: 0.935, brightness: 1, alpha: 1).cgColor,
                            UIColor(hue: 0.113, saturation: 0.866, brightness: 0.965, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 83.02, y: 246.34),
                    end: CGPoint(x: 83.02, y: 0),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// RequirementBackground
            do {
                context.saveGState()
                context.translateBy(x: 148.95, y: 258.86)
                context.rotate(by: 300 * CGFloat.pi/180)
                context.translateBy(x: -83.38, y: -123.17)
                
                /// Rectangle
                let rectangle43 = UIBezierPath()
                rectangle43.move(to: CGPoint(x: 17.34, y: 0))
                rectangle43.addLine(to: CGPoint(x: 149.15, y: 0))
                rectangle43.addLine(to: CGPoint(x: 149.15, y: 0))
                rectangle43.addCurve(to: CGPoint(x: 165.73, y: 16.44), controlPoint1: CGPoint(x: 158.25, y: 0), controlPoint2: CGPoint(x: 165.65, y: 7.34))
                rectangle43.addCurve(to: CGPoint(x: 165.58, y: 128.03), controlPoint1: CGPoint(x: 166.2, y: 72.11), controlPoint2: CGPoint(x: 166.15, y: 109.3))
                rectangle43.addCurve(to: CGPoint(x: 134.89, y: 235.63), controlPoint1: CGPoint(x: 165, y: 147.26), controlPoint2: CGPoint(x: 154.77, y: 183.12))
                rectangle43.addLine(to: CGPoint(x: 134.89, y: 235.63))
                rectangle43.addCurve(to: CGPoint(x: 119.39, y: 246.34), controlPoint1: CGPoint(x: 132.45, y: 242.07), controlPoint2: CGPoint(x: 126.28, y: 246.34))
                rectangle43.addLine(to: CGPoint(x: 50.16, y: 246.34))
                rectangle43.addLine(to: CGPoint(x: 50.16, y: 246.34))
                rectangle43.addCurve(to: CGPoint(x: 34.87, y: 236.16), controlPoint1: CGPoint(x: 43.47, y: 246.34), controlPoint2: CGPoint(x: 37.45, y: 242.33))
                rectangle43.addCurve(to: CGPoint(x: 1.11, y: 131.28), controlPoint1: CGPoint(x: 13.75, y: 185.74), controlPoint2: CGPoint(x: 2.49, y: 150.77))
                rectangle43.addCurve(to: CGPoint(x: 0.77, y: 16.25), controlPoint1: CGPoint(x: -0.25, y: 112.23), controlPoint2: CGPoint(x: -0.36, y: 73.89))
                rectangle43.addLine(to: CGPoint(x: 0.77, y: 16.25))
                rectangle43.addCurve(to: CGPoint(x: 17.34, y: 0), controlPoint1: CGPoint(x: 0.94, y: 7.23), controlPoint2: CGPoint(x: 8.31, y: 0))
                rectangle43.close()
                rectangle43.move(to: CGPoint(x: 17.34, y: 0))
                context.saveGState()
                context.translateBy(x: -0, y: -0)
                rectangle43.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(rectangle43.cgPath)
                context.addRect(rectangle43.bounds.insetBy(dx: -12, dy: -14))
                context.clip(using: .evenOdd)
                context.translateBy(x: -179.05, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 179.05, y: 2)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.2).cgColor)
                }
                UIColor.black.setFill()
                rectangle43.fill()
                context.restoreGState()
                context.saveGState()
                context.beginPath()
                context.addPath(rectangle43.cgPath)
                context.addRect(rectangle43.bounds.insetBy(dx: -32, dy: -45))
                context.clip(using: .evenOdd)
                context.translateBy(x: -199.05, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 199.05, y: -13)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 32 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.6).cgColor)
                }
                UIColor.black.setFill()
                rectangle43.fill()
                context.restoreGState()
                rectangle43.usesEvenOddFillRule = true
                context.saveGState()
                rectangle43.addClip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.399, saturation: 1, brightness: 0.63, alpha: 1).cgColor,
                            UIColor(hue: 0.408, saturation: 0.975, brightness: 0.864, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 83.02, y: 246.34),
                    end: CGPoint(x: 83.02, y: 0),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// RequirementBackground
            do {
                context.saveGState()
                context.translateBy(x: 568.82, y: 257.62)
                context.rotate(by: 420 * CGFloat.pi/180)
                context.translateBy(x: -83.38, y: -123.17)
                
                /// Rectangle
                let rectangle45 = UIBezierPath()
                rectangle45.move(to: CGPoint(x: 17.34, y: 0))
                rectangle45.addLine(to: CGPoint(x: 149.15, y: 0))
                rectangle45.addLine(to: CGPoint(x: 149.15, y: 0))
                rectangle45.addCurve(to: CGPoint(x: 165.73, y: 16.44), controlPoint1: CGPoint(x: 158.25, y: 0), controlPoint2: CGPoint(x: 165.65, y: 7.34))
                rectangle45.addCurve(to: CGPoint(x: 165.58, y: 128.03), controlPoint1: CGPoint(x: 166.2, y: 72.11), controlPoint2: CGPoint(x: 166.15, y: 109.3))
                rectangle45.addCurve(to: CGPoint(x: 134.89, y: 235.63), controlPoint1: CGPoint(x: 165, y: 147.26), controlPoint2: CGPoint(x: 154.77, y: 183.12))
                rectangle45.addLine(to: CGPoint(x: 134.89, y: 235.63))
                rectangle45.addCurve(to: CGPoint(x: 119.39, y: 246.34), controlPoint1: CGPoint(x: 132.45, y: 242.07), controlPoint2: CGPoint(x: 126.28, y: 246.34))
                rectangle45.addLine(to: CGPoint(x: 50.16, y: 246.34))
                rectangle45.addLine(to: CGPoint(x: 50.16, y: 246.34))
                rectangle45.addCurve(to: CGPoint(x: 34.87, y: 236.16), controlPoint1: CGPoint(x: 43.47, y: 246.34), controlPoint2: CGPoint(x: 37.45, y: 242.33))
                rectangle45.addCurve(to: CGPoint(x: 1.11, y: 131.28), controlPoint1: CGPoint(x: 13.75, y: 185.74), controlPoint2: CGPoint(x: 2.49, y: 150.77))
                rectangle45.addCurve(to: CGPoint(x: 0.77, y: 16.25), controlPoint1: CGPoint(x: -0.25, y: 112.23), controlPoint2: CGPoint(x: -0.36, y: 73.89))
                rectangle45.addLine(to: CGPoint(x: 0.77, y: 16.25))
                rectangle45.addCurve(to: CGPoint(x: 17.34, y: 0), controlPoint1: CGPoint(x: 0.94, y: 7.23), controlPoint2: CGPoint(x: 8.31, y: 0))
                rectangle45.close()
                rectangle45.move(to: CGPoint(x: 17.34, y: 0))
                context.saveGState()
                context.translateBy(x: -0, y: -0)
                rectangle45.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(rectangle45.cgPath)
                context.addRect(rectangle45.bounds.insetBy(dx: -12, dy: -14))
                context.clip(using: .evenOdd)
                context.translateBy(x: -179.05, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 179.05, y: 2)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.2).cgColor)
                }
                UIColor.black.setFill()
                rectangle45.fill()
                context.restoreGState()
                context.saveGState()
                context.beginPath()
                context.addPath(rectangle45.cgPath)
                context.addRect(rectangle45.bounds.insetBy(dx: -32, dy: -45))
                context.clip(using: .evenOdd)
                context.translateBy(x: -199.05, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 199.05, y: -13)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 32 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.6).cgColor)
                }
                UIColor.black.setFill()
                rectangle45.fill()
                context.restoreGState()
                rectangle45.usesEvenOddFillRule = true
                context.saveGState()
                rectangle45.addClip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.985, saturation: 0.67, brightness: 0.961, alpha: 1).cgColor,
                            UIColor(hue: 0.975, saturation: 0.975, brightness: 0.624, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 83.02, y: 0),
                    end: CGPoint(x: 83.02, y: 246.34),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// RequirementBackground
            do {
                context.saveGState()
                context.translateBy(x: 274.87, y: 0)
                
                /// Rectangle
                let rectangle47 = UIBezierPath()
                rectangle47.move(to: CGPoint(x: 17.34, y: 0))
                rectangle47.addLine(to: CGPoint(x: 149.15, y: 0))
                rectangle47.addLine(to: CGPoint(x: 149.15, y: 0))
                rectangle47.addCurve(to: CGPoint(x: 165.73, y: 16.44), controlPoint1: CGPoint(x: 158.25, y: 0), controlPoint2: CGPoint(x: 165.65, y: 7.34))
                rectangle47.addCurve(to: CGPoint(x: 165.58, y: 128.03), controlPoint1: CGPoint(x: 166.2, y: 72.11), controlPoint2: CGPoint(x: 166.15, y: 109.3))
                rectangle47.addCurve(to: CGPoint(x: 134.89, y: 235.63), controlPoint1: CGPoint(x: 165, y: 147.26), controlPoint2: CGPoint(x: 154.77, y: 183.12))
                rectangle47.addLine(to: CGPoint(x: 134.89, y: 235.63))
                rectangle47.addCurve(to: CGPoint(x: 119.39, y: 246.34), controlPoint1: CGPoint(x: 132.45, y: 242.07), controlPoint2: CGPoint(x: 126.28, y: 246.34))
                rectangle47.addLine(to: CGPoint(x: 50.16, y: 246.34))
                rectangle47.addLine(to: CGPoint(x: 50.16, y: 246.34))
                rectangle47.addCurve(to: CGPoint(x: 34.87, y: 236.16), controlPoint1: CGPoint(x: 43.47, y: 246.34), controlPoint2: CGPoint(x: 37.45, y: 242.33))
                rectangle47.addCurve(to: CGPoint(x: 1.11, y: 131.28), controlPoint1: CGPoint(x: 13.75, y: 185.74), controlPoint2: CGPoint(x: 2.49, y: 150.77))
                rectangle47.addCurve(to: CGPoint(x: 0.77, y: 16.25), controlPoint1: CGPoint(x: -0.25, y: 112.23), controlPoint2: CGPoint(x: -0.36, y: 73.89))
                rectangle47.addLine(to: CGPoint(x: 0.77, y: 16.25))
                rectangle47.addCurve(to: CGPoint(x: 17.34, y: 0), controlPoint1: CGPoint(x: 0.94, y: 7.23), controlPoint2: CGPoint(x: 8.31, y: 0))
                rectangle47.close()
                rectangle47.move(to: CGPoint(x: 17.34, y: 0))
                context.saveGState()
                context.translateBy(x: -0, y: -0)
                rectangle47.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(rectangle47.cgPath)
                context.addRect(rectangle47.bounds.insetBy(dx: -12, dy: -14))
                context.clip(using: .evenOdd)
                context.translateBy(x: -179.05, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 179.05, y: 2)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.2).cgColor)
                }
                UIColor.black.setFill()
                rectangle47.fill()
                context.restoreGState()
                context.saveGState()
                context.beginPath()
                context.addPath(rectangle47.cgPath)
                context.addRect(rectangle47.bounds.insetBy(dx: -32, dy: -45))
                context.clip(using: .evenOdd)
                context.translateBy(x: -199.05, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 199.05, y: -13)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 32 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.6).cgColor)
                }
                UIColor.black.setFill()
                rectangle47.fill()
                context.restoreGState()
                rectangle47.usesEvenOddFillRule = true
                context.saveGState()
                rectangle47.addClip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.59, saturation: 0.815, brightness: 0.608, alpha: 1).cgColor,
                            UIColor(hue: 0.527, saturation: 0.893, brightness: 0.846, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 83.02, y: 246.34),
                    end: CGPoint(x: 83.02, y: 0),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// RequirementBackground
            do {
                context.saveGState()
                context.translateBy(x: 564.41, y: 498.99)
                context.rotate(by: 480 * CGFloat.pi/180)
                context.translateBy(x: -85.67, y: -131.41)
                
                /// Rectangle
                let rectangle49 = UIBezierPath()
                rectangle49.move(to: CGPoint(x: 17.34, y: 0))
                rectangle49.addLine(to: CGPoint(x: 149.15, y: 0))
                rectangle49.addLine(to: CGPoint(x: 149.15, y: 0))
                rectangle49.addCurve(to: CGPoint(x: 165.73, y: 16.44), controlPoint1: CGPoint(x: 158.25, y: 0), controlPoint2: CGPoint(x: 165.65, y: 7.34))
                rectangle49.addCurve(to: CGPoint(x: 165.58, y: 128.03), controlPoint1: CGPoint(x: 166.2, y: 72.11), controlPoint2: CGPoint(x: 166.15, y: 109.3))
                rectangle49.addCurve(to: CGPoint(x: 134.89, y: 235.63), controlPoint1: CGPoint(x: 165, y: 147.26), controlPoint2: CGPoint(x: 154.77, y: 183.12))
                rectangle49.addLine(to: CGPoint(x: 134.89, y: 235.63))
                rectangle49.addCurve(to: CGPoint(x: 119.39, y: 246.34), controlPoint1: CGPoint(x: 132.45, y: 242.07), controlPoint2: CGPoint(x: 126.28, y: 246.34))
                rectangle49.addLine(to: CGPoint(x: 50.16, y: 246.34))
                rectangle49.addLine(to: CGPoint(x: 50.16, y: 246.34))
                rectangle49.addCurve(to: CGPoint(x: 34.87, y: 236.16), controlPoint1: CGPoint(x: 43.47, y: 246.34), controlPoint2: CGPoint(x: 37.45, y: 242.33))
                rectangle49.addCurve(to: CGPoint(x: 1.11, y: 131.28), controlPoint1: CGPoint(x: 13.75, y: 185.74), controlPoint2: CGPoint(x: 2.49, y: 150.77))
                rectangle49.addCurve(to: CGPoint(x: 0.77, y: 16.25), controlPoint1: CGPoint(x: -0.25, y: 112.23), controlPoint2: CGPoint(x: -0.36, y: 73.89))
                rectangle49.addLine(to: CGPoint(x: 0.77, y: 16.25))
                rectangle49.addCurve(to: CGPoint(x: 17.34, y: 0), controlPoint1: CGPoint(x: 0.94, y: 7.23), controlPoint2: CGPoint(x: 8.31, y: 0))
                rectangle49.close()
                rectangle49.move(to: CGPoint(x: 17.34, y: 0))
                context.saveGState()
                context.translateBy(x: 4.46, y: 1.13)
                rectangle49.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(rectangle49.cgPath)
                context.addRect(rectangle49.bounds.insetBy(dx: -12, dy: -14))
                context.clip(using: .evenOdd)
                context.translateBy(x: -179.05, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 179.05, y: 2)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.2).cgColor)
                }
                UIColor.black.setFill()
                rectangle49.fill()
                context.restoreGState()
                context.saveGState()
                context.beginPath()
                context.addPath(rectangle49.cgPath)
                context.addRect(rectangle49.bounds.insetBy(dx: -32, dy: -45))
                context.clip(using: .evenOdd)
                context.translateBy(x: -199.05, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 199.05, y: -13)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 32 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.6).cgColor)
                }
                UIColor.black.setFill()
                rectangle49.fill()
                context.restoreGState()
                rectangle49.usesEvenOddFillRule = true
                context.saveGState()
                rectangle49.addClip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.116, saturation: 1, brightness: 1, alpha: 1).cgColor,
                            UIColor(hue: 0.159, saturation: 0.742, brightness: 1, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 83.02, y: 246.34),
                    end: CGPoint(x: 83.02, y: 0),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawArtboard(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 1024, height: 1024), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 1024, height: 1024), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 1024, y: resizedFrame.height / 1024)
        
        /// Background Color
        UIColor(white: 0.184, alpha: 1).setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Rectangle 24
        let rectangle24 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 1024, height: 1024))
        context.saveGState()
        context.saveGState()
        rectangle24.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(hue: 1, saturation: 0.023, brightness: 0.57, alpha: 1).cgColor,
                    UIColor.white.cgColor,
                ] as CFArray, locations: [0, 1])!,
            start: CGPoint(x: -64.97, y: 1866.18),
            end: CGPoint(x: 377.8, y: 345.9),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.restoreGState()
        /// Oval 14
        let oval14 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 588, height: 588))
        context.saveGState()
        context.translateBy(x: 219, y: 219)
        context.saveGState()
        oval14.addClip()
        context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                    UIColor(white: 0.723, alpha: 1).cgColor,
                    UIColor.white.cgColor,
                ] as CFArray, locations: [0, 1])!,
            start: CGPoint(x: 543.46, y: -378.79),
            end: CGPoint(x: 255.26, y: 364),
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        context.saveGState()
        UIRectClip(oval14.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0, color: nil)
        context.setAlpha(0.5)
        context.beginTransparencyLayer(in: oval14.bounds, auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            oval14.fill()
            context.setBlendMode(.destinationOut)
            context.beginTransparencyLayer(in: oval14.bounds, auxiliaryInfo: nil)
            do {
                context.translateBy(x: -588, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 588, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 70 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor.black.cgColor)
                }
                UIColor.black.setFill()
                oval14.fill()
            }
            context.endTransparencyLayer()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        context.restoreGState()
        /// EditClasses
        do {
            context.saveGState()
            context.translateBy(x: 121, y: 100)
            
            /// RequirementBackground
            do {
                context.saveGState()
                context.translateBy(x: 390.75, y: 671)
                context.rotate(by: 540 * CGFloat.pi/180)
                context.translateBy(x: -90, y: -109)
                
                /// Rectangle
                let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 179.51, height: 217.19), cornerRadius: 18.1)
                context.saveGState()
                context.translateBy(x: -0, y: -38.19)
                context.saveGState()
                context.beginPath()
                context.addPath(rectangle.cgPath)
                context.addRect(rectangle.bounds.insetBy(dx: -33, dy: -33))
                context.clip(using: .evenOdd)
                context.translateBy(x: -213.51, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 213.51, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 33 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.9).cgColor)
                }
                UIColor.black.setFill()
                rectangle.fill()
                context.restoreGState()
                context.saveGState()
                rectangle.addClip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.763, saturation: 0.653, brightness: 0.396, alpha: 1).cgColor,
                            UIColor(hue: 0.728, saturation: 0.563, brightness: 0.773, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 89.76, y: 217.19),
                    end: CGPoint(x: 89.76, y: 0),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// RequirementBackground
            do {
                context.saveGState()
                context.translateBy(x: 139.65, y: 561.88)
                context.rotate(by: 240 * CGFloat.pi/180)
                context.translateBy(x: -90.5, y: -109)
                
                /// Rectangle
                let rectangle39 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 179.51, height: 217.19), cornerRadius: 18.1)
                context.saveGState()
                context.translateBy(x: 0.53, y: 0.26)
                context.saveGState()
                context.beginPath()
                context.addPath(rectangle39.cgPath)
                context.addRect(rectangle39.bounds.insetBy(dx: -33, dy: -33))
                context.clip(using: .evenOdd)
                context.translateBy(x: -213.51, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 213.51, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 33 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.9).cgColor)
                }
                UIColor.black.setFill()
                rectangle39.fill()
                context.restoreGState()
                context.saveGState()
                rectangle39.addClip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.065, saturation: 0.935, brightness: 1, alpha: 1).cgColor,
                            UIColor(hue: 0.113, saturation: 0.866, brightness: 0.965, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 89.76, y: 217.19),
                    end: CGPoint(x: 89.76, y: 0),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// RequirementBackground
            do {
                context.saveGState()
                context.translateBy(x: 139.48, y: 269.93)
                context.rotate(by: 300 * CGFloat.pi/180)
                context.translateBy(x: -90, y: -109)
                
                /// Rectangle
                let rectangle40 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 179.51, height: 217.19), cornerRadius: 18.1)
                context.saveGState()
                context.translateBy(x: -0, y: 0)
                context.saveGState()
                context.beginPath()
                context.addPath(rectangle40.cgPath)
                context.addRect(rectangle40.bounds.insetBy(dx: -33, dy: -33))
                context.clip(using: .evenOdd)
                context.translateBy(x: -213.51, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 213.51, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 33 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.9).cgColor)
                }
                UIColor.black.setFill()
                rectangle40.fill()
                context.restoreGState()
                context.saveGState()
                rectangle40.addClip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.399, saturation: 1, brightness: 0.63, alpha: 1).cgColor,
                            UIColor(hue: 0.408, saturation: 0.975, brightness: 0.864, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 89.76, y: 217.19),
                    end: CGPoint(x: 89.76, y: 0),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// RequirementBackground
            do {
                context.saveGState()
                context.translateBy(x: 642.4, y: 269.44)
                context.rotate(by: 420 * CGFloat.pi/180)
                context.translateBy(x: -90, y: -109)
                
                /// Rectangle
                let rectangle41 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 179.51, height: 217.19), cornerRadius: 18.1)
                context.saveGState()
                context.translateBy(x: -0, y: 0)
                context.saveGState()
                context.beginPath()
                context.addPath(rectangle41.cgPath)
                context.addRect(rectangle41.bounds.insetBy(dx: -33, dy: -33))
                context.clip(using: .evenOdd)
                context.translateBy(x: -213.51, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 213.51, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 33 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.9).cgColor)
                }
                UIColor.black.setFill()
                rectangle41.fill()
                context.restoreGState()
                context.saveGState()
                rectangle41.addClip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.985, saturation: 0.67, brightness: 0.961, alpha: 1).cgColor,
                            UIColor(hue: 0.975, saturation: 0.975, brightness: 0.624, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 89.76, y: 0),
                    end: CGPoint(x: 89.76, y: 217.19),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// RequirementBackground
            do {
                context.saveGState()
                context.translateBy(x: 301, y: 0)
                
                /// Rectangle
                let rectangle42 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 179.51, height: 217.19), cornerRadius: 18.1)
                context.saveGState()
                context.translateBy(x: -0, y: 0)
                context.saveGState()
                context.beginPath()
                context.addPath(rectangle42.cgPath)
                context.addRect(rectangle42.bounds.insetBy(dx: -33, dy: -33))
                context.clip(using: .evenOdd)
                context.translateBy(x: -213.51, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 213.51, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 33 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.9).cgColor)
                }
                UIColor.black.setFill()
                rectangle42.fill()
                context.restoreGState()
                context.saveGState()
                rectangle42.addClip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.59, saturation: 0.815, brightness: 0.608, alpha: 1).cgColor,
                            UIColor(hue: 0.527, saturation: 0.893, brightness: 0.846, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 89.76, y: 217.19),
                    end: CGPoint(x: 89.76, y: 0),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// RequirementBackground
            do {
                context.saveGState()
                context.translateBy(x: 642.4, y: 562.44)
                context.rotate(by: 480 * CGFloat.pi/180)
                context.translateBy(x: -90, y: -109)
                
                /// Rectangle
                let rectangle43 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 179.51, height: 217.19), cornerRadius: 18.1)
                context.saveGState()
                context.translateBy(x: 89.76, y: 108.59)
                context.rotate(by: 361 * CGFloat.pi/180)
                context.translateBy(x: -89.76, y: -108.59)
                context.saveGState()
                context.beginPath()
                context.addPath(rectangle43.cgPath)
                context.addRect(rectangle43.bounds.insetBy(dx: -32, dy: -32))
                context.clip(using: .evenOdd)
                context.translateBy(x: -212.51, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 212.51, y: 0)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 32 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.9).cgColor)
                }
                UIColor.black.setFill()
                rectangle43.fill()
                context.restoreGState()
                context.saveGState()
                rectangle43.addClip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.116, saturation: 1, brightness: 1, alpha: 1).cgColor,
                            UIColor(hue: 0.159, saturation: 0.742, brightness: 1, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 89.76, y: 217.19),
                    end: CGPoint(x: 89.76, y: 0),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfPinkText() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 55, height: 55), false, 0)
        StyleKit.drawPinkText()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfPinkMail() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 55, height: 55), false, 0)
        StyleKit.drawPinkMail()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfPinkPhone() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 55, height: 55), false, 0)
        StyleKit.drawPinkPhone()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBackButtonPink() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 24), false, 0)
        StyleKit.drawBackButtonPink()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCreatePink() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 108, height: 108), false, 0)
        StyleKit.drawCreatePink()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfProgressPink() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 108, height: 108), false, 0)
        StyleKit.drawProgressPink()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBackButtonYellow() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 24), false, 0)
        StyleKit.drawBackButtonYellow()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBackButtonBlue() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 29, height: 25), false, 0)
        StyleKit.drawBackButtonBlue()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBackButtonRed() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 29, height: 25), false, 0)
        StyleKit.drawBackButtonRed()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBackButtonGreen() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 29, height: 25), false, 0)
        StyleKit.drawBackButtonGreen()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBackButtonOrange() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 29, height: 25), false, 0)
        StyleKit.drawBackButtonOrange()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBackButtonPurple() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 29, height: 25), false, 0)
        StyleKit.drawBackButtonPurple()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfNoPhoneButton() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 55, height: 55), false, 0)
        StyleKit.drawNoPhoneButton()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfNoEmailButton() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 55, height: 55), false, 0)
        StyleKit.drawNoEmailButton()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfNoTextButton() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 55, height: 55), false, 0)
        StyleKit.drawNoTextButton()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCompleteClass1ATag() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 94, height: 35), false, 0)
        StyleKit.drawCompleteClass1ATag()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCompleteClass5Tag() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 94, height: 35), false, 0)
        StyleKit.drawCompleteClass5Tag()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCompleteClass2Tag() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 94, height: 35), false, 0)
        StyleKit.drawCompleteClass2Tag()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCompleteClass3Tag() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 94, height: 35), false, 0)
        StyleKit.drawCompleteClass3Tag()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCompleteClass4Tag() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 94, height: 35), false, 0)
        StyleKit.drawCompleteClass4Tag()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCompleteClass1BTag() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 94, height: 35), false, 0)
        StyleKit.drawCompleteClass1BTag()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRequirementBackgroundDefault() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 314, height: 374), false, 0)
        StyleKit.drawRequirementBackgroundDefault()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfProgressBackgroundNew() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 335, height: 167), false, 0)
        StyleKit.drawProgressBackgroundNew()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfProgressBackgroundSquare() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 167, height: 167), false, 0)
        StyleKit.drawProgressBackgroundSquare()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfOrangeMail() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 55, height: 55), false, 0)
        StyleKit.drawOrangeMail()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfYellowText() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 55, height: 55), false, 0)
        StyleKit.drawYellowText()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBlueText() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 55, height: 55), false, 0)
        StyleKit.drawBlueText()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfPurpleText() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 55, height: 55), false, 0)
        StyleKit.drawPurpleText()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRedText() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 55, height: 55), false, 0)
        StyleKit.drawRedText()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfGreenText() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 55, height: 55), false, 0)
        StyleKit.drawGreenText()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfOrangeText() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 55, height: 55), false, 0)
        StyleKit.drawOrangeText()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfPurpleMail() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 55, height: 55), false, 0)
        StyleKit.drawPurpleMail()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfPurplePhone() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 55, height: 55), false, 0)
        StyleKit.drawPurplePhone()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRedMail() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 55, height: 55), false, 0)
        StyleKit.drawRedMail()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRedPhone() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 55, height: 55), false, 0)
        StyleKit.drawRedPhone()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBlueMail() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 55, height: 55), false, 0)
        StyleKit.drawBlueMail()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBluePhone() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 55, height: 55), false, 0)
        StyleKit.drawBluePhone()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfGreenMail() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 55, height: 55), false, 0)
        StyleKit.drawGreenMail()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfGreenPhone() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 55, height: 55), false, 0)
        StyleKit.drawGreenPhone()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfYellowMail() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 55, height: 55), false, 0)
        StyleKit.drawYellowMail()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfYellowPhone() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 55, height: 55), false, 0)
        StyleKit.drawYellowPhone()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfOrangePhone() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 55, height: 55), false, 0)
        StyleKit.drawOrangePhone()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTabBarBG() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 65), false, 0)
        StyleKit.drawTabBarBG()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfProgressBackground() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 306, height: 126), false, 0)
        StyleKit.drawProgressBackground()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCreateRed() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 108, height: 108), false, 0)
        StyleKit.drawCreateRed()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCreateOrange() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 108, height: 108), false, 0)
        StyleKit.drawCreateOrange()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCreateYellow() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 108, height: 108), false, 0)
        StyleKit.drawCreateYellow()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCreateGreen() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 108, height: 108), false, 0)
        StyleKit.drawCreateGreen()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfProgressYellow() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 108, height: 108), false, 0)
        StyleKit.drawProgressYellow()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfProgressRed() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 108, height: 108), false, 0)
        StyleKit.drawProgressRed()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfProgressGreen() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 108, height: 108), false, 0)
        StyleKit.drawProgressGreen()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfProgressBlue() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 108, height: 108), false, 0)
        StyleKit.drawProgressBlue()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCreateBlue() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 108, height: 108), false, 0)
        StyleKit.drawCreateBlue()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCal() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 108, height: 108), false, 0)
        StyleKit.drawCal()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCreatePurple() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 108, height: 108), false, 0)
        StyleKit.drawCreatePurple()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfProgressPurple() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 108, height: 108), false, 0)
        StyleKit.drawProgressPurple()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfProgressOrange() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 108, height: 108), false, 0)
        StyleKit.drawProgressOrange()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRightButton() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 14, height: 17), false, 0)
        StyleKit.drawRightButton()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfLeftButton() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 14, height: 17), false, 0)
        StyleKit.drawLeftButton()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRClass5Tag() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 94, height: 35), false, 0)
        StyleKit.drawRClass5Tag()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRClass1ATag() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 94, height: 35), false, 0)
        StyleKit.drawRClass1ATag()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRClass3Tag() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 94, height: 35), false, 0)
        StyleKit.drawRClass3Tag()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRClass2Tag() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 94, height: 35), false, 0)
        StyleKit.drawRClass2Tag()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRClass1BTag() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 94, height: 35), false, 0)
        StyleKit.drawRClass1BTag()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRClass4Tag() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 94, height: 35), false, 0)
        StyleKit.drawRClass4Tag()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfClass5Tag() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 94, height: 35), false, 0)
        StyleKit.drawClass5Tag()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfClass1ATag() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 94, height: 35), false, 0)
        StyleKit.drawClass1ATag()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfClass3Tag() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 94, height: 35), false, 0)
        StyleKit.drawClass3Tag()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfClass2Tag() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 94, height: 35), false, 0)
        StyleKit.drawClass2Tag()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfClass1BTag() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 94, height: 35), false, 0)
        StyleKit.drawClass1BTag()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfClass4Tag() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 94, height: 35), false, 0)
        StyleKit.drawClass4Tag()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfClassBackgroundYellow() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 158, height: 188), false, 0)
        StyleKit.drawClassBackgroundYellow()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfClassBackgroundBlue() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 158, height: 188), false, 0)
        StyleKit.drawClassBackgroundBlue()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfClassBackgroundRed() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 158, height: 188), false, 0)
        StyleKit.drawClassBackgroundRed()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfClassBackgroundGreen() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 158, height: 188), false, 0)
        StyleKit.drawClassBackgroundGreen()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfClassBackgroundOrange() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 158, height: 188), false, 0)
        StyleKit.drawClassBackgroundOrange()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfClassBackgroundPurple() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 158, height: 188), false, 0)
        StyleKit.drawClassBackgroundPurple()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfEditClasses() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 69, height: 69), false, 0)
        StyleKit.drawEditClasses()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTabTop() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 383, height: 60), false, 0)
        StyleKit.drawTabTop()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRequirementBackgroundYellow() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 314, height: 374), false, 0)
        StyleKit.drawRequirementBackgroundYellow()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRequirementBackgroundBlue() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 314, height: 374), false, 0)
        StyleKit.drawRequirementBackgroundBlue()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRequirementBackgroundRed() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 314, height: 374), false, 0)
        StyleKit.drawRequirementBackgroundRed()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRequirementBackgroundGreen() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 314, height: 374), false, 0)
        StyleKit.drawRequirementBackgroundGreen()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRequirementBackgroundOrange() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 314, height: 374), false, 0)
        StyleKit.drawRequirementBackgroundOrange()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRequirementBackgroundPurple() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 314, height: 374), false, 0)
        StyleKit.drawRequirementBackgroundPurple()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhone7Copy3() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        StyleKit.drawIPhone7Copy3()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfIPhone7Copy() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 667), false, 0)
        StyleKit.drawIPhone7Copy()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfHygenLogo() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 1024, height: 1024), false, 0)
        StyleKit.drawHygenLogo()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfArtboard() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 1024, height: 1024), false, 0)
        StyleKit.drawArtboard()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
